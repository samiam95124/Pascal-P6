#!/bin/bash
#
# Test a single program run
#
# Execution:
#
# testprog [--pmach|--cmach]... <file>
#
# Tests the compile and run of a single program.
#
# To do this, there must be the files:
#
# <file>.inp - Contains all input to the program
# <file>.cmp - Used to compare the <file>.lst program to, should
#              contain an older, fully checked version of <file>.lst.
# <file>.dif - will contain the differences in output of the run.
# <file>.p6  - Contains the intermediate file.
#
# --pint           Run via pint (the default)
# --pmach          Generate mach code and run the result through pmach.
# --cmach	       Generate mach code and run the result through cmach.
# --cmpfile <file> Use filename following option for compare file
# --noerrmsg       Do not output failure message on compile, the .err file is
#                  sufficient. 
# 

pmach="0"
pmachoption=""
cmach="0"
cmachoption=""
progfile=""
cmpnext="0"
cmpfile=""
noerrmsg="0"
options=""
pint="0"

for param in "$@" 
do

    if [ "$param" = "--pint" ]; then

        pint=1

    elif [ "$param" = "--pmach" ]; then
	
        pmach=1
        pmachoption="--pmach"
        
    elif [ "$param" = "--cmach" ]; then
    
        cmach=1
        cmachoption="--cmach"
      
    elif [ "$param" = "--cmpfile" ]; then
    
    	cmpnext=1
    	
    elif [ "$param" = "--noerrmsg" ]; then
    
    	noerrmsg=1
    	
    elif [ "$param" = "--help" ]; then

		echo ""
		echo "Test a single program run"
		echo ""
		echo "Execution:"
		echo ""
		echo "testprog [--pmach|--cmach]... <file>"
		echo ""
		echo "Tests the compile and run of a single program."
		echo ""
		echo "To do this, there must be the files:"
		echo ""
		echo "<file>.inp - Contains all input to the program"
		echo "<file>.cmp - Used to compare the <file>.lst program to, should"
		echo "             contain an older, fully checked version of <file>.lst."
		echo "<file>.dif - Will contain the differences in output of the run."
		echo ""
		echo "--pmach          Generate mach code and run the result through pmach."
		echo "--cmach          Generate mach code and run the result through cmach."
		echo "--cmpfile <file> Use filename following option for compare file."
		echo "--noerrmsg       Do not output failure message on compile, the .err file is"
		echo "                 sufficient."
		echo ""
		exit 0
		
    elif [ "${param:0:1}" = "-" ]; then

        # concatentate unrecognized options in option string
        options="$options $param"

	else
	
        if [ "$cmpnext" = "1" ] 
        then
        
        	cmpfile=$param
        	cmpnext=0
        	
        else
         
			if [ ! -f "$param.pas" ]; then
		
				echo "$param.pas does not exist"
				exit 1
			
			fi
    		echo "Compiling $param..."
    		compile $options $pmachoption $cmachoption $param
    		if [ $? -ne 0 ]; then
    		
    		    if [ "$noerrmsg" = "0" ]; then
    		    
    		    	echo "*** Compile file $param failed"
    				
    			fi
    			exit 1
    		
    		else
    		
    			#
    			# Collect module sections to single intermediate
    			#
    			cat $param.p6 >> temp.p6
    			
    		fi
    		#
    		# Set the main run program as the last one
    		#
    		progfile=$param
    		
    	fi
		
    fi
    
done

#
# Compile and run the program
#
if [ "$progfile" = "" ]; then

	echo "*** No program file was specified"
	exit 1
	
fi

#
# set default compare file
#
if [ "$cmpfile" = "" ]; then

	cmpfile="$progfile"
	
fi

#
# Move final collected intermediate to target.
# Note that even the main file will have its intermediate added to the last.
#
mv temp.p6 $progfile.p6

if [ ! -f $progfile.inp ]
then

   echo "*** Error: Input file $progfile.inp does not exist"
   exit 1

fi
if [ ! -f $cmpfile.cmp ]
then

   echo "*** Error: File $cmpfile.cmp does not exist"
   exit 1

fi

echo "Running $progfile..."
# echo "run $pmachoption $cmachoption $options $progfile"
run $pmachoption $cmachoption $options $progfile
if [ $? -eq 0 ]; then

    #
    # Check output matches the compare file
    #
    diffnole $progfile.lst $cmpfile.cmp > $progfile.dif
    ls -l $progfile.dif > $progfile.tmp
    grep ".dif" $progfile.tmp
    rm -f $progfile.tmp
    ## pass if diff file is empty
    if test -s $progfile.dif
    then
        if [ "$noerrmsg" = "0" ]; then
    		    
            echo "*** FAIL"

        fi
        exit 1
    else
        echo "PASS"
    fi

else

    exit 1

fi
