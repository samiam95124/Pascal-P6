#!/bin/bash
#
# Compile and run with P6 using GPC
#
# Execute with:
#
# p6 [flags] [<sourcefile>]...
#
# Where <sourcefile> is the name of the source file without
# extention. The Pascal input file(s) are compiled and run
# as a group. Any compiler errors are output to the screen.
# Input and output to and from the running program are from
# and to the console.
#
# The flags are one of:
#
# --pmach	  Generate mach code and run the result through pmach.
# --cmach	  Generate mach code and run the result through cmach.
# --package   Generate a packaged application and run.
# --pgen      Generate a native application and run.
#
# The intermediate code is placed in <file>.p6, where the <file> is the last
# filename on the command line, which is considered the name of the program.
# If a binary intermediate is selected (pmach, cmach or package mode), then the
# intel hex format binary form of the P-machine code will be placed in
# <file>.p6o, where <file> is the program name. For package mode, the final
# executable will be placed under the program name.
#

pint=0
pmach=0
cmach=0
package=0
pgen=1
progfile=""
options=""
objects=""

for param in "$@" 
do

    if [ "$param" = "--pint" ]; then
	
        pint=1
        pmach=0
        cmach=0
        package=0
        pgen=0
     
    elif [ "$param" = "--pmach" ]; then
	
        pmach=1
        pint=0
        cmach=0
        package=0
        pgen=0
        
    elif [ "$param" = "--cmach" ]; then
    
        cmach=1
        pint=0
        pmach=0
        package=0
        pgen=0
        
    elif [ "$param" = "--package" ]; then
    
        package=1
        pint=0
        pmach=0
        cmach=0
        pgen=0

    elif [ "$param" = "--pgen" ]; then
    
        pgen=1
        pint=0
        pmach=0
        cmach=0
        package=0
      
    elif [ "$param" = "--help" ]; then
    
		echo
		echo "Compile with P6 using GPC"
		echo
		echo "Execute with:"
		echo
		echo "p6 [--pmach|--cmach] [<sourcefile>]..."
		echo
		echo "where <sourcefile> is the name of the source file without"
		echo "extention. The Pascal input file\(s\) are compiled and run"
		echo "as a group. Any compiler errors are output to the screen."
		echo "Input and output to and from the running program are from"
		echo "and to the console."
		echo
		echo "The flags are one of:"
		echo
		echo "--pmach	Generate mach code and run the result through pmach."
		echo "--cmach	Generate mach code and run the result through cmach."
		echo "--pint    Generate mach code and run the result through pint."
        echo "--package Generate a packaged application and run."
        echo "--pgen    Generate assembly code with pgen for the current machine (default)."
		echo
		echo "The intermediate code, if used, is placed in <file>.p6. Otherwise"
        echo "the executable is in <file>, the binary deck if used is in <file>.p6o."
		echo
		exit 0
		
    elif [ "${param:0:1}" = "-" ]; then

        # concatentate unrecognized options in option string
        options="$options $param"

	elif [ ! -z "$param.pas" ]; then
	
		if [ ! -f "$param.pas" ]; then
		
			echo "$param.pas does not exist"
			exit 1
			
		fi
		echo Compiling $param...
	    pcom $param.pas $param.p6 $options > temp
        grep 'Errors in program: 0' temp > temp2
        if [ "$?" != "0" ]; then

            cat temp
            rm temp temp2
            exit 1

        fi
        cat temp
        rm temp temp2
        if [ "$pgen" = "1" ]; then

            # generate .s assembly files
            pgen $param.p6 $param.s
            # form list of objects
            objects="$objects $param.s"

        fi
        # generate concatenated intermediates
        cat $param.p6 >> temp.p6
		progfile="$param"
		
    fi
    
done

if [ -z "$progfile" ]; then

	echo "*** Error: No compile file specified"
	exit 1
	
fi

#
# Put intermediate under the program filename (if not pgen)
#
if [ "$pgen" = "0" ]; then

    mv temp.p6 $progfile.p6

fi

#
# Run combined file
#
if [ "$pmach" = "1" ]; then

	echo Running with pmach
	pint $progfile.p6 $progfile.p6o --machdeck $options
	pmach $progfile.p6o $progfile.out $options
	
elif [ "$cmach" = "1" ]; then

	echo Running with cmach
	pint $progfile.p6 $progfile.p6o --machdeck $options
	cmach $progfile.p6o $progfile.out $options
	
elif [ "$package" = "1" ]; then

    echo Running in packaged mode
	pint $progfile.p6 $progfile.p6o --machdeck
	genobj $progfile.p6o program_code.c
	gcc -DPACKAGE -DWRDSIZ64 -DGPC=0 -I. -o $progfile $PASCALP6/source/cmach/cmach.c -lm
	./$progfile $options
	
elif [ "$pgen" = "1" ]; then

	echo Running with pgen
    gcc -g3 -DWRDSIZ64 $PASCALP6/source/AMD64/gcc/psystem.c \
        -x assembler $PASCALP6/source/AMD64/gcc/psystem_asm.asm \
        $PASCALP6/source/AMD64/gcc/main.asm $objects -o $progfile -lm
    ./$progfile

else

    #echo "Will execute: pint $progfile.p6 $progfile.out $options"
	pint $progfile.p6 $progfile.out $options

fi
