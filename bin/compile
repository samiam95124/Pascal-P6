#!/bin/bash
#
# Compile file in batch mode using GPC Pascal.
#
# Runs a compile with the input and output coming from/going to files.
#
# Execution:
#
# Compile [--pmach|--cmach] <file>
#
# <file> is the filename without extention.
#
# The files are:
#
# <file>.pas - The Pascal source file
# <file>.p6  - The intermediate file produced
# <file>.err - The errors output from the compiler
#
# Note that the l+ option must be specified to get a full
# listing in the .err file (or just a lack of l-).
#
# The flags are one of:
#
# --pmach	Generate mach code and run the result through pmach.
# --cmach	Generate mach code and run the result through cmach.
# --pint    Generate mach code and run the result through pint.
# --package Generate a unified executable with mach code and interpreter.
# --pgen    Generate assembly code via pgen for the current machine (default).
#
pint=0
pmach=0
cmach=0
package=0
pgen=1
progfile=""
options=""
objects=""
noerrmsg="0"
noerrmsgoption=""
fails="0"
thisfail="0"
iso7185="0"
iso7185option=""

#echo "compile: command line: $@"

catints=""
caterrs=""

for param in "$@" 
do

    if [ "$param" = "--pint" ]; then
	
        pint=1
        pmach=0
        cmach=0
        package=0
        pgen=0
        
    elif [ "$param" = "--pmach" ]; then
	
        pmach=1
        pint=0
        cmach=0
        package=0
        pgen=0
        
    elif [ "$param" = "--cmach" ]; then
    
        cmach=1
        pint=0
        pmach=0
        package=0
        pgen=0
        
    elif [ "$param" = "--package" ]; then
    
        package=1
        pint=0
        pmach=0
        cmach=0
        pgen=0

    elif [ "$param" = "--pgen" ]; then
    
        pgen=1
        pint=0
        pmach=0
        cmach=0
        package=0

    elif [ "$param" = "--noerrmsg" ]; then
    
    	noerrmsg=1
        noerrmsgoption="--noerrmsg"

    elif [ "$param" = "--iso7185" ]; then
    
    	iso7185=1
        iso7185option="-DISO7185=1"
      
    elif [ "$param" = "--help" ]; then
    
		echo
		echo "Compile with P6 using GPC"
		echo
		echo "Execute with:"
		echo
		echo "p6 [--pmach|--cmach|--package|--pgen] [<sourcefile>]..."
		echo
		echo "where <sourcefile> is the name of the source file without"
		echo "extention. The Pascal input file\(s\) are compiled and run"
		echo "as a group. Any compiler errors are output to the screen."
		echo "Input and output to and from the running program are from"
		echo "and to the console."
		echo
		echo "The flags are one of:"
		echo
		echo "--pmach	 Generate mach code and run the result through pmach."
		echo "--cmach	 Generate mach code and run the result through cmach."
		echo "--pint     Generate mach code and run the result through pint."
        echo "--package  Generate a packaged application and run."
        echo "--pgen     Generate assembly code with pgen for the current machine (default)."
		echo "--noerrmsg Do not output failure message on compile, the .err file is"
		echo "           sufficient."
		echo
		echo "The intermediate code, if used, is placed in <file>.p6. Otherwise"
        echo "the executable is in <file>, the binary deck if used is in <file>.p6o."
		echo
		exit 0
		
    elif [ "${param:0:1}" = "-" ]; then

        # concatentate unrecognized options in option string
        options="$options $param"

	elif [ ! -z "$param.pas" ]; then

	
		if [ ! -f "$param.pas" ]; then
		
			echo "$param.pas does not exist"
			exit 1
			
		fi
		echo Compiling $param...
        thisfail=0
        #echo "Will execute: pcom $param.pas $param.p6 $options"
        pcom $param.pas $param.p6 $options > temp
        grep 'Errors in program: 0' temp > temp2
        if [ "$?" != "0" ]; then

            fails=1
            thisfail=1

        fi
        cat temp >> caterrs.err
        rm temp temp2
        if [ "$pgen" = "1" ] && [ "$thisfail" = "0" ]; then

            # generate .s assembly files
            cp $param.p6 prd
            #echo "Will execute: pgen $param.p6 $param.s >> temp.err"
            pgen $param.p6 $param.s >> caterrs.err
            # form list of objects
            objects="$objects $param.s"

        fi
        # generate concatenated intermediates
	    cat $param.p6 >> catints.p6
		progfile="$param"
		
    fi
    
done

if [ -z "$progfile" ]; then

	echo "*** Error: No compile file specified"
	exit 1
	
fi

#
# Put intermediate and error under the program filename
#
mv catints.p6 $progfile.p6
mv caterrs.err $progfile.err

#
# Print errors unless supressed
#
if [ "$noerrmsg" = "0" ]; then

    cat $progfile.err

fi

#
# Exit with bad status if any fail
#
if [ "$fails" != "0" ]; then

    exit 1
        
fi

#
# Construct combined intermediate under the program filename
#
if [ "$pmach" = "1" ]; then

    echo "o e+" > temp
	cat temp $progfile.p6 > temp2.p6
    rm temp
	pint temp2.p6 $progfile.p6o
    rm temp2.p6
	
elif [ "$cmach" = "1" ]; then

    echo "o e+" > temp
	cat temp $progfile.p6 > temp2.p6
    rm temp
	pint temp2.p6 $progfile.p6o
	
elif [ "$package" = "1" ]; then

    echo "o e+" > temp
	cat temp $progfile.p6 > temp2.p6
    rm temp
	pint temp2.p6 $progfile.p6o
	genobj $progfile.p6o program_code.c
	gcc -DPACKAGE -DWRDSIZ64 -DGPC=0 -I. -o $progfile $PASCALP6/source/cmach/cmach.c -lm

elif [ "$pgen" = "1" ]; then

    #echo "Will execute: gcc -g3 -DWRDSIZ64 $iso7185option $PASCALP6/source/AMD64/gcc/psystem.c -x assembler $PASCALP6/source/AMD64/gcc/psystem.asm $PASCALP6/source/AMD64/gcc/main.asm $objects -o $progfile -lm"
    gcc -g3 -DWRDSIZ64 $iso7185option $PASCALP6/source/AMD64/gcc/psystem.c \
        -x assembler $PASCALP6/source/AMD64/gcc/psystem.asm \
        $PASCALP6/source/AMD64/gcc/main.asm $objects -o $progfile -lm >> $progfile.err 2>&1

fi
