#!/bin/bash
#
# Compile file in batch mode using GPC Pascal.
#
# Runs a compile with the input and output coming from/going to files.
#
# Execution:
#
# Compile [--pmach|--cmach] <file>
#
# <file> is the filename without extention.
#
# The files are:
#
# <file>.pas - The Pascal source file
# <file>.p6  - The intermediate file produced
# <file>.err - The errors output from the compiler
#
# Note that the l+ option must be specified to get a full
# listing in the .err file (or just a lack of l-).
#
# The flags are one of:
#
# --pmach	Generate mach code and run the result through pmach.
# --cmach	Generate mach code and run the result through cmach.
#
pmach=0
cmach=0
progfile=""

for param in "$@" 
do

    if [ "$param" = "--pmach" ]; then
	
        pmach=1
        
    elif [ "$param" = "--cmach" ]; then
    
        cmach=1
      
    elif [ "$param" = "--help" ]; then
    
        echo ""
        echo "Compile file in batch mode using GPC Pascal."
		echo ""
		echo "Runs a compile with the input and output coming from/going to files."
		echo ""
		echo "Execution:"
		echo ""
		echo "Compile [--pmach|--cmach] <file>"
		echo ""
		echo "<file> is the filename without extention."
		echo ""
		echo "The files are:"
		echo ""
		echo "<file>.pas - The Pascal source file."
		echo "<file>.p6  - The intermediate file produced."
		echo "<file>.err - The errors output from the compiler."
		echo ""
		echo "Note that the l+ option must be specified to get a full"
		echo "listing in the .err file \(or just a lack of l-\)."
		echo ""
		echo "The flags are one of:"
		echo ""
		echo "--pmach	Generate mach code and run the result through pmach."
		echo "--cmach	Generate mach code and run the result through cmach."
		echo ""
		exit 0
		
	else
	
		if [ ! -f "$param.pas" ]; then
		
			echo "$param.pas does not exist"
			exit 1
			
		fi
		progfile="$param"
		
    fi
    
done

if [ -z "$progfile" ]; then

	echo "*** Error: No compile file specified"
	exit 1
	
fi

cp $progfile.pas prd
pcom > $progfile.err

#
# The status of the compile is not returned, so convert a non-zero
# error message to fail status
#
grep -q "Errors in program: 0" $progfile.err
rc=$?
if [[ $rc != 0 ]] ; then

    exit 1
        
fi
#
# Move the prr file to <file.p6>
#
rm -f $progfile.p6
mv prr $progfile.p6
