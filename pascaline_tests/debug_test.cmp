Compiling debug_test1...
P6 Pascal compiler vs. 0.2.x
Pascal-P6 complies with the requirements of Pascaline version 0.4
and the following annexes: A,B,C,E.


     1       -8 module debug_test1(output); 
     2       -8  
     3       -8 procedure writehi; 
     4      -16  
     5      -16 begin 
     6        7  
     7        7     writeln('this is debug test1') 
     8       14  
     9       14 end; 
    10       17  
    11       17 begin 
    12       17  
    13       17 end. 

Errors in program: 0
Compiling debug_test...
P6 Pascal compiler vs. 0.2.x
Pascal-P6 complies with the requirements of Pascaline version 0.4
and the following annexes: A,B,C,E.


     1       -8 program debug_test(output); 
     2       -8  
     3       -8 joins debug_test1; 
     4        1  
     5        1 type 
     6       -8     enum = (one, two, three); 
     7       -8     sub = 1..10; 
     8       -8     a10 = array 10 of integer; 
     9       -8     r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real;  
    10       -8                a: a10 end; 
    11       -8     r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real;  
    12       -8                 rec: r; a: a10 end; 
    13       -8     a2 = array 10 of r2; 
    14       -8  
    15       -8 var i, x, i2: integer; 
    16       -8     c: char; 
    17       -8     b: boolean; 
    18       -8     e: enum; 
    19       -8     sr: sub; 
    20       -8     f: real; 
    21       -8     rv: r2; 
    22       -8     a: a10; 
    23       -8     ar: a2; 
    24       -8     pi: ^integer; 
    25       -8  
    26       -8 procedure stop1; begin end; 
    27        2  
    28        2 procedure stop2; begin end; 
    29        3  
    30        3 procedure stop3; begin end; 
    31        4  
    32        4 procedure traceme; begin end; 
    33        5  
    34        5 procedure stop4; begin end; 
    35        6  
    36        6 procedure stop5; begin end; 
    37        7  
    38        7 procedure stop6; begin end; 
    39        8  
    40        8 procedure stop7; begin end; 
    41        9  
    42        9 procedure stop8; begin end; 
    43       10  
    44       10 procedure stop9; begin end; 
    45       11  
    46       11 procedure dostuff; 
    47       11  
    48       11 var i: integer; 
    49      -24  
    50      -24 begin 
    51       11  
    52       11     for i := 1 to 4 do writeln('iteration: ', i); 
    53       43  
    54       43 end; 
    55       44  
    56       44 procedure proc2(i: integer; c: char); 
    57       44  
    58       44 var a: integer; 
    59      -24     b: char; 
    60      -25     d: ^integer; 
    61      -36     e: ^integer; 
    62      -44  
    63      -44 begin 
    64       44  
    65       44     a := 75; 
    66       46     b := '6'; 
    67       49  
    68       49     stop3; 
    69       50  
    70       50     writeln('Step past me!'); 
    71       59     writeln('And me too!'); 
    72       68     writeln('1'); 
    73       75     writeln('2'); 
    74       82     writeln('3'); 
    75       89     traceme; 
    76       90     writeln('4'); 
    77       97     stop4; 
    78       98     writeln('5'); 
    79      105     a := 12; 
    80      107     writeln('6'); 
    81      114     stop5; 
    82      115     writeln('7'); 
    83      122     writeln('8'); 
    84      129     dostuff; 
    85      130     writeln('9'); 
    86      137     writeln('10'); 
    87      146     stop6; 
    88      147     dostuff; 
    89      148     stop7; 
    90      149     new(d); 
    91      152     new(e); 
    92      155     dispose(d); 
    93      158     writeln('11'); 
    94      167     stop8; 
    95      168  
    96      168 end; 
c          unreferenced
i          unreferenced

    97      169  
    98      169 procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2); 
    99      169  
   100      169 var i, x, i2: integer; 
   101    -2464     c: char; 
   102    -2465     b: boolean; 
   103    -2466     e: enum; 
   104    -2468     sr: sub; 
   105    -2472     f: real; 
   106    -2480     rv: r2; 
   107    -2704     a: a10; 
   108    -2784     ar: a2; 
   109    -4984     ip: ^integer; 
   110    -4992  
   111    -4992 begin 
   112      175  
   113      175     x := 43; 
   114      177     c := 'b'; 
   115      180     b := false; 
   116      183     e := three; 
   117      186     sr := 8; 
   118      189     f := 56.78e10; 
   119      191  
   120      191     rv.i := 13; 
   121      193     rv.c := 'd'; 
   122      196     rv.b := false; 
   123      199     rv.e := one; 
   124      202     rv.sr := 4; 
   125      205     rv.r := 87.65e20; 
   126      207     rv.rec.i := 85; 
   127      209     rv.rec.c := 'x'; 
   128      212     rv.rec.b := true; 
   129      215     rv.rec.e := two; 
   130      218     rv.rec.sr := 4; 
   131      221     rv.rec.r := 36.32e8; 
   132      223     for i := 1 to 10 do rv.rec.a[i] := i+40; 
   133      252     for i := 1 to 10 do rv.a[i] := i+50; 
   134      281  
   135      281     for i := 1 to 10 do a[i] := i+20; 
   136      310  
   137      310     for i := 1 to 10 do begin 
   138      320  
   139      320         ar[i].i := 16; 
   140      327         ar[i].c := 'z'; 
   141      336         ar[i].b := false; 
   142      345         ar[i].e := three; 
   143      354         ar[i].sr := 2; 
   144      363         ar[i].r := 43.32e20; 
   145      371  
   146      371         ar[i].rec.i := 85; 
   147      379         ar[i].rec.c := 'k'; 
   148      388         ar[i].rec.b := true; 
   149      397         ar[i].rec.e := two; 
   150      406         ar[i].rec.sr := 7; 
   151      415         ar[i].rec.r := 23.65e8; 
   152      423         for i2 := 1 to 10 do ar[i].rec.a[i2] := i2+60; 
   153      457         for i2 := 1 to 10 do ar[i].a[i2] := i2+70; 
   154      491  
   155      491     end; 
   156      501  
   157      501     new(ip); 
   158      504     ip^ := 76; 
   159      508  
   160      508     stop2; 
   161      509  
   162      509     proc2(74, 'j'); 
   163      513  
   164      513 end; 
pa         unreferenced
pb         unreferenced
pe         unreferenced
pc         unreferenced
prec       unreferenced
pr         unreferenced
psr        unreferenced
pi         unreferenced

   165      514  
   166      514 procedure stepover1; 
   167      514  
   168      514 begin 
   169      514  
   170      514     writeln('I am stepover proc 1') 
   171      521  
   172      521 end; 
   173      524  
   174      524 procedure stepover2; 
   175      524  
   176      524 begin 
   177      524  
   178      524     writeln('I am stepover proc 2') 
   179      531  
   180      531 end; 
   181      534  
   182      534 begin 
   183      534  
   184      534     writeln('This is debug test'); 
   185      543     debug_test1.writehi; 
   186      544     x := 42; 
   187      546     c := 'a'; 
   188      549     b := true; 
   189      552     e := two; 
   190      555     sr := 5; 
   191      558     f := 12.34e10; 
   192      560  
   193      560     rv.i := 12; 
   194      562     rv.c := 'c'; 
   195      565     rv.b := false; 
   196      568     rv.e := three; 
   197      571     rv.sr := 6; 
   198      574     rv.r := 56.78e20; 
   199      576     rv.rec.i := 84; 
   200      578     rv.rec.c := 'u'; 
   201      581     rv.rec.b := true; 
   202      584     rv.rec.e := one; 
   203      587     rv.rec.sr := 3; 
   204      590     rv.rec.r := 54.32e8; 
   205      592     for i := 1 to 10 do rv.rec.a[i] := i+20; 
   206      621     for i := 1 to 10 do rv.a[i] := i+30; 
   207      650  
   208      650     for i := 1 to 10 do a[i] := i+10; 
   209      679  
   210      679     for i := 1 to 10 do begin 
   211      689  
   212      689         ar[i].i := 12; 
   213      696         ar[i].c := 'c'; 
   214      705         ar[i].b := false; 
   215      714         ar[i].e := three; 
   216      723         ar[i].sr := 1; 
   217      732         ar[i].r := 56.78e20; 
   218      740  
   219      740         ar[i].rec.i := 84; 
   220      748         ar[i].rec.c := 'u'; 
   221      757         ar[i].rec.b := true; 
   222      766         ar[i].rec.e := one; 
   223      775         ar[i].rec.sr := 3; 
   224      784         ar[i].rec.r := 54.32e8; 
   225      792         for i2 := 1 to 10 do ar[i].rec.a[i2] := i2+20; 
   226      826         for i2 := 1 to 10 do ar[i].a[i2] := i2+30; 
   227      860  
   228      860     end; 
   229      870  
   230      870     new(pi); 
   231      873     pi^ := 42; 
   232      877  
   233      877     stop1; 
   234      878  
   235      878     proc1(83, 'g', true, two, 7, 98.76, rv, ar); 
   236      891  
   237      891     stepover1; 
   238      892  
   239      892     stepover2; 
   240      893  
   241      893     writeln('Step me!'); 
   242      902     for i := 1 to 3 do writeln('Hi there!');     
   243      931  
   244      931     stop9; 
   245      932  
   246      932 end. 

Errors in program: 0
P6 Pascal interpreter vs. 0.2.x

Assembling/loading program
Running program


P6 debug mode


 183:      1:    
 184:      1:  *     writeln('This is debug test');
 185:      0:        debug_test1.writehi;

debug> !
debug> ! Debug mode test input file.
debug> !
debug> 
debug> !
debug> ! This first part is source level only. I put the machine level commands at the
debug> ! end because they can move around with changes to the program.
debug> !
debug> h

Commands:

h|help              Help (this command)
l    [m] [s[ e|:l]  List source lines
lc   [m] [s[ e|:l]  List source and machine lines coordinated
li   [s[ e|:l]      List machine instructions
p    v              Print expression
d    [s[ e|:l]      Dump memory
e    a v[ v]...     Enter byte values to memory address
st   d v            Set program variable
pg                  Print all globals
pl   [n]            print locals for current/number of enclosing blocks
pp   [n]            print parameters for current/number of enclosing blocks
ds                  Dump storage parameters
dd   [n]            Dump display frames
df   [n]            Dump frames formatted (call trace)
dst  [n]            Dump stack words
b    [m] a          Place breakpoint at source line number/routine
tp   [m] a          Place tracepoint at source line number/routine
bi   a              Place breakpoint at instruction
tpi  a              Place tracepoint at instruction
c    [a]            Clear breakpoint/all breakpoints
lb                  List active breakpoints
w    a              Watch variable
lw                  List watch table
cw   [n]            Clear watch table entry/all watch entries
lia                 List instruction analyzer buffer
lsa                 List source analyzer buffer
s    [n]            Step next source line execution
ss   [n]            Step next source line execution silently
si   [n]            Step instructions
sis  [n]            Step instructions silently
so   [n]            Step over next source line execution
sso  [n]            Step over next source line execution silently
sio  [n]            Step over instructions
siso [n]            Step over instructions silently
ret                 Return from subroutine
hs                  Report heap space
ti                  Turn instruction tracing on
nti                 Turn instruction tracing off
tr                  Turn system routine tracing on
ntr                 Turn system routine tracing off
ts                  Turn source line tracing on
nts                 Turn source line tracing off
spf                 Turn on source level profiling
nspf                Turn off source level profiling
an                  Turn on analyzer mode
nan                 Turn off analyzer mode
r                   Run program from current pc
ps                  Print current registers and instruction
q                   Quit interpreter

!                   Anywhere in line starts a comment

debug> ! turn on source profiling for later test
debug> spf
debug> l debug_test 1

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;

debug> l debug_test 1 100

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      0:    
  50:      0:    begin
  51:      0:    
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    
  54:      0:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      0:    
  63:      0:    begin
  64:      0:    
  65:      0:        a := 75;
  66:      0:        b := '6';
  67:      0:    
  68:      0:        stop3;
  69:      0:    
  70:      0:        writeln('Step past me!');
  71:      0:        writeln('And me too!');
  72:      0:        writeln('1');
  73:      0:        writeln('2');
  74:      0:        writeln('3');
  75:      0:        traceme;
  76:      0:        writeln('4');
  77:      0:        stop4;
  78:      0:        writeln('5');
  79:      0:        a := 12;
  80:      0:        writeln('6');
  81:      0:        stop5;
  82:      0:        writeln('7');
  83:      0:        writeln('8');
  84:      0:        dostuff;
  85:      0:        writeln('9');
  86:      0:        writeln('10');
  87:      0:        stop6;
  88:      0:        dostuff;
  89:      0:        stop7;
  90:      0:        new(d);
  91:      0:        new(e);
  92:      0:        dispose(d);
  93:      0:        writeln('11');
  94:      0:        stop8;
  95:      0:    
  96:      0:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;

debug> l debug_test 1:100

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      0:    
  50:      0:    begin
  51:      0:    
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    
  54:      0:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      0:    
  63:      0:    begin
  64:      0:    
  65:      0:        a := 75;
  66:      0:        b := '6';
  67:      0:    
  68:      0:        stop3;
  69:      0:    
  70:      0:        writeln('Step past me!');
  71:      0:        writeln('And me too!');
  72:      0:        writeln('1');
  73:      0:        writeln('2');
  74:      0:        writeln('3');
  75:      0:        traceme;
  76:      0:        writeln('4');
  77:      0:        stop4;
  78:      0:        writeln('5');
  79:      0:        a := 12;
  80:      0:        writeln('6');
  81:      0:        stop5;
  82:      0:        writeln('7');
  83:      0:        writeln('8');
  84:      0:        dostuff;
  85:      0:        writeln('9');
  86:      0:        writeln('10');
  87:      0:        stop6;
  88:      0:        dostuff;
  89:      0:        stop7;
  90:      0:        new(d);
  91:      0:        new(e);
  92:      0:        dispose(d);
  93:      0:        writeln('11');
  94:      0:        stop8;
  95:      0:    
  96:      0:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;

debug> l debug_test 5

   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    

debug> l debug_test 5 100

   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      0:    
  50:      0:    begin
  51:      0:    
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    
  54:      0:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      0:    
  63:      0:    begin
  64:      0:    
  65:      0:        a := 75;
  66:      0:        b := '6';
  67:      0:    
  68:      0:        stop3;
  69:      0:    
  70:      0:        writeln('Step past me!');
  71:      0:        writeln('And me too!');
  72:      0:        writeln('1');
  73:      0:        writeln('2');
  74:      0:        writeln('3');
  75:      0:        traceme;
  76:      0:        writeln('4');
  77:      0:        stop4;
  78:      0:        writeln('5');
  79:      0:        a := 12;
  80:      0:        writeln('6');
  81:      0:        stop5;
  82:      0:        writeln('7');
  83:      0:        writeln('8');
  84:      0:        dostuff;
  85:      0:        writeln('9');
  86:      0:        writeln('10');
  87:      0:        stop6;
  88:      0:        dostuff;
  89:      0:        stop7;
  90:      0:        new(d);
  91:      0:        new(e);
  92:      0:        dispose(d);
  93:      0:        writeln('11');
  94:      0:        stop8;
  95:      0:    
  96:      0:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;

debug> l debug_test 5:100

   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      0:    
  50:      0:    begin
  51:      0:    
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    
  54:      0:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      0:    
  63:      0:    begin
  64:      0:    
  65:      0:        a := 75;
  66:      0:        b := '6';
  67:      0:    
  68:      0:        stop3;
  69:      0:    
  70:      0:        writeln('Step past me!');
  71:      0:        writeln('And me too!');
  72:      0:        writeln('1');
  73:      0:        writeln('2');
  74:      0:        writeln('3');
  75:      0:        traceme;
  76:      0:        writeln('4');
  77:      0:        stop4;
  78:      0:        writeln('5');
  79:      0:        a := 12;
  80:      0:        writeln('6');
  81:      0:        stop5;
  82:      0:        writeln('7');
  83:      0:        writeln('8');
  84:      0:        dostuff;
  85:      0:        writeln('9');
  86:      0:        writeln('10');
  87:      0:        stop6;
  88:      0:        dostuff;
  89:      0:        stop7;
  90:      0:        new(d);
  91:      0:        new(e);
  92:      0:        dispose(d);
  93:      0:        writeln('11');
  94:      0:        stop8;
  95:      0:    
  96:      0:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;
 101:      0:        c: char;
 102:      0:        b: boolean;
 103:      0:        e: enum;
 104:      0:        sr: sub;

debug> lc debug_test1 1

   1:      1:    module debug_test1(output);
   2:      0:    
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
   3:      0:    procedure writehi;
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
   4:      0:    
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
   5:      0:    begin
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
   6:      0:    
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
   7:      0:        writeln('this is debug test1')
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            000000000000313E
    0000DF: 05 lao            000000000000315E
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
    000103: 7B ldci           0000000000000013
    00010C: 0F csp            0000000000000006
    00010E: 0F csp            0000000000000005
    000110: 75 dmp            0000000000000008
    000119: AE mrkl*          0000000000000008
   8:      0:    
    000119: AE mrkl*          0000000000000008
    000122: AE mrkl*          0000000000000009
   9:      0:    end;
    000122: AE mrkl*          0000000000000009
    00012B: 0E retp           0000000000000000
    000134: AE mrkl*          000000000000000A
  10:      1:    
    000134: AE mrkl*          000000000000000A
    00013D: AE mrkl*          000000000000000B

debug> lc debug_test1 1 100

   1:      1:    module debug_test1(output);
   2:      0:    
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
   3:      0:    procedure writehi;
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
   4:      0:    
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
   5:      0:    begin
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
   6:      0:    
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
   7:      0:        writeln('this is debug test1')
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            000000000000313E
    0000DF: 05 lao            000000000000315E
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
    000103: 7B ldci           0000000000000013
    00010C: 0F csp            0000000000000006
    00010E: 0F csp            0000000000000005
    000110: 75 dmp            0000000000000008
    000119: AE mrkl*          0000000000000008
   8:      0:    
    000119: AE mrkl*          0000000000000008
    000122: AE mrkl*          0000000000000009
   9:      0:    end;
    000122: AE mrkl*          0000000000000009
    00012B: 0E retp           0000000000000000
    000134: AE mrkl*          000000000000000A
  10:      1:    
    000134: AE mrkl*          000000000000000A
    00013D: AE mrkl*          000000000000000B
  11:      2:    begin
    00013D: AE mrkl*          000000000000000B
    000146: AE mrkl*          000000000000000B
    00014F: 0B mst         00,FFFFFFFFFFFFFFF8,0000000000000000
    000161: AE mrkl*          000000000000000C
  12:      1:    
    000161: AE mrkl*          000000000000000C
    00016A: AE mrkl*          000000000000000D
  13:      1:    end.
    00016A: AE mrkl*          000000000000000D
    000173: 0E retp           0000000000000000
    00017C: 0B mst         01,0000000000000000,0000000000000000
    00018E: 0E retp           0000000000000000

debug> lc debug_test1 1:100

   1:      1:    module debug_test1(output);
   2:      0:    
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
   3:      0:    procedure writehi;
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
   4:      0:    
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
   5:      0:    begin
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
   6:      0:    
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
   7:      0:        writeln('this is debug test1')
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            000000000000313E
    0000DF: 05 lao            000000000000315E
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
    000103: 7B ldci           0000000000000013
    00010C: 0F csp            0000000000000006
    00010E: 0F csp            0000000000000005
    000110: 75 dmp            0000000000000008
    000119: AE mrkl*          0000000000000008
   8:      0:    
    000119: AE mrkl*          0000000000000008
    000122: AE mrkl*          0000000000000009
   9:      0:    end;
    000122: AE mrkl*          0000000000000009
    00012B: 0E retp           0000000000000000
    000134: AE mrkl*          000000000000000A
  10:      1:    
    000134: AE mrkl*          000000000000000A
    00013D: AE mrkl*          000000000000000B
  11:      2:    begin
    00013D: AE mrkl*          000000000000000B
    000146: AE mrkl*          000000000000000B
    00014F: 0B mst         00,FFFFFFFFFFFFFFF8,0000000000000000
    000161: AE mrkl*          000000000000000C
  12:      1:    
    000161: AE mrkl*          000000000000000C
    00016A: AE mrkl*          000000000000000D
  13:      1:    end.
    00016A: AE mrkl*          000000000000000D
    000173: 0E retp           0000000000000000
    00017C: 0B mst         01,0000000000000000,0000000000000000
    00018E: 0E retp           0000000000000000

debug> lc debug_test 5

   5:      0:    type
    0001CE: AE mrkl*          0000000000000005
    0001D7: AE mrkl*          0000000000000006
   6:      0:        enum = (one, two, three);
    0001D7: AE mrkl*          0000000000000006
    0001E0: AE mrkl*          0000000000000007
   7:      0:        sub = 1..10;
    0001E0: AE mrkl*          0000000000000007
    0001E9: AE mrkl*          0000000000000008
   8:      0:        a10 = array 10 of integer;
    0001E9: AE mrkl*          0000000000000008
    0001F2: AE mrkl*          0000000000000009
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001F2: AE mrkl*          0000000000000009
    0001FB: AE mrkl*          000000000000000A
  10:      0:                   a: a10 end;
    0001FB: AE mrkl*          000000000000000A
    000204: AE mrkl*          000000000000000B
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    000204: AE mrkl*          000000000000000B
    00020D: AE mrkl*          000000000000000C
  12:      0:                    rec: r; a: a10 end;
    00020D: AE mrkl*          000000000000000C
    000216: AE mrkl*          000000000000000D
  13:      0:        a2 = array 10 of r2;
    000216: AE mrkl*          000000000000000D
    00021F: AE mrkl*          000000000000000E
  14:      0:    
    00021F: AE mrkl*          000000000000000E
    000228: AE mrkl*          000000000000000F

debug> lc debug_test 5 100

   5:      0:    type
    0001CE: AE mrkl*          0000000000000005
    0001D7: AE mrkl*          0000000000000006
   6:      0:        enum = (one, two, three);
    0001D7: AE mrkl*          0000000000000006
    0001E0: AE mrkl*          0000000000000007
   7:      0:        sub = 1..10;
    0001E0: AE mrkl*          0000000000000007
    0001E9: AE mrkl*          0000000000000008
   8:      0:        a10 = array 10 of integer;
    0001E9: AE mrkl*          0000000000000008
    0001F2: AE mrkl*          0000000000000009
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001F2: AE mrkl*          0000000000000009
    0001FB: AE mrkl*          000000000000000A
  10:      0:                   a: a10 end;
    0001FB: AE mrkl*          000000000000000A
    000204: AE mrkl*          000000000000000B
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    000204: AE mrkl*          000000000000000B
    00020D: AE mrkl*          000000000000000C
  12:      0:                    rec: r; a: a10 end;
    00020D: AE mrkl*          000000000000000C
    000216: AE mrkl*          000000000000000D
  13:      0:        a2 = array 10 of r2;
    000216: AE mrkl*          000000000000000D
    00021F: AE mrkl*          000000000000000E
  14:      0:    
    00021F: AE mrkl*          000000000000000E
    000228: AE mrkl*          000000000000000F
  15:      0:    var i, x, i2: integer;
    000228: AE mrkl*          000000000000000F
    000231: AE mrkl*          0000000000000010
  16:      0:        c: char;
    000231: AE mrkl*          0000000000000010
    00023A: AE mrkl*          0000000000000011
  17:      0:        b: boolean;
    00023A: AE mrkl*          0000000000000011
    000243: AE mrkl*          0000000000000012
  18:      0:        e: enum;
    000243: AE mrkl*          0000000000000012
    00024C: AE mrkl*          0000000000000013
  19:      0:        sr: sub;
    00024C: AE mrkl*          0000000000000013
    000255: AE mrkl*          0000000000000014
  20:      0:        f: real;
    000255: AE mrkl*          0000000000000014
    00025E: AE mrkl*          0000000000000015
  21:      0:        rv: r2;
    00025E: AE mrkl*          0000000000000015
    000267: AE mrkl*          0000000000000016
  22:      0:        a: a10;
    000267: AE mrkl*          0000000000000016
    000270: AE mrkl*          0000000000000017
  23:      0:        ar: a2;
    000270: AE mrkl*          0000000000000017
    000279: AE mrkl*          0000000000000018
  24:      0:        pi: ^integer;
    000279: AE mrkl*          0000000000000018
    000282: AE mrkl*          0000000000000019
  25:      0:    
    000282: AE mrkl*          0000000000000019
    00028B: AE mrkl*          000000000000001A
  26:      0:    procedure stop1; begin end;
    00028B: AE mrkl*          000000000000001A
    000294: AE mrkl*          000000000000001A
    00029D: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0002AF: 0E retp           0000000000000000
    0002B8: AE mrkl*          000000000000001B
  27:      0:    
    0002B8: AE mrkl*          000000000000001B
    0002C1: AE mrkl*          000000000000001C
  28:      0:    procedure stop2; begin end;
    0002C1: AE mrkl*          000000000000001C
    0002CA: AE mrkl*          000000000000001C
    0002D3: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0002E5: 0E retp           0000000000000000
    0002EE: AE mrkl*          000000000000001D
  29:      0:    
    0002EE: AE mrkl*          000000000000001D
    0002F7: AE mrkl*          000000000000001E
  30:      0:    procedure stop3; begin end;
    0002F7: AE mrkl*          000000000000001E
    000300: AE mrkl*          000000000000001E
    000309: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    00031B: 0E retp           0000000000000000
    000324: AE mrkl*          000000000000001F
  31:      0:    
    000324: AE mrkl*          000000000000001F
    00032D: AE mrkl*          0000000000000020
  32:      0:    procedure traceme; begin end;
    00032D: AE mrkl*          0000000000000020
    000336: AE mrkl*          0000000000000020
    00033F: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000351: 0E retp           0000000000000000
    00035A: AE mrkl*          0000000000000021
  33:      0:    
    00035A: AE mrkl*          0000000000000021
    000363: AE mrkl*          0000000000000022
  34:      0:    procedure stop4; begin end;
    000363: AE mrkl*          0000000000000022
    00036C: AE mrkl*          0000000000000022
    000375: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000387: 0E retp           0000000000000000
    000390: AE mrkl*          0000000000000023
  35:      0:    
    000390: AE mrkl*          0000000000000023
    000399: AE mrkl*          0000000000000024
  36:      0:    procedure stop5; begin end;
    000399: AE mrkl*          0000000000000024
    0003A2: AE mrkl*          0000000000000024
    0003AB: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0003BD: 0E retp           0000000000000000
    0003C6: AE mrkl*          0000000000000025
  37:      0:    
    0003C6: AE mrkl*          0000000000000025
    0003CF: AE mrkl*          0000000000000026
  38:      0:    procedure stop6; begin end;
    0003CF: AE mrkl*          0000000000000026
    0003D8: AE mrkl*          0000000000000026
    0003E1: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0003F3: 0E retp           0000000000000000
    0003FC: AE mrkl*          0000000000000027
  39:      0:    
    0003FC: AE mrkl*          0000000000000027
    000405: AE mrkl*          0000000000000028
  40:      0:    procedure stop7; begin end;
    000405: AE mrkl*          0000000000000028
    00040E: AE mrkl*          0000000000000028
    000417: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000429: 0E retp           0000000000000000
    000432: AE mrkl*          0000000000000029
  41:      0:    
    000432: AE mrkl*          0000000000000029
    00043B: AE mrkl*          000000000000002A
  42:      0:    procedure stop8; begin end;
    00043B: AE mrkl*          000000000000002A
    000444: AE mrkl*          000000000000002A
    00044D: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    00045F: 0E retp           0000000000000000
    000468: AE mrkl*          000000000000002B
  43:      0:    
    000468: AE mrkl*          000000000000002B
    000471: AE mrkl*          000000000000002C
  44:      0:    procedure stop9; begin end;
    000471: AE mrkl*          000000000000002C
    00047A: AE mrkl*          000000000000002C
    000483: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000495: 0E retp           0000000000000000
    00049E: AE mrkl*          000000000000002D
  45:      0:    
    00049E: AE mrkl*          000000000000002D
    0004A7: AE mrkl*          000000000000002E
  46:      0:    procedure dostuff;
    0004A7: AE mrkl*          000000000000002E
    0004B0: AE mrkl*          000000000000002F
  47:      0:    
    0004B0: AE mrkl*          000000000000002F
    0004B9: AE mrkl*          0000000000000030
  48:      0:    var i: integer;
    0004B9: AE mrkl*          0000000000000030
    0004C2: AE mrkl*          0000000000000031
  49:      0:    
    0004C2: AE mrkl*          0000000000000031
    0004CB: AE mrkl*          0000000000000032
  50:      0:    begin
    0004CB: AE mrkl*          0000000000000032
    0004D4: AE mrkl*          0000000000000032
    0004DD: 0B mst         01,FFFFFFFFFFFFFFD8,FFFFFFFFFFFFFFE0
    0004EF: AE mrkl*          0000000000000033
  51:      0:    
    0004EF: AE mrkl*          0000000000000033
    0004F8: AE mrkl*          0000000000000034
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
    0004F8: AE mrkl*          0000000000000034
    000501: 7B ldci           0000000000000001
    00050A: 02 stri        02,FFFFFFFFFFFFFFE0
    000514: 7B ldci           0000000000000004
    00051D: 02 stri        02,FFFFFFFFFFFFFFD8
    000527: 00 lodi        02,FFFFFFFFFFFFFFE0
    000531: 02 stri        02,FFFFFFFFFFFFFFE8
    00053B: AE mrkl*          0000000000000034
    000544: 00 lodi        02,FFFFFFFFFFFFFFE8
    00054E: 00 lodi        02,FFFFFFFFFFFFFFD8
    000558: A1 leqi        
    000559: 18 fjp            00000000000005FE
    000562: 38 lca            000000000000311B
    00056B: 05 lao            000000000000315E
    000574: 76 swp            0000000000000008
    00057D: 7B ldci           000000000000000B
    000586: 76 swp            0000000000000008
    00058F: 7B ldci           000000000000000B
    000598: 0F csp            0000000000000006
    00059A: 00 lodi        02,FFFFFFFFFFFFFFE8
    0005A4: 7B ldci           000000000000000B
    0005AD: 0F csp            0000000000000008
    0005AF: 0F csp            0000000000000005
    0005B1: 75 dmp            0000000000000008
    0005BA: 00 lodi        02,FFFFFFFFFFFFFFE8
    0005C4: 00 lodi        02,FFFFFFFFFFFFFFD8
    0005CE: 89 equi        
    0005CF: 77 tjp            00000000000005FE
    0005D8: 00 lodi        02,FFFFFFFFFFFFFFE8
    0005E2: 0A inci           0000000000000001
    0005EB: 02 stri        02,FFFFFFFFFFFFFFE8
    0005F5: 17 ujp            000000000000053B
    0005FE: AE mrkl*          0000000000000034
    000607: 04 lda         02,FFFFFFFFFFFFFFE8
    000611: BD inv         
    000612: AE mrkl*          0000000000000035
  53:      0:    
    000612: AE mrkl*          0000000000000035
    00061B: AE mrkl*          0000000000000036
  54:      0:    end;
    00061B: AE mrkl*          0000000000000036
    000624: 0E retp           0000000000000000
    00062D: AE mrkl*          0000000000000037
  55:      0:    
    00062D: AE mrkl*          0000000000000037
    000636: AE mrkl*          0000000000000038
  56:      0:    procedure proc2(i: integer; c: char);
    000636: AE mrkl*          0000000000000038
    00063F: AE mrkl*          0000000000000039
  57:      0:    
    00063F: AE mrkl*          0000000000000039
    000648: AE mrkl*          000000000000003A
  58:      0:    var a: integer;
    000648: AE mrkl*          000000000000003A
    000651: AE mrkl*          000000000000003B
  59:      0:        b: char;
    000651: AE mrkl*          000000000000003B
    00065A: AE mrkl*          000000000000003C
  60:      0:        d: ^integer;
    00065A: AE mrkl*          000000000000003C
    000663: AE mrkl*          000000000000003D
  61:      0:        e: ^integer;
    000663: AE mrkl*          000000000000003D
    00066C: AE mrkl*          000000000000003E
  62:      0:    
    00066C: AE mrkl*          000000000000003E
    000675: AE mrkl*          000000000000003F
  63:      0:    begin
    000675: AE mrkl*          000000000000003F
    00067E: AE mrkl*          000000000000003F
    000687: 0B mst         01,FFFFFFFFFFFFFFD0,FFFFFFFFFFFFFFE0
    000699: AE mrkl*          0000000000000040
  64:      0:    
    000699: AE mrkl*          0000000000000040
    0006A2: AE mrkl*          0000000000000041
  65:      0:        a := 75;
    0006A2: AE mrkl*          0000000000000041
    0006AB: 7B ldci           000000000000004B
    0006B4: 02 stri        02,FFFFFFFFFFFFFFE8
    0006BE: AE mrkl*          0000000000000042
  66:      0:        b := '6';
    0006BE: AE mrkl*          0000000000000042
    0006C7: 7F ldcc           0000000000000036
    0006C9: 63 chkc           000000000000310B
    0006D2: 4A strc        02,FFFFFFFFFFFFFFE7
    0006DC: AE mrkl*          0000000000000043
  67:      0:    
    0006DC: AE mrkl*          0000000000000043
    0006E5: AE mrkl*          0000000000000044
  68:      0:        stop3;
    0006E5: AE mrkl*          0000000000000044
    0006EE: F5 sfr            0000000000000000
    0006F7: 0C cup            0000000000000300
    000700: AE mrkl*          0000000000000044
    000709: AE mrkl*          0000000000000045
  69:      0:    
    000709: AE mrkl*          0000000000000045
    000712: AE mrkl*          0000000000000046
  70:      0:        writeln('Step past me!');
    000712: AE mrkl*          0000000000000046
    00071B: 38 lca            00000000000030F6
    000724: 05 lao            000000000000315E
    00072D: 76 swp            0000000000000008
    000736: 7B ldci           000000000000000D
    00073F: 76 swp            0000000000000008
    000748: 7B ldci           000000000000000D
    000751: 0F csp            0000000000000006
    000753: 0F csp            0000000000000005
    000755: 75 dmp            0000000000000008
    00075E: AE mrkl*          0000000000000047
  71:      0:        writeln('And me too!');
    00075E: AE mrkl*          0000000000000047
    000767: 38 lca            00000000000030E3
    000770: 05 lao            000000000000315E
    000779: 76 swp            0000000000000008
    000782: 7B ldci           000000000000000B
    00078B: 76 swp            0000000000000008
    000794: 7B ldci           000000000000000B
    00079D: 0F csp            0000000000000006
    00079F: 0F csp            0000000000000005
    0007A1: 75 dmp            0000000000000008
    0007AA: AE mrkl*          0000000000000048
  72:      0:        writeln('1');
    0007AA: AE mrkl*          0000000000000048
    0007B3: 7F ldcc           0000000000000031
    0007B5: 05 lao            000000000000315E
    0007BE: 76 swp            0000000000000008
    0007C7: 7B ldci           0000000000000001
    0007D0: 0F csp            000000000000000A
    0007D2: 0F csp            0000000000000005
    0007D4: 75 dmp            0000000000000008
    0007DD: AE mrkl*          0000000000000049
  73:      0:        writeln('2');
    0007DD: AE mrkl*          0000000000000049
    0007E6: 7F ldcc           0000000000000032
    0007E8: 05 lao            000000000000315E
    0007F1: 76 swp            0000000000000008
    0007FA: 7B ldci           0000000000000001
    000803: 0F csp            000000000000000A
    000805: 0F csp            0000000000000005
    000807: 75 dmp            0000000000000008
    000810: AE mrkl*          000000000000004A
  74:      0:        writeln('3');
    000810: AE mrkl*          000000000000004A
    000819: 7F ldcc           0000000000000033
    00081B: 05 lao            000000000000315E
    000824: 76 swp            0000000000000008
    00082D: 7B ldci           0000000000000001
    000836: 0F csp            000000000000000A
    000838: 0F csp            0000000000000005
    00083A: 75 dmp            0000000000000008
    000843: AE mrkl*          000000000000004B
  75:      0:        traceme;
    000843: AE mrkl*          000000000000004B
    00084C: F5 sfr            0000000000000000
    000855: 0C cup            0000000000000336
    00085E: AE mrkl*          000000000000004B
    000867: AE mrkl*          000000000000004C
  76:      0:        writeln('4');
    000867: AE mrkl*          000000000000004C
    000870: 7F ldcc           0000000000000034
    000872: 05 lao            000000000000315E
    00087B: 76 swp            0000000000000008
    000884: 7B ldci           0000000000000001
    00088D: 0F csp            000000000000000A
    00088F: 0F csp            0000000000000005
    000891: 75 dmp            0000000000000008
    00089A: AE mrkl*          000000000000004D
  77:      0:        stop4;
    00089A: AE mrkl*          000000000000004D
    0008A3: F5 sfr            0000000000000000
    0008AC: 0C cup            000000000000036C
    0008B5: AE mrkl*          000000000000004D
    0008BE: AE mrkl*          000000000000004E
  78:      0:        writeln('5');
    0008BE: AE mrkl*          000000000000004E
    0008C7: 7F ldcc           0000000000000035
    0008C9: 05 lao            000000000000315E
    0008D2: 76 swp            0000000000000008
    0008DB: 7B ldci           0000000000000001
    0008E4: 0F csp            000000000000000A
    0008E6: 0F csp            0000000000000005
    0008E8: 75 dmp            0000000000000008
    0008F1: AE mrkl*          000000000000004F
  79:      0:        a := 12;
    0008F1: AE mrkl*          000000000000004F
    0008FA: 7B ldci           000000000000000C
    000903: 02 stri        02,FFFFFFFFFFFFFFE8
    00090D: AE mrkl*          0000000000000050
  80:      0:        writeln('6');
    00090D: AE mrkl*          0000000000000050
    000916: 7F ldcc           0000000000000036
    000918: 05 lao            000000000000315E
    000921: 76 swp            0000000000000008
    00092A: 7B ldci           0000000000000001
    000933: 0F csp            000000000000000A
    000935: 0F csp            0000000000000005
    000937: 75 dmp            0000000000000008
    000940: AE mrkl*          0000000000000051
  81:      0:        stop5;
    000940: AE mrkl*          0000000000000051
    000949: F5 sfr            0000000000000000
    000952: 0C cup            00000000000003A2
    00095B: AE mrkl*          0000000000000051
    000964: AE mrkl*          0000000000000052
  82:      0:        writeln('7');
    000964: AE mrkl*          0000000000000052
    00096D: 7F ldcc           0000000000000037
    00096F: 05 lao            000000000000315E
    000978: 76 swp            0000000000000008
    000981: 7B ldci           0000000000000001
    00098A: 0F csp            000000000000000A
    00098C: 0F csp            0000000000000005
    00098E: 75 dmp            0000000000000008
    000997: AE mrkl*          0000000000000053
  83:      0:        writeln('8');
    000997: AE mrkl*          0000000000000053
    0009A0: 7F ldcc           0000000000000038
    0009A2: 05 lao            000000000000315E
    0009AB: 76 swp            0000000000000008
    0009B4: 7B ldci           0000000000000001
    0009BD: 0F csp            000000000000000A
    0009BF: 0F csp            0000000000000005
    0009C1: 75 dmp            0000000000000008
    0009CA: AE mrkl*          0000000000000054
  84:      0:        dostuff;
    0009CA: AE mrkl*          0000000000000054
    0009D3: F5 sfr            0000000000000000
    0009DC: 0C cup            00000000000004C2
    0009E5: AE mrkl*          0000000000000054
    0009EE: AE mrkl*          0000000000000055
  85:      0:        writeln('9');
    0009EE: AE mrkl*          0000000000000055
    0009F7: 7F ldcc           0000000000000039
    0009F9: 05 lao            000000000000315E
    000A02: 76 swp            0000000000000008
    000A0B: 7B ldci           0000000000000001
    000A14: 0F csp            000000000000000A
    000A16: 0F csp            0000000000000005
    000A18: 75 dmp            0000000000000008
    000A21: AE mrkl*          0000000000000056
  86:      0:        writeln('10');
    000A21: AE mrkl*          0000000000000056
    000A2A: 38 lca            00000000000030D9
    000A33: 05 lao            000000000000315E
    000A3C: 76 swp            0000000000000008
    000A45: 7B ldci           0000000000000002
    000A4E: 76 swp            0000000000000008
    000A57: 7B ldci           0000000000000002
    000A60: 0F csp            0000000000000006
    000A62: 0F csp            0000000000000005
    000A64: 75 dmp            0000000000000008
    000A6D: AE mrkl*          0000000000000057
  87:      0:        stop6;
    000A6D: AE mrkl*          0000000000000057
    000A76: F5 sfr            0000000000000000
    000A7F: 0C cup            00000000000003D8
    000A88: AE mrkl*          0000000000000057
    000A91: AE mrkl*          0000000000000058
  88:      0:        dostuff;
    000A91: AE mrkl*          0000000000000058
    000A9A: F5 sfr            0000000000000000
    000AA3: 0C cup            00000000000004C2
    000AAC: AE mrkl*          0000000000000058
    000AB5: AE mrkl*          0000000000000059
  89:      0:        stop7;
    000AB5: AE mrkl*          0000000000000059
    000ABE: F5 sfr            0000000000000000
    000AC7: 0C cup            000000000000040E
    000AD0: AE mrkl*          0000000000000059
    000AD9: AE mrkl*          000000000000005A
  90:      0:        new(d);
    000AD9: AE mrkl*          000000000000005A
    000AE2: 04 lda         02,FFFFFFFFFFFFFFDC
    000AEC: 7B ldci           0000000000000008
    000AF5: 0F csp            0000000000000004
    000AF7: AE mrkl*          000000000000005B
  91:      0:        new(e);
    000AF7: AE mrkl*          000000000000005B
    000B00: 04 lda         02,FFFFFFFFFFFFFFD4
    000B0A: 7B ldci           0000000000000008
    000B13: 0F csp            0000000000000004
    000B15: AE mrkl*          000000000000005C
  92:      0:        dispose(d);
    000B15: AE mrkl*          000000000000005C
    000B1E: 69 loda        02,FFFFFFFFFFFFFFDC
    000B28: 7B ldci           0000000000000008
    000B31: 0F csp            000000000000001A
    000B33: AE mrkl*          000000000000005D
  93:      0:        writeln('11');
    000B33: AE mrkl*          000000000000005D
    000B3C: 38 lca            00000000000030CF
    000B45: 05 lao            000000000000315E
    000B4E: 76 swp            0000000000000008
    000B57: 7B ldci           0000000000000002
    000B60: 76 swp            0000000000000008
    000B69: 7B ldci           0000000000000002
    000B72: 0F csp            0000000000000006
    000B74: 0F csp            0000000000000005
    000B76: 75 dmp            0000000000000008
    000B7F: AE mrkl*          000000000000005E
  94:      0:        stop8;
    000B7F: AE mrkl*          000000000000005E
    000B88: F5 sfr            0000000000000000
    000B91: 0C cup            0000000000000444
    000B9A: AE mrkl*          000000000000005E
    000BA3: AE mrkl*          000000000000005F
  95:      0:    
    000BA3: AE mrkl*          000000000000005F
    000BAC: AE mrkl*          0000000000000060
  96:      0:    end;
    000BAC: AE mrkl*          0000000000000060
    000BB5: 0E retp           0000000000000010
    000BBE: AE mrkl*          0000000000000061
  97:      0:    
    000BBE: AE mrkl*          0000000000000061
    000BC7: AE mrkl*          0000000000000062
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
    000BC7: AE mrkl*          0000000000000062
    000BD0: AE mrkl*          0000000000000063
  99:      0:    
    000BD0: AE mrkl*          0000000000000063
    000BD9: AE mrkl*          0000000000000064
 100:      0:    var i, x, i2: integer;
    000BD9: AE mrkl*          0000000000000064
    000BE2: AE mrkl*          0000000000000065

debug> lc debug_test 5:100

   5:      0:    type
    0001CE: AE mrkl*          0000000000000005
    0001D7: AE mrkl*          0000000000000006
   6:      0:        enum = (one, two, three);
    0001D7: AE mrkl*          0000000000000006
    0001E0: AE mrkl*          0000000000000007
   7:      0:        sub = 1..10;
    0001E0: AE mrkl*          0000000000000007
    0001E9: AE mrkl*          0000000000000008
   8:      0:        a10 = array 10 of integer;
    0001E9: AE mrkl*          0000000000000008
    0001F2: AE mrkl*          0000000000000009
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001F2: AE mrkl*          0000000000000009
    0001FB: AE mrkl*          000000000000000A
  10:      0:                   a: a10 end;
    0001FB: AE mrkl*          000000000000000A
    000204: AE mrkl*          000000000000000B
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    000204: AE mrkl*          000000000000000B
    00020D: AE mrkl*          000000000000000C
  12:      0:                    rec: r; a: a10 end;
    00020D: AE mrkl*          000000000000000C
    000216: AE mrkl*          000000000000000D
  13:      0:        a2 = array 10 of r2;
    000216: AE mrkl*          000000000000000D
    00021F: AE mrkl*          000000000000000E
  14:      0:    
    00021F: AE mrkl*          000000000000000E
    000228: AE mrkl*          000000000000000F
  15:      0:    var i, x, i2: integer;
    000228: AE mrkl*          000000000000000F
    000231: AE mrkl*          0000000000000010
  16:      0:        c: char;
    000231: AE mrkl*          0000000000000010
    00023A: AE mrkl*          0000000000000011
  17:      0:        b: boolean;
    00023A: AE mrkl*          0000000000000011
    000243: AE mrkl*          0000000000000012
  18:      0:        e: enum;
    000243: AE mrkl*          0000000000000012
    00024C: AE mrkl*          0000000000000013
  19:      0:        sr: sub;
    00024C: AE mrkl*          0000000000000013
    000255: AE mrkl*          0000000000000014
  20:      0:        f: real;
    000255: AE mrkl*          0000000000000014
    00025E: AE mrkl*          0000000000000015
  21:      0:        rv: r2;
    00025E: AE mrkl*          0000000000000015
    000267: AE mrkl*          0000000000000016
  22:      0:        a: a10;
    000267: AE mrkl*          0000000000000016
    000270: AE mrkl*          0000000000000017
  23:      0:        ar: a2;
    000270: AE mrkl*          0000000000000017
    000279: AE mrkl*          0000000000000018
  24:      0:        pi: ^integer;
    000279: AE mrkl*          0000000000000018
    000282: AE mrkl*          0000000000000019
  25:      0:    
    000282: AE mrkl*          0000000000000019
    00028B: AE mrkl*          000000000000001A
  26:      0:    procedure stop1; begin end;
    00028B: AE mrkl*          000000000000001A
    000294: AE mrkl*          000000000000001A
    00029D: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0002AF: 0E retp           0000000000000000
    0002B8: AE mrkl*          000000000000001B
  27:      0:    
    0002B8: AE mrkl*          000000000000001B
    0002C1: AE mrkl*          000000000000001C
  28:      0:    procedure stop2; begin end;
    0002C1: AE mrkl*          000000000000001C
    0002CA: AE mrkl*          000000000000001C
    0002D3: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0002E5: 0E retp           0000000000000000
    0002EE: AE mrkl*          000000000000001D
  29:      0:    
    0002EE: AE mrkl*          000000000000001D
    0002F7: AE mrkl*          000000000000001E
  30:      0:    procedure stop3; begin end;
    0002F7: AE mrkl*          000000000000001E
    000300: AE mrkl*          000000000000001E
    000309: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    00031B: 0E retp           0000000000000000
    000324: AE mrkl*          000000000000001F
  31:      0:    
    000324: AE mrkl*          000000000000001F
    00032D: AE mrkl*          0000000000000020
  32:      0:    procedure traceme; begin end;
    00032D: AE mrkl*          0000000000000020
    000336: AE mrkl*          0000000000000020
    00033F: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000351: 0E retp           0000000000000000
    00035A: AE mrkl*          0000000000000021
  33:      0:    
    00035A: AE mrkl*          0000000000000021
    000363: AE mrkl*          0000000000000022
  34:      0:    procedure stop4; begin end;
    000363: AE mrkl*          0000000000000022
    00036C: AE mrkl*          0000000000000022
    000375: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000387: 0E retp           0000000000000000
    000390: AE mrkl*          0000000000000023
  35:      0:    
    000390: AE mrkl*          0000000000000023
    000399: AE mrkl*          0000000000000024
  36:      0:    procedure stop5; begin end;
    000399: AE mrkl*          0000000000000024
    0003A2: AE mrkl*          0000000000000024
    0003AB: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0003BD: 0E retp           0000000000000000
    0003C6: AE mrkl*          0000000000000025
  37:      0:    
    0003C6: AE mrkl*          0000000000000025
    0003CF: AE mrkl*          0000000000000026
  38:      0:    procedure stop6; begin end;
    0003CF: AE mrkl*          0000000000000026
    0003D8: AE mrkl*          0000000000000026
    0003E1: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0003F3: 0E retp           0000000000000000
    0003FC: AE mrkl*          0000000000000027
  39:      0:    
    0003FC: AE mrkl*          0000000000000027
    000405: AE mrkl*          0000000000000028
  40:      0:    procedure stop7; begin end;
    000405: AE mrkl*          0000000000000028
    00040E: AE mrkl*          0000000000000028
    000417: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000429: 0E retp           0000000000000000
    000432: AE mrkl*          0000000000000029
  41:      0:    
    000432: AE mrkl*          0000000000000029
    00043B: AE mrkl*          000000000000002A
  42:      0:    procedure stop8; begin end;
    00043B: AE mrkl*          000000000000002A
    000444: AE mrkl*          000000000000002A
    00044D: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    00045F: 0E retp           0000000000000000
    000468: AE mrkl*          000000000000002B
  43:      0:    
    000468: AE mrkl*          000000000000002B
    000471: AE mrkl*          000000000000002C
  44:      0:    procedure stop9; begin end;
    000471: AE mrkl*          000000000000002C
    00047A: AE mrkl*          000000000000002C
    000483: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000495: 0E retp           0000000000000000
    00049E: AE mrkl*          000000000000002D
  45:      0:    
    00049E: AE mrkl*          000000000000002D
    0004A7: AE mrkl*          000000000000002E
  46:      0:    procedure dostuff;
    0004A7: AE mrkl*          000000000000002E
    0004B0: AE mrkl*          000000000000002F
  47:      0:    
    0004B0: AE mrkl*          000000000000002F
    0004B9: AE mrkl*          0000000000000030
  48:      0:    var i: integer;
    0004B9: AE mrkl*          0000000000000030
    0004C2: AE mrkl*          0000000000000031
  49:      0:    
    0004C2: AE mrkl*          0000000000000031
    0004CB: AE mrkl*          0000000000000032
  50:      0:    begin
    0004CB: AE mrkl*          0000000000000032
    0004D4: AE mrkl*          0000000000000032
    0004DD: 0B mst         01,FFFFFFFFFFFFFFD8,FFFFFFFFFFFFFFE0
    0004EF: AE mrkl*          0000000000000033
  51:      0:    
    0004EF: AE mrkl*          0000000000000033
    0004F8: AE mrkl*          0000000000000034
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
    0004F8: AE mrkl*          0000000000000034
    000501: 7B ldci           0000000000000001
    00050A: 02 stri        02,FFFFFFFFFFFFFFE0
    000514: 7B ldci           0000000000000004
    00051D: 02 stri        02,FFFFFFFFFFFFFFD8
    000527: 00 lodi        02,FFFFFFFFFFFFFFE0
    000531: 02 stri        02,FFFFFFFFFFFFFFE8
    00053B: AE mrkl*          0000000000000034
    000544: 00 lodi        02,FFFFFFFFFFFFFFE8
    00054E: 00 lodi        02,FFFFFFFFFFFFFFD8
    000558: A1 leqi        
    000559: 18 fjp            00000000000005FE
    000562: 38 lca            000000000000311B
    00056B: 05 lao            000000000000315E
    000574: 76 swp            0000000000000008
    00057D: 7B ldci           000000000000000B
    000586: 76 swp            0000000000000008
    00058F: 7B ldci           000000000000000B
    000598: 0F csp            0000000000000006
    00059A: 00 lodi        02,FFFFFFFFFFFFFFE8
    0005A4: 7B ldci           000000000000000B
    0005AD: 0F csp            0000000000000008
    0005AF: 0F csp            0000000000000005
    0005B1: 75 dmp            0000000000000008
    0005BA: 00 lodi        02,FFFFFFFFFFFFFFE8
    0005C4: 00 lodi        02,FFFFFFFFFFFFFFD8
    0005CE: 89 equi        
    0005CF: 77 tjp            00000000000005FE
    0005D8: 00 lodi        02,FFFFFFFFFFFFFFE8
    0005E2: 0A inci           0000000000000001
    0005EB: 02 stri        02,FFFFFFFFFFFFFFE8
    0005F5: 17 ujp            000000000000053B
    0005FE: AE mrkl*          0000000000000034
    000607: 04 lda         02,FFFFFFFFFFFFFFE8
    000611: BD inv         
    000612: AE mrkl*          0000000000000035
  53:      0:    
    000612: AE mrkl*          0000000000000035
    00061B: AE mrkl*          0000000000000036
  54:      0:    end;
    00061B: AE mrkl*          0000000000000036
    000624: 0E retp           0000000000000000
    00062D: AE mrkl*          0000000000000037
  55:      0:    
    00062D: AE mrkl*          0000000000000037
    000636: AE mrkl*          0000000000000038
  56:      0:    procedure proc2(i: integer; c: char);
    000636: AE mrkl*          0000000000000038
    00063F: AE mrkl*          0000000000000039
  57:      0:    
    00063F: AE mrkl*          0000000000000039
    000648: AE mrkl*          000000000000003A
  58:      0:    var a: integer;
    000648: AE mrkl*          000000000000003A
    000651: AE mrkl*          000000000000003B
  59:      0:        b: char;
    000651: AE mrkl*          000000000000003B
    00065A: AE mrkl*          000000000000003C
  60:      0:        d: ^integer;
    00065A: AE mrkl*          000000000000003C
    000663: AE mrkl*          000000000000003D
  61:      0:        e: ^integer;
    000663: AE mrkl*          000000000000003D
    00066C: AE mrkl*          000000000000003E
  62:      0:    
    00066C: AE mrkl*          000000000000003E
    000675: AE mrkl*          000000000000003F
  63:      0:    begin
    000675: AE mrkl*          000000000000003F
    00067E: AE mrkl*          000000000000003F
    000687: 0B mst         01,FFFFFFFFFFFFFFD0,FFFFFFFFFFFFFFE0
    000699: AE mrkl*          0000000000000040
  64:      0:    
    000699: AE mrkl*          0000000000000040
    0006A2: AE mrkl*          0000000000000041
  65:      0:        a := 75;
    0006A2: AE mrkl*          0000000000000041
    0006AB: 7B ldci           000000000000004B
    0006B4: 02 stri        02,FFFFFFFFFFFFFFE8
    0006BE: AE mrkl*          0000000000000042
  66:      0:        b := '6';
    0006BE: AE mrkl*          0000000000000042
    0006C7: 7F ldcc           0000000000000036
    0006C9: 63 chkc           000000000000310B
    0006D2: 4A strc        02,FFFFFFFFFFFFFFE7
    0006DC: AE mrkl*          0000000000000043
  67:      0:    
    0006DC: AE mrkl*          0000000000000043
    0006E5: AE mrkl*          0000000000000044
  68:      0:        stop3;
    0006E5: AE mrkl*          0000000000000044
    0006EE: F5 sfr            0000000000000000
    0006F7: 0C cup            0000000000000300
    000700: AE mrkl*          0000000000000044
    000709: AE mrkl*          0000000000000045
  69:      0:    
    000709: AE mrkl*          0000000000000045
    000712: AE mrkl*          0000000000000046
  70:      0:        writeln('Step past me!');
    000712: AE mrkl*          0000000000000046
    00071B: 38 lca            00000000000030F6
    000724: 05 lao            000000000000315E
    00072D: 76 swp            0000000000000008
    000736: 7B ldci           000000000000000D
    00073F: 76 swp            0000000000000008
    000748: 7B ldci           000000000000000D
    000751: 0F csp            0000000000000006
    000753: 0F csp            0000000000000005
    000755: 75 dmp            0000000000000008
    00075E: AE mrkl*          0000000000000047
  71:      0:        writeln('And me too!');
    00075E: AE mrkl*          0000000000000047
    000767: 38 lca            00000000000030E3
    000770: 05 lao            000000000000315E
    000779: 76 swp            0000000000000008
    000782: 7B ldci           000000000000000B
    00078B: 76 swp            0000000000000008
    000794: 7B ldci           000000000000000B
    00079D: 0F csp            0000000000000006
    00079F: 0F csp            0000000000000005
    0007A1: 75 dmp            0000000000000008
    0007AA: AE mrkl*          0000000000000048
  72:      0:        writeln('1');
    0007AA: AE mrkl*          0000000000000048
    0007B3: 7F ldcc           0000000000000031
    0007B5: 05 lao            000000000000315E
    0007BE: 76 swp            0000000000000008
    0007C7: 7B ldci           0000000000000001
    0007D0: 0F csp            000000000000000A
    0007D2: 0F csp            0000000000000005
    0007D4: 75 dmp            0000000000000008
    0007DD: AE mrkl*          0000000000000049
  73:      0:        writeln('2');
    0007DD: AE mrkl*          0000000000000049
    0007E6: 7F ldcc           0000000000000032
    0007E8: 05 lao            000000000000315E
    0007F1: 76 swp            0000000000000008
    0007FA: 7B ldci           0000000000000001
    000803: 0F csp            000000000000000A
    000805: 0F csp            0000000000000005
    000807: 75 dmp            0000000000000008
    000810: AE mrkl*          000000000000004A
  74:      0:        writeln('3');
    000810: AE mrkl*          000000000000004A
    000819: 7F ldcc           0000000000000033
    00081B: 05 lao            000000000000315E
    000824: 76 swp            0000000000000008
    00082D: 7B ldci           0000000000000001
    000836: 0F csp            000000000000000A
    000838: 0F csp            0000000000000005
    00083A: 75 dmp            0000000000000008
    000843: AE mrkl*          000000000000004B
  75:      0:        traceme;
    000843: AE mrkl*          000000000000004B
    00084C: F5 sfr            0000000000000000
    000855: 0C cup            0000000000000336
    00085E: AE mrkl*          000000000000004B
    000867: AE mrkl*          000000000000004C
  76:      0:        writeln('4');
    000867: AE mrkl*          000000000000004C
    000870: 7F ldcc           0000000000000034
    000872: 05 lao            000000000000315E
    00087B: 76 swp            0000000000000008
    000884: 7B ldci           0000000000000001
    00088D: 0F csp            000000000000000A
    00088F: 0F csp            0000000000000005
    000891: 75 dmp            0000000000000008
    00089A: AE mrkl*          000000000000004D
  77:      0:        stop4;
    00089A: AE mrkl*          000000000000004D
    0008A3: F5 sfr            0000000000000000
    0008AC: 0C cup            000000000000036C
    0008B5: AE mrkl*          000000000000004D
    0008BE: AE mrkl*          000000000000004E
  78:      0:        writeln('5');
    0008BE: AE mrkl*          000000000000004E
    0008C7: 7F ldcc           0000000000000035
    0008C9: 05 lao            000000000000315E
    0008D2: 76 swp            0000000000000008
    0008DB: 7B ldci           0000000000000001
    0008E4: 0F csp            000000000000000A
    0008E6: 0F csp            0000000000000005
    0008E8: 75 dmp            0000000000000008
    0008F1: AE mrkl*          000000000000004F
  79:      0:        a := 12;
    0008F1: AE mrkl*          000000000000004F
    0008FA: 7B ldci           000000000000000C
    000903: 02 stri        02,FFFFFFFFFFFFFFE8
    00090D: AE mrkl*          0000000000000050
  80:      0:        writeln('6');
    00090D: AE mrkl*          0000000000000050
    000916: 7F ldcc           0000000000000036
    000918: 05 lao            000000000000315E
    000921: 76 swp            0000000000000008
    00092A: 7B ldci           0000000000000001
    000933: 0F csp            000000000000000A
    000935: 0F csp            0000000000000005
    000937: 75 dmp            0000000000000008
    000940: AE mrkl*          0000000000000051
  81:      0:        stop5;
    000940: AE mrkl*          0000000000000051
    000949: F5 sfr            0000000000000000
    000952: 0C cup            00000000000003A2
    00095B: AE mrkl*          0000000000000051
    000964: AE mrkl*          0000000000000052
  82:      0:        writeln('7');
    000964: AE mrkl*          0000000000000052
    00096D: 7F ldcc           0000000000000037
    00096F: 05 lao            000000000000315E
    000978: 76 swp            0000000000000008
    000981: 7B ldci           0000000000000001
    00098A: 0F csp            000000000000000A
    00098C: 0F csp            0000000000000005
    00098E: 75 dmp            0000000000000008
    000997: AE mrkl*          0000000000000053
  83:      0:        writeln('8');
    000997: AE mrkl*          0000000000000053
    0009A0: 7F ldcc           0000000000000038
    0009A2: 05 lao            000000000000315E
    0009AB: 76 swp            0000000000000008
    0009B4: 7B ldci           0000000000000001
    0009BD: 0F csp            000000000000000A
    0009BF: 0F csp            0000000000000005
    0009C1: 75 dmp            0000000000000008
    0009CA: AE mrkl*          0000000000000054
  84:      0:        dostuff;
    0009CA: AE mrkl*          0000000000000054
    0009D3: F5 sfr            0000000000000000
    0009DC: 0C cup            00000000000004C2
    0009E5: AE mrkl*          0000000000000054
    0009EE: AE mrkl*          0000000000000055
  85:      0:        writeln('9');
    0009EE: AE mrkl*          0000000000000055
    0009F7: 7F ldcc           0000000000000039
    0009F9: 05 lao            000000000000315E
    000A02: 76 swp            0000000000000008
    000A0B: 7B ldci           0000000000000001
    000A14: 0F csp            000000000000000A
    000A16: 0F csp            0000000000000005
    000A18: 75 dmp            0000000000000008
    000A21: AE mrkl*          0000000000000056
  86:      0:        writeln('10');
    000A21: AE mrkl*          0000000000000056
    000A2A: 38 lca            00000000000030D9
    000A33: 05 lao            000000000000315E
    000A3C: 76 swp            0000000000000008
    000A45: 7B ldci           0000000000000002
    000A4E: 76 swp            0000000000000008
    000A57: 7B ldci           0000000000000002
    000A60: 0F csp            0000000000000006
    000A62: 0F csp            0000000000000005
    000A64: 75 dmp            0000000000000008
    000A6D: AE mrkl*          0000000000000057
  87:      0:        stop6;
    000A6D: AE mrkl*          0000000000000057
    000A76: F5 sfr            0000000000000000
    000A7F: 0C cup            00000000000003D8
    000A88: AE mrkl*          0000000000000057
    000A91: AE mrkl*          0000000000000058
  88:      0:        dostuff;
    000A91: AE mrkl*          0000000000000058
    000A9A: F5 sfr            0000000000000000
    000AA3: 0C cup            00000000000004C2
    000AAC: AE mrkl*          0000000000000058
    000AB5: AE mrkl*          0000000000000059
  89:      0:        stop7;
    000AB5: AE mrkl*          0000000000000059
    000ABE: F5 sfr            0000000000000000
    000AC7: 0C cup            000000000000040E
    000AD0: AE mrkl*          0000000000000059
    000AD9: AE mrkl*          000000000000005A
  90:      0:        new(d);
    000AD9: AE mrkl*          000000000000005A
    000AE2: 04 lda         02,FFFFFFFFFFFFFFDC
    000AEC: 7B ldci           0000000000000008
    000AF5: 0F csp            0000000000000004
    000AF7: AE mrkl*          000000000000005B
  91:      0:        new(e);
    000AF7: AE mrkl*          000000000000005B
    000B00: 04 lda         02,FFFFFFFFFFFFFFD4
    000B0A: 7B ldci           0000000000000008
    000B13: 0F csp            0000000000000004
    000B15: AE mrkl*          000000000000005C
  92:      0:        dispose(d);
    000B15: AE mrkl*          000000000000005C
    000B1E: 69 loda        02,FFFFFFFFFFFFFFDC
    000B28: 7B ldci           0000000000000008
    000B31: 0F csp            000000000000001A
    000B33: AE mrkl*          000000000000005D
  93:      0:        writeln('11');
    000B33: AE mrkl*          000000000000005D
    000B3C: 38 lca            00000000000030CF
    000B45: 05 lao            000000000000315E
    000B4E: 76 swp            0000000000000008
    000B57: 7B ldci           0000000000000002
    000B60: 76 swp            0000000000000008
    000B69: 7B ldci           0000000000000002
    000B72: 0F csp            0000000000000006
    000B74: 0F csp            0000000000000005
    000B76: 75 dmp            0000000000000008
    000B7F: AE mrkl*          000000000000005E
  94:      0:        stop8;
    000B7F: AE mrkl*          000000000000005E
    000B88: F5 sfr            0000000000000000
    000B91: 0C cup            0000000000000444
    000B9A: AE mrkl*          000000000000005E
    000BA3: AE mrkl*          000000000000005F
  95:      0:    
    000BA3: AE mrkl*          000000000000005F
    000BAC: AE mrkl*          0000000000000060
  96:      0:    end;
    000BAC: AE mrkl*          0000000000000060
    000BB5: 0E retp           0000000000000010
    000BBE: AE mrkl*          0000000000000061
  97:      0:    
    000BBE: AE mrkl*          0000000000000061
    000BC7: AE mrkl*          0000000000000062
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
    000BC7: AE mrkl*          0000000000000062
    000BD0: AE mrkl*          0000000000000063
  99:      0:    
    000BD0: AE mrkl*          0000000000000063
    000BD9: AE mrkl*          0000000000000064
 100:      0:    var i, x, i2: integer;
    000BD9: AE mrkl*          0000000000000064
    000BE2: AE mrkl*          0000000000000065
 101:      0:        c: char;
    000BE2: AE mrkl*          0000000000000065
    000BEB: AE mrkl*          0000000000000066
 102:      0:        b: boolean;
    000BEB: AE mrkl*          0000000000000066
    000BF4: AE mrkl*          0000000000000067
 103:      0:        e: enum;
    000BF4: AE mrkl*          0000000000000067
    000BFD: AE mrkl*          0000000000000068
 104:      0:        sr: sub;
    000BFD: AE mrkl*          0000000000000068
    000C06: AE mrkl*          0000000000000069

debug> li $0

Addr    Op Ins            P  Q
----------------------------------
    000000: 14 lnp*           0000000000003BB8
    000009: 15 cal            000000000000004E
    000012: 3A stp*        
    000013: F2 eext*       
    000014: F2 eext*       
    000015: F2 eext*       
    000016: F2 eext*       
    000017: F2 eext*       
    000018: F2 eext*       
    000019: F2 eext*       
debug> li $0 $100

Addr    Op Ins            P  Q
----------------------------------
    000000: 14 lnp*           0000000000003BB8
    000009: 15 cal            000000000000004E
    000012: 3A stp*        
    000013: F2 eext*       
    000014: F2 eext*       
    000015: F2 eext*       
    000016: F2 eext*       
    000017: F2 eext*       
    000018: F2 eext*       
    000019: F2 eext*       
    00001A: F2 eext*       
    00001B: F2 eext*       
    00001C: F2 eext*       
    00001D: F2 eext*       
    00001E: F2 eext*       
    00001F: F2 eext*       
    000020: F2 eext*       
    000021: F2 eext*       
    000022: F2 eext*       
    000023: F2 eext*       
    000024: F2 eext*       
    000025: F2 eext*       
    000026: F2 eext*       
    000027: F2 eext*       
    000028: F2 eext*       
    000029: F2 eext*       
    00002A: F2 eext*       
    00002B: F2 eext*       
    00002C: F2 eext*       
    00002D: F2 eext*       
    00002E: F2 eext*       
    00002F: F2 eext*       
    000030: F2 eext*       
    000031: F2 eext*       
    000032: F2 eext*       
    000033: F2 eext*       
    000034: F2 eext*       
    000035: F2 eext*       
    000036: F2 eext*       
    000037: F2 eext*       
    000038: F2 eext*       
    000039: F2 eext*       
    00003A: F2 eext*       
    00003B: F2 eext*       
    00003C: F2 eext*       
    00003D: F2 eext*       
    00003E: F2 eext*       
    00003F: F2 eext*       
    000040: F2 eext*       
    000041: F2 eext*       
    000042: F2 eext*       
    000043: F2 eext*       
    000044: F2 eext*       
    000045: F2 eext*       
    000046: F2 eext*       
    000047: F2 eext*       
    000048: F2 eext*       
    000049: F2 eext*       
    00004A: F2 eext*       
    00004B: F2 eext*       
    00004C: F2 eext*       
    00004D: F2 eext*       
    00004E: AE mrkl*          0000000000000001
    000057: F5 sfr            0000000000000000
    000060: 0C cup            0000000000000134
    000069: 15 cal            0000000000000197
    000072: F5 sfr            0000000000000000
    00007B: 0C cup            000000000000017C
    000084: 16 ret         
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            000000000000313E
    0000DF: 05 lao            000000000000315E
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
debug> li $0:100

Addr    Op Ins            P  Q
----------------------------------
    000000: 14 lnp*           0000000000003BB8
    000009: 15 cal            000000000000004E
    000012: 3A stp*        
    000013: F2 eext*       
    000014: F2 eext*       
    000015: F2 eext*       
    000016: F2 eext*       
    000017: F2 eext*       
    000018: F2 eext*       
    000019: F2 eext*       
    00001A: F2 eext*       
    00001B: F2 eext*       
    00001C: F2 eext*       
    00001D: F2 eext*       
    00001E: F2 eext*       
    00001F: F2 eext*       
    000020: F2 eext*       
    000021: F2 eext*       
    000022: F2 eext*       
    000023: F2 eext*       
    000024: F2 eext*       
    000025: F2 eext*       
    000026: F2 eext*       
    000027: F2 eext*       
    000028: F2 eext*       
    000029: F2 eext*       
    00002A: F2 eext*       
    00002B: F2 eext*       
    00002C: F2 eext*       
    00002D: F2 eext*       
    00002E: F2 eext*       
    00002F: F2 eext*       
    000030: F2 eext*       
    000031: F2 eext*       
    000032: F2 eext*       
    000033: F2 eext*       
    000034: F2 eext*       
    000035: F2 eext*       
    000036: F2 eext*       
    000037: F2 eext*       
    000038: F2 eext*       
    000039: F2 eext*       
    00003A: F2 eext*       
    00003B: F2 eext*       
    00003C: F2 eext*       
    00003D: F2 eext*       
    00003E: F2 eext*       
    00003F: F2 eext*       
    000040: F2 eext*       
    000041: F2 eext*       
    000042: F2 eext*       
    000043: F2 eext*       
    000044: F2 eext*       
    000045: F2 eext*       
    000046: F2 eext*       
    000047: F2 eext*       
    000048: F2 eext*       
    000049: F2 eext*       
    00004A: F2 eext*       
    00004B: F2 eext*       
    00004C: F2 eext*       
    00004D: F2 eext*       
    00004E: AE mrkl*          0000000000000001
    000057: F5 sfr            0000000000000000
    000060: 0C cup            0000000000000134
    000069: 15 cal            0000000000000197
    000072: F5 sfr            0000000000000000
    00007B: 0C cup            000000000000017C
    000084: 16 ret         
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            000000000000313E
    0000DF: 05 lao            000000000000315E
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
    000103: 7B ldci           0000000000000013
    00010C: 0F csp            0000000000000006
    00010E: 0F csp            0000000000000005
    000110: 75 dmp            0000000000000008
    000119: AE mrkl*          0000000000000008
    000122: AE mrkl*          0000000000000009
    00012B: 0E retp           0000000000000000
    000134: AE mrkl*          000000000000000A
    00013D: AE mrkl*          000000000000000B
    000146: AE mrkl*          000000000000000B
    00014F: 0B mst         00,FFFFFFFFFFFFFFF8,0000000000000000
    000161: AE mrkl*          000000000000000C
    00016A: AE mrkl*          000000000000000D
    000173: 0E retp           0000000000000000
    00017C: 0B mst         01,0000000000000000,0000000000000000
    00018E: 0E retp           0000000000000000
    000197: AE mrkl*          0000000000000001
    0001A0: F5 sfr            0000000000000000
debug> li $4e

Addr    Op Ins            P  Q
----------------------------------
    00004E: AE mrkl*          0000000000000001
    000057: F5 sfr            0000000000000000
    000060: 0C cup            0000000000000134
    000069: 15 cal            0000000000000197
    000072: F5 sfr            0000000000000000
    00007B: 0C cup            000000000000017C
    000084: 16 ret         
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
debug> li $4e $100

Addr    Op Ins            P  Q
----------------------------------
    00004E: AE mrkl*          0000000000000001
    000057: F5 sfr            0000000000000000
    000060: 0C cup            0000000000000134
    000069: 15 cal            0000000000000197
    000072: F5 sfr            0000000000000000
    00007B: 0C cup            000000000000017C
    000084: 16 ret         
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            000000000000313E
    0000DF: 05 lao            000000000000315E
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
debug> li $4e:100

Addr    Op Ins            P  Q
----------------------------------
    00004E: AE mrkl*          0000000000000001
    000057: F5 sfr            0000000000000000
    000060: 0C cup            0000000000000134
    000069: 15 cal            0000000000000197
    000072: F5 sfr            0000000000000000
    00007B: 0C cup            000000000000017C
    000084: 16 ret         
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            000000000000313E
    0000DF: 05 lao            000000000000315E
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
    000103: 7B ldci           0000000000000013
    00010C: 0F csp            0000000000000006
    00010E: 0F csp            0000000000000005
    000110: 75 dmp            0000000000000008
    000119: AE mrkl*          0000000000000008
    000122: AE mrkl*          0000000000000009
    00012B: 0E retp           0000000000000000
    000134: AE mrkl*          000000000000000A
    00013D: AE mrkl*          000000000000000B
    000146: AE mrkl*          000000000000000B
    00014F: 0B mst         00,FFFFFFFFFFFFFFF8,0000000000000000
    000161: AE mrkl*          000000000000000C
    00016A: AE mrkl*          000000000000000D
    000173: 0E retp           0000000000000000
    00017C: 0B mst         01,0000000000000000,0000000000000000
    00018E: 0E retp           0000000000000000
    000197: AE mrkl*          0000000000000001
    0001A0: F5 sfr            0000000000000000
    0001A9: 0C cup            0000000000001B33
    0001B2: 16 ret         
    0001B3: AE mrkl*          0000000000000002
    0001BC: AE mrkl*          0000000000000003
    0001C5: AE mrkl*          0000000000000004
    0001CE: AE mrkl*          0000000000000005
    0001D7: AE mrkl*          0000000000000006
    0001E0: AE mrkl*          0000000000000007
    0001E9: AE mrkl*          0000000000000008
    0001F2: AE mrkl*          0000000000000009
    0001FB: AE mrkl*          000000000000000A
    000204: AE mrkl*          000000000000000B
    00020D: AE mrkl*          000000000000000C
    000216: AE mrkl*          000000000000000D
    00021F: AE mrkl*          000000000000000E
    000228: AE mrkl*          000000000000000F
    000231: AE mrkl*          0000000000000010
    00023A: AE mrkl*          0000000000000011
    000243: AE mrkl*          0000000000000012
    00024C: AE mrkl*          0000000000000013
    000255: AE mrkl*          0000000000000014
    00025E: AE mrkl*          0000000000000015
    000267: AE mrkl*          0000000000000016
    000270: AE mrkl*          0000000000000017
    000279: AE mrkl*          0000000000000018
    000282: AE mrkl*          0000000000000019
    00028B: AE mrkl*          000000000000001A
    000294: AE mrkl*          000000000000001A
    00029D: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0002AF: 0E retp           0000000000000000
    0002B8: AE mrkl*          000000000000001B
    0002C1: AE mrkl*          000000000000001C
    0002CA: AE mrkl*          000000000000001C
    0002D3: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0002E5: 0E retp           0000000000000000
    0002EE: AE mrkl*          000000000000001D
    0002F7: AE mrkl*          000000000000001E
    000300: AE mrkl*          000000000000001E
    000309: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    00031B: 0E retp           0000000000000000
    000324: AE mrkl*          000000000000001F
    00032D: AE mrkl*          0000000000000020
    000336: AE mrkl*          0000000000000020
    00033F: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000351: 0E retp           0000000000000000
    00035A: AE mrkl*          0000000000000021
    000363: AE mrkl*          0000000000000022
    00036C: AE mrkl*          0000000000000022
    000375: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000387: 0E retp           0000000000000000
    000390: AE mrkl*          0000000000000023
    000399: AE mrkl*          0000000000000024
    0003A2: AE mrkl*          0000000000000024
    0003AB: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0003BD: 0E retp           0000000000000000
    0003C6: AE mrkl*          0000000000000025
    0003CF: AE mrkl*          0000000000000026
    0003D8: AE mrkl*          0000000000000026
    0003E1: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0003F3: 0E retp           0000000000000000
    0003FC: AE mrkl*          0000000000000027
    000405: AE mrkl*          0000000000000028
debug> ! run until end of program block
debug> b debug_test stop1
debug> r
This is debug test
this is debug test1

=== break ===

  25:      0:    
  26:      1: b* procedure stop1; begin end;
  27:      0:    

debug> ! expressions/constants
debug> p $100

256

debug> p &100

64

debug> p %100

4

debug> p 255$

FF

debug> p 100&

144

debug> p 100%

1100100

debug> p not 1$

7FFFFFFFFFFFFFFE

debug> p 2+(3*4)

14

debug> p (2+3)*4

20

debug> p ['0'..'9','a','b']

['0'..'9','a'..'b']

debug> p 'hi there bob''s'

'hi there bob's'

debug> p 'hi '''' there'

'hi '' there'

debug> p 1

1

debug> p 12.34

 1.2340000000000000e+01

debug> p 3*4

12

debug> p 3.0*4.0

 1.2000000000000000e+01

debug> p 10/3

 3.3333333333333335e+00

debug> p 10.0/3.0

 3.3333333333333335e+00

debug> p 10 div 3

3

debug> p 10 mod 3

1

debug> p 10 and 3%

10

debug> p 1+2

3

debug> p 1.0+2.0

 3.0000000000000000e+00

debug> p 3-1

2

debug> p 3.0-1.0

 2.0000000000000000e+00

debug> p 10 or 3%

1011

debug> p 10 xor 3%

1001

debug> p 12 = 12

true(1)

debug> p 12 = 13

false(0)

debug> p 12 <> 12

false(0)

debug> p 12 <> 13

true(1)

debug> p 12 < 13

true(1)

debug> p 12 < 12

false(0)

debug> p 12 < 10

false(0)

debug> p 42 > 10

true(1)

debug> p 42 > 42

false(0)

debug> p 42 > 50

false(0)

debug> p 32 <= 40

true(1)

debug> p 32 <= 32

true(1)

debug> p 32 <= 12

false(0)

debug> p 92 >= 10

true(1)

debug> p 92 >= 92

true(1)

debug> p 92 >= 100

false(0)

debug> 
debug> p x

42

debug> p c

'a'(97)

debug> p b

true(1)

debug> p e

two(1)

debug> p sr

5

debug> p f

 1.2340000000000000e+11

debug> p rv

record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.6780000000000005e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.4320000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end

debug> p a

array 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 end

debug> p ar

array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end

debug> p a[5]

15

debug> p rv.rec.sr

3

debug> p rv.rec.a

array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end

debug> p rv.rec.a[5]

25

debug> p ar[5].e

one(0)

debug> p ar[6].rec.a[5]

40

debug> p pi$

3BC0

debug> p pi^

42

debug> 
debug> d 0


000000: 14 B8 3B 00 00 00 00 00 00 15 4E 00 00 00 00 00   ..;.......N.....
000010: 00 00 3A F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2   ..:.............
000020: F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2   ................
******: ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **   ****************
000040: F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 AE 01   ................
000050: 00 00 00 00 00 00 00 F5 00 00 00 00 00 00 00 00   ................
000060: 0C 34 01 00 00 00 00 00 00 15 97 01 00 00 00 00   .4..............
000070: 00 00 F5 00 00 00 00 00 00 00 00 0C 7C 01 00 00   ............|...
000080: 00 00 00 00 16 AE 02 00 00 00 00 00 00 00 AE 03   ................
000090: 00 00 00 00 00 00 00 AE 04 00 00 00 00 00 00 00   ................
0000A0: AE 05 00 00 00 00 00 00 00 AE 05 00 00 00 00 00   ................
0000B0: 00 00 0B 01 F0 FF FF FF FF FF FF FF E0 FF FF FF   ................
0000C0: FF FF FF FF AE 06 00 00 00 00 00 00 00 AE 07 00   ................
0000D0: 00 00 00 00 00 00 38 3E 31 00 00 00 00 00 00 05   ......8>1.......
0000E0: 5E 31 00 00 00 00 00 00 76 08 00 00 00 00 00 00   ^1......v.......
0000F0: 00 7B 13 00 00 00 00 00 00 00 76 08 00 00 00 00   .{........v.....


debug> d 0 $100


000000: 14 B8 3B 00 00 00 00 00 00 15 4E 00 00 00 00 00   ..;.......N.....
000010: 00 00 3A F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2   ..:.............
000020: F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2   ................
******: ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **   ****************
000040: F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 AE 01   ................
000050: 00 00 00 00 00 00 00 F5 00 00 00 00 00 00 00 00   ................
000060: 0C 34 01 00 00 00 00 00 00 15 97 01 00 00 00 00   .4..............
000070: 00 00 F5 00 00 00 00 00 00 00 00 0C 7C 01 00 00   ............|...
000080: 00 00 00 00 16 AE 02 00 00 00 00 00 00 00 AE 03   ................
000090: 00 00 00 00 00 00 00 AE 04 00 00 00 00 00 00 00   ................
0000A0: AE 05 00 00 00 00 00 00 00 AE 05 00 00 00 00 00   ................
0000B0: 00 00 0B 01 F0 FF FF FF FF FF FF FF E0 FF FF FF   ................
0000C0: FF FF FF FF AE 06 00 00 00 00 00 00 00 AE 07 00   ................
0000D0: 00 00 00 00 00 00 38 3E 31 00 00 00 00 00 00 05   ......8>1.......
0000E0: 5E 31 00 00 00 00 00 00 76 08 00 00 00 00 00 00   ^1......v.......
0000F0: 00 7B 13 00 00 00 00 00 00 00 76 08 00 00 00 00   .{........v.....
000100: 00                                                .


debug> d 0:$100


000000: 14 B8 3B 00 00 00 00 00 00 15 4E 00 00 00 00 00   ..;.......N.....
000010: 00 00 3A F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2   ..:.............
000020: F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2   ................
******: ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **   ****************
000040: F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 AE 01   ................
000050: 00 00 00 00 00 00 00 F5 00 00 00 00 00 00 00 00   ................
000060: 0C 34 01 00 00 00 00 00 00 15 97 01 00 00 00 00   .4..............
000070: 00 00 F5 00 00 00 00 00 00 00 00 0C 7C 01 00 00   ............|...
000080: 00 00 00 00 16 AE 02 00 00 00 00 00 00 00 AE 03   ................
000090: 00 00 00 00 00 00 00 AE 04 00 00 00 00 00 00 00   ................
0000A0: AE 05 00 00 00 00 00 00 00 AE 05 00 00 00 00 00   ................
0000B0: 00 00 0B 01 F0 FF FF FF FF FF FF FF E0 FF FF FF   ................
0000C0: FF FF FF FF AE 06 00 00 00 00 00 00 00 AE 07 00   ................
0000D0: 00 00 00 00 00 00 38 3E 31 00 00 00 00 00 00 05   ......8>1.......
0000E0: 5E 31 00 00 00 00 00 00 76 08 00 00 00 00 00 00   ^1......v.......
0000F0: 00 7B 13 00 00 00 00 00 00 00 76 08 00 00 00 00   .{........v.....


debug> d $100


000100: 00 00 00 7B 13 00 00 00 00 00 00 00 0F 06 0F 05   ...{............
000110: 75 08 00 00 00 00 00 00 00 AE 08 00 00 00 00 00   u...............
000120: 00 00 AE 09 00 00 00 00 00 00 00 0E 00 00 00 00   ................
000130: 00 00 00 00 AE 0A 00 00 00 00 00 00 00 AE 0B 00   ................
000140: 00 00 00 00 00 00 AE 0B 00 00 00 00 00 00 00 0B   ................
000150: 00 F8 FF FF FF FF FF FF FF 00 00 00 00 00 00 00   ................
000160: 00 AE 0C 00 00 00 00 00 00 00 AE 0D 00 00 00 00   ................
000170: 00 00 00 0E 00 00 00 00 00 00 00 00 0B 01 00 00   ................
000180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0E 00   ................
000190: 00 00 00 00 00 00 00 AE 01 00 00 00 00 00 00 00   ................
0001A0: F5 00 00 00 00 00 00 00 00 0C 33 1B 00 00 00 00   ..........3.....
0001B0: 00 00 16 AE 02 00 00 00 00 00 00 00 AE 03 00 00   ................
0001C0: 00 00 00 00 00 AE 04 00 00 00 00 00 00 00 AE 05   ................
0001D0: 00 00 00 00 00 00 00 AE 06 00 00 00 00 00 00 00   ................
0001E0: AE 07 00 00 00 00 00 00 00 AE 08 00 00 00 00 00   ................
0001F0: 00 00 AE 09 00 00 00 00 00 00 00 AE 0A 00 00 00   ................


debug> d $100 $100


000100: 00                                                .


debug> d $100:$100


000100: 00 00 00 7B 13 00 00 00 00 00 00 00 0F 06 0F 05   ...{............
000110: 75 08 00 00 00 00 00 00 00 AE 08 00 00 00 00 00   u...............
000120: 00 00 AE 09 00 00 00 00 00 00 00 0E 00 00 00 00   ................
000130: 00 00 00 00 AE 0A 00 00 00 00 00 00 00 AE 0B 00   ................
000140: 00 00 00 00 00 00 AE 0B 00 00 00 00 00 00 00 0B   ................
000150: 00 F8 FF FF FF FF FF FF FF 00 00 00 00 00 00 00   ................
000160: 00 AE 0C 00 00 00 00 00 00 00 AE 0D 00 00 00 00   ................
000170: 00 00 00 0E 00 00 00 00 00 00 00 00 0B 01 00 00   ................
000180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0E 00   ................
000190: 00 00 00 00 00 00 00 AE 01 00 00 00 00 00 00 00   ................
0001A0: F5 00 00 00 00 00 00 00 00 0C 33 1B 00 00 00 00   ..........3.....
0001B0: 00 00 16 AE 02 00 00 00 00 00 00 00 AE 03 00 00   ................
0001C0: 00 00 00 00 00 AE 04 00 00 00 00 00 00 00 AE 05   ................
0001D0: 00 00 00 00 00 00 00 AE 06 00 00 00 00 00 00 00   ................
0001E0: AE 07 00 00 00 00 00 00 00 AE 08 00 00 00 00 00   ................
0001F0: 00 00 AE 09 00 00 00 00 00 00 00 AE 0A 00 00 00   ................


debug> ! print contents of i, then modify using enter, then print again
debug> p x

42

debug> e *x 12 0 0 0
debug> p x

12

debug> st i $1234
debug> p i$

1234

debug> pg

Globals:

pi                   
ar                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
a                    array 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 end
rv                   record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.6780000000000005e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.4320000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
f                     1.2340000000000000e+11
sr                   5
e                    two(1)
b                    true(1)
c                    'a'(97)
i                    4660
x                    12
i2                   Undefined

debug> ! go down a level to proc1
debug> b stop2
debug> r

=== break ===

  27:      0:    
  28:      1: b* procedure stop2; begin end;
  29:      0:    

debug> ! step out of the stop
debug> ret

 161:      1:    
 162:      1:  *     proc2(74, 'j');
 163:      0:    

debug> 
debug> ! print parameters
debug> p pi

83

debug> p pc

'g'(103)

debug> p pb

true(1)

debug> p pe

two(1)

debug> p psr

7

debug> p pr

 9.8760000000000005e+01

debug> p prec

record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.6780000000000005e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.4320000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end

debug> p pa

array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end

debug> 
debug> ! print locals
debug> p x

43

debug> p c

'b'(98)

debug> p b

false(0)

debug> p e

three(2)

debug> p sr

8

debug> p f

 5.6780000000000000e+11

debug> p rv

record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
   8.7649999999999997e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
     3.6320000000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end

debug> p a

array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end

debug> p ar

array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end

debug> p a[5]

25

debug> p rv.rec.sr

4

debug> p rv.rec.a

array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end

debug> p rv.rec.a[5]

45

debug> p ar[5].e

one(0)

debug> p ar[6].rec.a[5]

80

debug> p ip$

3BD0

debug> p ip^

76

debug> 
debug> ! Various dumps. Note pl 2 and pp 2 dumps only dump one level since that is all
debug> ! there is.
debug> pl

Locals for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

ip                   
ar                   array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end
a                    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
rv                   record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
   8.7649999999999997e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
     3.6320000000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end
f                     5.6780000000000000e+11
sr                   8
e                    three(2)
b                    false(0)
c                    'b'(98)
i                    Undefined
x                    43
i2                   Undefined

debug> pl 2

Locals for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

ip                   
ar                   array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end
a                    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
rv                   record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
   8.7649999999999997e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
     3.6320000000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end
f                     5.6780000000000000e+11
sr                   8
e                    three(2)
b                    false(0)
c                    'b'(98)
i                    Undefined
x                    43
i2                   Undefined

debug> pp

Parameters for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

pa                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
prec                 record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.6780000000000005e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.4320000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
pr                    9.8760000000000005e+01
psr                  7
pe                   two(1)
pb                   true(1)
pc                   'g'(103)
pi                   83

debug> pp 2

Parameters for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

pa                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
prec                 record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.6780000000000005e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.4320000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
pr                    9.8760000000000005e+01
psr                  7
pe                   two(1)
pb                   true(1)
pc                   'g'(103)
pi                   83

debug> ds

Storage areas occupied

Program     000000-002ACF (10960)
Constants   002AD0-00315B (1676)
Globals     00315C-003BB7 (2652)
Stack/Heap  003BB8-FFFFFF (16761928)

debug> dd

Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80


Mark @FFFFC8
ep: 00FFFFD0: 00000005
sb: 00FFFFD8: 00FFFFA0
et: 00FFFFE0: 00FFFF60

debug> dd 1

Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80

debug> 
debug> ! go down a level to proc2
debug> b stop3
debug> r

=== break ===

  29:      0:    
  30:      1: b* procedure stop3; begin end;
  31:      0:    

debug> ret

  69:      1:    
  70:      1:  *     writeln('Step past me!');
  71:      0:        writeln('And me too!');

debug> 
debug> pl 2

Locals for block: proc2@p_i_c

e                    
d                    
b                    '6'(54)
a                    75


Locals for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

ip                   
ar                   array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end
a                    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
rv                   record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
   8.7649999999999997e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
     3.6320000000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end
f                     5.6780000000000000e+11
sr                   8
e                    three(2)
b                    false(0)
c                    'b'(98)
i                    Undefined
x                    43
i2                   Undefined

debug> pp 2

Parameters for block: proc2@p_i_c

c                    'j'(106)
i                    74


Parameters for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

pa                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
prec                 record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.6780000000000005e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.4320000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
pr                    9.8760000000000005e+01
psr                  7
pe                   two(1)
pb                   true(1)
pc                   'g'(103)
pi                   83

debug> dd

Mark @FFEB60
ep: 00FFEB68: 00FFEB80
sb: 00FFEB70: 00FFEB30
et: 00FFEB78: 00FFEB10


Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80


Mark @FFFFC8
ep: 00FFFFD0: 00000005
sb: 00FFFFD8: 00FFFFA0
et: 00FFFFE0: 00FFFF60

debug> dd 2

Mark @FFEB60
ep: 00FFEB68: 00FFEB80
sb: 00FFEB70: 00FFEB30
et: 00FFEB78: 00FFEB10


Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80

debug> ! step over some writes
debug> s 2
Step past me!

  70:      1:        writeln('Step past me!');
  71:      1:  *     writeln('And me too!');
  72:      0:        writeln('1');

And me too!

  71:      1:        writeln('And me too!');
  72:      1:  *     writeln('1');
  73:      0:        writeln('2');

debug> ss 2
1
2
debug> tp traceme
debug> b stop4
debug> r
3

  31:      0:    
  32:      1: t* procedure traceme; begin end;
  33:      0:    

4

=== break ===

  33:      0:    
  34:      1: b* procedure stop4; begin end;
  35:      0:    

debug> ret

  77:      2:        stop4;
  78:      1:  *     writeln('5');
  79:      0:        a := 12;

debug> lb

Breakpoints:

No  Src  Addr   Trc/brk
=======================
 1:  26: 0002AF b
 2:  28: 0002E5 b
 3:  30: 00031B b
 4:  32: 000351 t
 5:  34: 000387 b

debug> c
debug> lb

Breakpoints:

No  Src  Addr   Trc/brk
=======================

debug> w a
debug> w b
debug> b stop5
debug> r
5
Watch variable: @00000903: a@00FFEB48: 75 -> 12
6

=== break ===

  35:      0:    
  36:      1: b* procedure stop5; begin end;
  37:      0:    

debug> s

  81:      2:        stop5;
  82:      1:  *     writeln('7');
  83:      0:        writeln('8');

debug> lw

Watch table:

1: 00FFEB48
2: 00FFEB47

debug> cw 1
debug> lw

Watch table:

1: 00FFEB47

debug> cw
debug> lw

Watch table:


debug> ts
debug> b stop6
debug> r
7

  82:      1:        writeln('7');
  83:      1:  *     writeln('8');
  84:      0:        dostuff;

8

  83:      1:        writeln('8');
  84:      1:  *     dostuff;
  85:      0:        writeln('9');


  48:      0:    var i: integer;
  49:      1:  * 
  50:      0:    begin


  49:      1:    
  50:      1:  * begin
  51:      0:    


  49:      1:    
  50:      2:  * begin
  51:      0:    


  50:      2:    begin
  51:      1:  * 
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);


  51:      1:    
  52:      1:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    


  51:      1:    
  52:      2:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    

iteration:           1

  51:      1:    
  52:      3:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    

iteration:           2

  51:      1:    
  52:      4:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    

iteration:           3

  51:      1:    
  52:      5:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    

iteration:           4

  51:      1:    
  52:      6:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    


  52:      6:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      1:  * 
  54:      0:    end;


  53:      1:    
  54:      1:  * end;
  55:      0:    


  83:      1:        writeln('8');
  84:      2:  *     dostuff;
  85:      0:        writeln('9');


  84:      2:        dostuff;
  85:      1:  *     writeln('9');
  86:      0:        writeln('10');

9

  85:      1:        writeln('9');
  86:      1:  *     writeln('10');
  87:      0:        stop6;

10

  86:      1:        writeln('10');
  87:      1:  *     stop6;
  88:      0:        dostuff;


  37:      0:    
  38:      1: b* procedure stop6; begin end;
  39:      0:    


=== break ===

  37:      0:    
  38:      1: b* procedure stop6; begin end;
  39:      0:    

debug> ret

  86:      1:        writeln('10');
  87:      2:  *     stop6;
  88:      0:        dostuff;


  87:      2:        stop6;
  88:      1:  *     dostuff;
  89:      0:        stop7;


  87:      2:        stop6;
  88:      1:  *     dostuff;
  89:      0:        stop7;

debug> nts
debug> an
debug> b stop7
debug> r
iteration:           1
iteration:           2
iteration:           3
iteration:           4

=== break ===

  39:      0:    
  40:      1: b* procedure stop7; begin end;
  41:      0:    

debug> ret

  89:      2:        stop7;
  90:      1:  *     new(d);
  91:      0:        new(e);

debug> lsa

last source lines executed:

  90:      1:  *     new(d);
  89:      2:        stop7;
  40:      1: b  procedure stop7; begin end;
  89:      2:        stop7;
  88:      2:        dostuff;
  54:      2:    end;
  53:      2:    
  52:     12:        for i := 1 to 4 do writeln('iteration: ', i);
  52:     12:        for i := 1 to 4 do writeln('iteration: ', i);
  52:     12:        for i := 1 to 4 do writeln('iteration: ', i);

debug> s

  90:      1:        new(d);
  91:      1:  *     new(e);
  92:      0:        dispose(d);

debug> s

  91:      1:        new(e);
  92:      1:  *     dispose(d);
  93:      0:        writeln('11');

debug> hs

Heap space breakdown

addr: 003BB8:     16: alloc
addr: 003BC8:     16: alloc
addr: 003BD8:     16: alloc
addr: 003BE8:     16: alloc
debug> s

  92:      1:        dispose(d);
  93:      1:  *     writeln('11');
  94:      0:        stop8;

debug> hs

Heap space breakdown

addr: 003BB8:     16: alloc
addr: 003BC8:     16: alloc
addr: 003BD8:     16: free
addr: 003BE8:     16: alloc
debug> tr
debug> b stop8
debug> r
  2932/16771856->  6
11
  2934/16771880->  5


=== break ===

  41:      0:    
  42:      1: b* procedure stop8; begin end;
  43:      0:    

debug> ret

  95:      1:    
  96:      1:  * end;
  97:      0:    

debug> ntr
debug> ! step out of proc2
debug> ret

 163:      1:    
 164:      1:  * end;
 165:      0:    

debug> ! step out of proc1
debug> ret

 236:      1:    
 237:      1:  *     stepover1;
 238:      0:    

debug> ! step over next verbose
debug> so
I am stepover proc 1

 238:      1:    
 239:      1:  *     stepover2;
 240:      0:    

debug> ! step over next silently
debug> sso
I am stepover proc 2
debug> ! but now show where you are
debug> ps

 240:      1:    
 241:      1:  *     writeln('Step me!');
 242:      0:        for i := 1 to 3 do writeln('Hi there!');    

debug> 
debug> ! Test source profiling.
debug> ! Compare this listing with the one at program start to see if the counters have
debug> ! rolled.
debug> l debug_test 1 100

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      1:    procedure stop1; begin end;
  27:      0:    
  28:      1:    procedure stop2; begin end;
  29:      0:    
  30:      1:    procedure stop3; begin end;
  31:      0:    
  32:      1:    procedure traceme; begin end;
  33:      0:    
  34:      1:    procedure stop4; begin end;
  35:      0:    
  36:      1: b  procedure stop5; begin end;
  37:      0:    
  38:      1: b  procedure stop6; begin end;
  39:      0:    
  40:      1: b  procedure stop7; begin end;
  41:      0:    
  42:      1: b  procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      2:    
  50:      4:    begin
  51:      2:    
  52:     12:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      2:    
  54:      2:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      1:    
  63:      2:    begin
  64:      1:    
  65:      1:        a := 75;
  66:      1:        b := '6';
  67:      1:    
  68:      2:        stop3;
  69:      1:    
  70:      1:        writeln('Step past me!');
  71:      1:        writeln('And me too!');
  72:      1:        writeln('1');
  73:      1:        writeln('2');
  74:      1:        writeln('3');
  75:      2:        traceme;
  76:      1:        writeln('4');
  77:      2:        stop4;
  78:      1:        writeln('5');
  79:      1:        a := 12;
  80:      1:        writeln('6');
  81:      2:        stop5;
  82:      1:        writeln('7');
  83:      1:        writeln('8');
  84:      2:        dostuff;
  85:      1:        writeln('9');
  86:      1:        writeln('10');
  87:      2:        stop6;
  88:      2:        dostuff;
  89:      2:        stop7;
  90:      1:        new(d);
  91:      1:        new(e);
  92:      1:        dispose(d);
  93:      1:        writeln('11');
  94:      2:        stop8;
  95:      1:    
  96:      1:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;

debug> 
debug> ! machine commands can be tested in source mode, we just don't get a machine
debug> ! level status print. Note li @pc can be a defacto assembly status, since it
debug> ! shows where the execution point is.
debug> !
debug> ! Note the test can need to be recalibrated if the source changes. If it hits
debug> ! the stop instruction, it means you missed a breakpoint (it ran off the end).
debug> !
debug> ! Test si, sio, sis, siso, lia, bi, tpi
debug> p @pc$

2945

debug> li @pc

Addr    Op Ins            P  Q
----------------------------------
 *  002945: 38 lca            0000000000002AE1
    00294E: 05 lao            000000000000315E
    002957: 76 swp            0000000000000008
    002960: 7B ldci           0000000000000008
    002969: 76 swp            0000000000000008
    002972: 7B ldci           0000000000000008
    00297B: 0F csp            0000000000000006
    00297D: 0F csp            0000000000000005
    00297F: 75 dmp            0000000000000008
    002988: AE mrkl*          00000000000000F2
debug> si

 240:      1:    
 241:      1:  *     writeln('Step me!');
 242:      0:        for i := 1 to 3 do writeln('Hi there!');    

debug> p @pc$

294E

debug> li @pc

Addr    Op Ins            P  Q
----------------------------------
 *  00294E: 05 lao            000000000000315E
    002957: 76 swp            0000000000000008
    002960: 7B ldci           0000000000000008
    002969: 76 swp            0000000000000008
    002972: 7B ldci           0000000000000008
    00297B: 0F csp            0000000000000006
    00297D: 0F csp            0000000000000005
    00297F: 75 dmp            0000000000000008
    002988: AE mrkl*          00000000000000F2
    002991: 7B ldci           0000000000000001
debug> sis
debug> p @pc$

2957

debug> li @pc

Addr    Op Ins            P  Q
----------------------------------
 *  002957: 76 swp            0000000000000008
    002960: 7B ldci           0000000000000008
    002969: 76 swp            0000000000000008
    002972: 7B ldci           0000000000000008
    00297B: 0F csp            0000000000000006
    00297D: 0F csp            0000000000000005
    00297F: 75 dmp            0000000000000008
    002988: AE mrkl*          00000000000000F2
    002991: 7B ldci           0000000000000001
    00299A: 02 stri        01,FFFFFFFFFFFFFFF0
debug> ! run to start of wri call
debug> bi $297b
debug> r

=== break ===

 240:      1:    
 241:      1: b*     writeln('Step me!');
 242:      0:        for i := 1 to 3 do writeln('Hi there!');    

debug> ! dump stack should have parameters on it.
debug> dst
00FFFF80: 00000008 (8)
00FFFF88: 00002AE1 (10977)
00FFFF90: 00000008 (8)
00FFFF98: 0000315E (12638)
00FFFFA0: 0000000A (10)
00FFFFA8: 00000001 (1)
00FFFFB0: 0000000A (10)
00FFFFB8: 00000001 (1)
00FFFFC0: 00FFFFC8 (16777160)
00FFFFC8: 01000000 (16777216)
debug> an
debug> ! set this address near the end of the instructions just listed
debug> bi $297d
debug> r
Step me!

=== break ===

 240:      1:    
 241:      1: b*     writeln('Step me!');
 242:      0:        for i := 1 to 3 do writeln('Hi there!');    

debug> p @pc$

297D

debug> li @pc

Addr    Op Ins            P  Q
----------------------------------
b*  00297D: 0F csp            0000000000000005
    00297F: 75 dmp            0000000000000008
    002988: AE mrkl*          00000000000000F2
    002991: 7B ldci           0000000000000001
    00299A: 02 stri        01,FFFFFFFFFFFFFFF0
    0029A4: 7B ldci           0000000000000003
    0029AD: 02 stri        01,FFFFFFFFFFFFFFE8
    0029B7: 00 lodi        01,FFFFFFFFFFFFFFF0
    0029C1: 03 sroi           00000000000031C5
    0029CA: AE mrkl*          00000000000000F2
debug> lia

last instructions executed:

b   00297B: 0F csp            0000000000000006
    002972: 7B ldci           0000000000000008
    002969: 76 swp            0000000000000008
    002960: 7B ldci           0000000000000008
    002957: 76 swp            0000000000000008
    00294E: 05 lao            000000000000315E
    002945: 38 lca            0000000000002AE1
    00293C: AE mrkl*          00000000000000F1
    002933: AE mrkl*          00000000000000F0
    00292A: AE mrkl*          00000000000000EF

debug> ! Now step to for loop
debug> s


 241:      1: b      writeln('Step me!');
 242:      1:  *     for i := 1 to 3 do writeln('Hi there!');    
 243:      0:    

debug> li @pc:20

Addr    Op Ins            P  Q
----------------------------------
 *  002991: 7B ldci           0000000000000001
    00299A: 02 stri        01,FFFFFFFFFFFFFFF0
    0029A4: 7B ldci           0000000000000003
    0029AD: 02 stri        01,FFFFFFFFFFFFFFE8
    0029B7: 00 lodi        01,FFFFFFFFFFFFFFF0
    0029C1: 03 sroi           00000000000031C5
    0029CA: AE mrkl*          00000000000000F2
    0029D3: 01 ldoi           00000000000031C5
    0029DC: 00 lodi        01,FFFFFFFFFFFFFFE8
    0029E6: A1 leqi        
    0029E7: 18 fjp            0000000000002A74
    0029F0: 38 lca            0000000000002AD0
    0029F9: 05 lao            000000000000315E
    002A02: 76 swp            0000000000000008
    002A0B: 7B ldci           0000000000000009
    002A14: 76 swp            0000000000000008
    002A1D: 7B ldci           0000000000000009
    002A26: 0F csp            0000000000000006
    002A28: 0F csp            0000000000000005
    002A2A: 75 dmp            0000000000000008
debug> ! trace at the top of the for loop, and break the line after
debug> tpi $29e7
debug> b stop9
debug> r

 241:      1: b      writeln('Step me!');
 242:      2: t*     for i := 1 to 3 do writeln('Hi there!');    
 243:      0:    

Hi there!

 241:      1: b      writeln('Step me!');
 242:      3: t*     for i := 1 to 3 do writeln('Hi there!');    
 243:      0:    

Hi there!

 241:      1: b      writeln('Step me!');
 242:      4: t*     for i := 1 to 3 do writeln('Hi there!');    
 243:      0:    

Hi there!

=== break ===

  43:      0:    
  44:      1: b* procedure stop9; begin end;
  45:      0:    

debug> ret

 245:      1:    
 246:      1:  * end.

debug> 
debug> ! Test system variables
debug> ! This must be done at the end since it corrups the variables.
debug> p @pc$

2AC6

debug> st @pc $1234
debug> p @pc$

1234

debug> 
debug> p @sp$

FFFFA0

debug> st @sp $1234
debug> p @sp$

1234

debug> 
debug> p @mp$

FFFFC8

debug> st @mp $1234
debug> p @mp$

1234

debug> 
debug> p @np$

3BF8

debug> st @np $1234
debug> p @np$

1234

debug> 
debug> ! these variables can't be changed
debug> p @constants

10960

debug> p @heapbottom

15288

debug> 
debug> ! exit complete
debug> q

program complete
