Compiling debug_test1...
P6 Pascal compiler vs. 0.2.x
Pascal-P6 complies with the requirements of Pascaline version 0.4
and the following annexes: A,B,C,E.


     1       -8 module debug_test1(output); 
     2       -8  
     3       -8 procedure writehi; 
     4      -16  
     5      -16 begin 
     6        7  
     7        7     writeln('this is debug test1') 
     8       15  
     9       15 end; 
    10       18  
    11       18 begin 
    12       18  
    13       18 end. 

Errors in program: 0
Compiling debug_test...
P6 Pascal compiler vs. 0.2.x
Pascal-P6 complies with the requirements of Pascaline version 0.4
and the following annexes: A,B,C,E.


     1       -8 program debug_test(output); 
     2       -8  
     3       -8 joins debug_test1; 
     4        1  
     5        1 type 
     6       -8     enum = (one, two, three); 
     7       -8     sub = 1..10; 
     8       -8     a10 = array 10 of integer; 
     9       -8     r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real;  
    10       -8                a: a10 end; 
    11       -8     r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real;  
    12       -8                 rec: r; a: a10 end; 
    13       -8     a2 = array 10 of r2; 
    14       -8  
    15       -8 var i, x, i2: integer; 
    16       -8     c: char; 
    17       -8     b: boolean; 
    18       -8     e: enum; 
    19       -8     sr: sub; 
    20       -8     f: real; 
    21       -8     rv: r2; 
    22       -8     a: a10; 
    23       -8     ar: a2; 
    24       -8     pi: ^integer; 
    25       -8  
    26       -8 procedure stop1; begin end; 
    27        2  
    28        2 procedure stop2; begin end; 
    29        3  
    30        3 procedure stop3; begin end; 
    31        4  
    32        4 procedure traceme; begin end; 
    33        5  
    34        5 procedure stop4; begin end; 
    35        6  
    36        6 procedure stop5; begin end; 
    37        7  
    38        7 procedure stop6; begin end; 
    39        8  
    40        8 procedure stop7; begin end; 
    41        9  
    42        9 procedure stop8; begin end; 
    43       10  
    44       10 procedure stop9; begin end; 
    45       11  
    46       11 procedure dostuff; 
    47       11  
    48       11 var i: integer; 
    49      -24  
    50      -24 begin 
    51       11  
    52       11     for i := 1 to 4 do writeln('iteration: ', i); 
    53       44  
    54       44 end; 
    55       45  
    56       45 procedure proc2(i: integer; c: char); 
    57       45  
    58       45 var a: integer; 
    59      -24     b: char; 
    60      -25     d: ^integer; 
    61      -36     e: ^integer; 
    62      -44  
    63      -44 begin 
    64       45  
    65       45     a := 75; 
    66       47     b := '6'; 
    67       50  
    68       50     stop3; 
    69       51  
    70       51     writeln('Step past me!'); 
    71       61     writeln('And me too!'); 
    72       71     writeln('1'); 
    73       78     writeln('2'); 
    74       85     writeln('3'); 
    75       92     traceme; 
    76       93     writeln('4'); 
    77      100     stop4; 
    78      101     writeln('5'); 
    79      108     a := 12; 
    80      110     writeln('6'); 
    81      117     stop5; 
    82      118     writeln('7'); 
    83      125     writeln('8'); 
    84      132     dostuff; 
    85      133     writeln('9'); 
    86      140     writeln('10'); 
    87      150     stop6; 
    88      151     dostuff; 
    89      152     stop7; 
    90      153     new(d); 
    91      156     new(e); 
    92      159     dispose(d); 
    93      162     writeln('11'); 
    94      172     stop8; 
    95      173  
    96      173 end; 
c          unreferenced
i          unreferenced

    97      174  
    98      174 procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2); 
    99      174  
   100      174 var i, x, i2: integer; 
   101    -2464     c: char; 
   102    -2465     b: boolean; 
   103    -2466     e: enum; 
   104    -2468     sr: sub; 
   105    -2472     f: real; 
   106    -2480     rv: r2; 
   107    -2704     a: a10; 
   108    -2784     ar: a2; 
   109    -4984     ip: ^integer; 
   110    -4992  
   111    -4992 begin 
   112      180  
   113      180     x := 43; 
   114      182     c := 'b'; 
   115      185     b := false; 
   116      188     e := three; 
   117      191     sr := 8; 
   118      194     f := 56.78e10; 
   119      196  
   120      196     rv.i := 13; 
   121      198     rv.c := 'd'; 
   122      201     rv.b := false; 
   123      204     rv.e := one; 
   124      207     rv.sr := 4; 
   125      210     rv.r := 87.65e20; 
   126      212     rv.rec.i := 85; 
   127      214     rv.rec.c := 'x'; 
   128      217     rv.rec.b := true; 
   129      220     rv.rec.e := two; 
   130      223     rv.rec.sr := 4; 
   131      226     rv.rec.r := 36.32e8; 
   132      228     for i := 1 to 10 do rv.rec.a[i] := i+40; 
   133      257     for i := 1 to 10 do rv.a[i] := i+50; 
   134      286  
   135      286     for i := 1 to 10 do a[i] := i+20; 
   136      315  
   137      315     for i := 1 to 10 do begin 
   138      325  
   139      325         ar[i].i := 16; 
   140      332         ar[i].c := 'z'; 
   141      341         ar[i].b := false; 
   142      350         ar[i].e := three; 
   143      359         ar[i].sr := 2; 
   144      368         ar[i].r := 43.32e20; 
   145      376  
   146      376         ar[i].rec.i := 85; 
   147      384         ar[i].rec.c := 'k'; 
   148      393         ar[i].rec.b := true; 
   149      402         ar[i].rec.e := two; 
   150      411         ar[i].rec.sr := 7; 
   151      420         ar[i].rec.r := 23.65e8; 
   152      428         for i2 := 1 to 10 do ar[i].rec.a[i2] := i2+60; 
   153      462         for i2 := 1 to 10 do ar[i].a[i2] := i2+70; 
   154      496  
   155      496     end; 
   156      506  
   157      506     new(ip); 
   158      509     ip^ := 76; 
   159      513  
   160      513     stop2; 
   161      514  
   162      514     proc2(74, 'j'); 
   163      518  
   164      518 end; 
pa         unreferenced
pb         unreferenced
pe         unreferenced
pc         unreferenced
prec       unreferenced
pr         unreferenced
psr        unreferenced
pi         unreferenced

   165      519  
   166      519 procedure stepover1; 
   167      519  
   168      519 begin 
   169      519  
   170      519     writeln('I am stepover proc 1') 
   171      527  
   172      527 end; 
   173      530  
   174      530 procedure stepover2; 
   175      530  
   176      530 begin 
   177      530  
   178      530     writeln('I am stepover proc 2') 
   179      538  
   180      538 end; 
   181      541  
   182      541 begin 
   183      541  
   184      541     writeln('This is debug test'); 
   185      551     debug_test1.writehi; 
   186      552     x := 42; 
   187      554     c := 'a'; 
   188      557     b := true; 
   189      560     e := two; 
   190      563     sr := 5; 
   191      566     f := 12.34e10; 
   192      568  
   193      568     rv.i := 12; 
   194      570     rv.c := 'c'; 
   195      573     rv.b := false; 
   196      576     rv.e := three; 
   197      579     rv.sr := 6; 
   198      582     rv.r := 56.78e20; 
   199      584     rv.rec.i := 84; 
   200      586     rv.rec.c := 'u'; 
   201      589     rv.rec.b := true; 
   202      592     rv.rec.e := one; 
   203      595     rv.rec.sr := 3; 
   204      598     rv.rec.r := 54.32e8; 
   205      600     for i := 1 to 10 do rv.rec.a[i] := i+20; 
   206      629     for i := 1 to 10 do rv.a[i] := i+30; 
   207      658  
   208      658     for i := 1 to 10 do a[i] := i+10; 
   209      687  
   210      687     for i := 1 to 10 do begin 
   211      697  
   212      697         ar[i].i := 12; 
   213      704         ar[i].c := 'c'; 
   214      713         ar[i].b := false; 
   215      722         ar[i].e := three; 
   216      731         ar[i].sr := 1; 
   217      740         ar[i].r := 56.78e20; 
   218      748  
   219      748         ar[i].rec.i := 84; 
   220      756         ar[i].rec.c := 'u'; 
   221      765         ar[i].rec.b := true; 
   222      774         ar[i].rec.e := one; 
   223      783         ar[i].rec.sr := 3; 
   224      792         ar[i].rec.r := 54.32e8; 
   225      800         for i2 := 1 to 10 do ar[i].rec.a[i2] := i2+20; 
   226      834         for i2 := 1 to 10 do ar[i].a[i2] := i2+30; 
   227      868  
   228      868     end; 
   229      878  
   230      878     new(pi); 
   231      881     pi^ := 42; 
   232      885  
   233      885     stop1; 
   234      886  
   235      886     proc1(83, 'g', true, two, 7, 98.76, rv, ar); 
   236      899  
   237      899     stepover1; 
   238      900  
   239      900     stepover2; 
   240      901  
   241      901     writeln('Step me!'); 
   242      911  
   243      911     x := 1; 
   244      913     x := x+1; 
   245      917  
   246      917     for i := 1 to 3 do writeln('Hi there!');     
   247      947  
   248      947     stop9; 
   249      948  
   250      948 end. 

Errors in program: 0
P6 Pascal interpreter vs. 0.2.x

Assembling/loading program
Running program


P6 debug mode


 183:      1:    
 184:      1:  *     writeln('This is debug test');
 185:      0:        debug_test1.writehi;

debug> !
debug> ! Debug mode test input file.
debug> !
debug> 
debug> !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
debug> !
debug> ! Source level section
debug> !
debug> ! This first part is source level only. I put the machine level commands at the
debug> ! end because they can move around with changes to the program.
debug> !
debug> h

Commands:

h|help                             Help (this command)
l                   [m] [s[ e|:l]  List source lines
lc                  [m] [s[ e|:l]  List source and machine lines coordinated
li                  [s[ e|:l]      List machine instructions
p                   v              Print expression
d[b|l][8|16|32|64]  [s[ e|:l]      Dump memory
e                   a v[ v]...     Enter byte values to memory address
st                  d v            Set program variable
pg                                 Print all globals
pl                  [n]            print locals for current/number of enclosing
                                   blocks
pp                  [n]            print parameters for current/number of
                                   enclosing blocks
ds                                 Dump storage parameters
dd                  [n]            Dump display frames
df                  [n]            Dump frames formatted (call trace)
dst                 [n]            Dump stack words
b                   [m] a          Place breakpoint at source line
                                   number/routine
tp                  [m] a          Place tracepoint at source line
                                   number/routine
bi                  a              Place breakpoint at instruction
tpi                 a              Place tracepoint at instruction
c                   [a]            Clear breakpoint/all breakpoints
lb                                 List active breakpoints
w                   a              Watch variable
lw                                 List watch table
cw                  [n]            Clear watch table entry/all watch entries
lia                                List instruction analyzer buffer
lsa                                List source analyzer buffer
s                   [n]            Step next source line execution
ss                  [n]            Step next source line execution silently
si                  [n]            Step instructions
sis                 [n]            Step instructions silently
so                  [n]            Step over next source line execution
sso                 [n]            Step over next source line execution silently
sio                 [n]            Step over instructions
siso                [n]            Step over instructions silently
ret                                Return from subroutine
hs                                 Report heap space
ti                                 Turn instruction tracing on
nti                                Turn instruction tracing off
tr                                 Turn system routine tracing on
ntr                                Turn system routine tracing off
ts                                 Turn source line tracing on
nts                                Turn source line tracing off
spf                                Turn on source level profiling
nspf                               Turn off source level profiling
an                                 Turn on analyzer mode
nan                                Turn off analyzer mode
r                                  Run program from current pc
ps                                 Print current registers and instruction
q                                  Quit interpreter

!                                  Anywhere in line starts a comment

debug> ! turn on source profiling for later test
debug> spf
debug> l debug_test 1

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;

debug> l debug_test 1 100

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      0:    
  50:      0:    begin
  51:      0:    
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    
  54:      0:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      0:    
  63:      0:    begin
  64:      0:    
  65:      0:        a := 75;
  66:      0:        b := '6';
  67:      0:    
  68:      0:        stop3;
  69:      0:    
  70:      0:        writeln('Step past me!');
  71:      0:        writeln('And me too!');
  72:      0:        writeln('1');
  73:      0:        writeln('2');
  74:      0:        writeln('3');
  75:      0:        traceme;
  76:      0:        writeln('4');
  77:      0:        stop4;
  78:      0:        writeln('5');
  79:      0:        a := 12;
  80:      0:        writeln('6');
  81:      0:        stop5;
  82:      0:        writeln('7');
  83:      0:        writeln('8');
  84:      0:        dostuff;
  85:      0:        writeln('9');
  86:      0:        writeln('10');
  87:      0:        stop6;
  88:      0:        dostuff;
  89:      0:        stop7;
  90:      0:        new(d);
  91:      0:        new(e);
  92:      0:        dispose(d);
  93:      0:        writeln('11');
  94:      0:        stop8;
  95:      0:    
  96:      0:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;

debug> l debug_test 1:100

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      0:    
  50:      0:    begin
  51:      0:    
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    
  54:      0:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      0:    
  63:      0:    begin
  64:      0:    
  65:      0:        a := 75;
  66:      0:        b := '6';
  67:      0:    
  68:      0:        stop3;
  69:      0:    
  70:      0:        writeln('Step past me!');
  71:      0:        writeln('And me too!');
  72:      0:        writeln('1');
  73:      0:        writeln('2');
  74:      0:        writeln('3');
  75:      0:        traceme;
  76:      0:        writeln('4');
  77:      0:        stop4;
  78:      0:        writeln('5');
  79:      0:        a := 12;
  80:      0:        writeln('6');
  81:      0:        stop5;
  82:      0:        writeln('7');
  83:      0:        writeln('8');
  84:      0:        dostuff;
  85:      0:        writeln('9');
  86:      0:        writeln('10');
  87:      0:        stop6;
  88:      0:        dostuff;
  89:      0:        stop7;
  90:      0:        new(d);
  91:      0:        new(e);
  92:      0:        dispose(d);
  93:      0:        writeln('11');
  94:      0:        stop8;
  95:      0:    
  96:      0:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;

debug> l debug_test 5

   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    

debug> l debug_test 5 100

   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      0:    
  50:      0:    begin
  51:      0:    
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    
  54:      0:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      0:    
  63:      0:    begin
  64:      0:    
  65:      0:        a := 75;
  66:      0:        b := '6';
  67:      0:    
  68:      0:        stop3;
  69:      0:    
  70:      0:        writeln('Step past me!');
  71:      0:        writeln('And me too!');
  72:      0:        writeln('1');
  73:      0:        writeln('2');
  74:      0:        writeln('3');
  75:      0:        traceme;
  76:      0:        writeln('4');
  77:      0:        stop4;
  78:      0:        writeln('5');
  79:      0:        a := 12;
  80:      0:        writeln('6');
  81:      0:        stop5;
  82:      0:        writeln('7');
  83:      0:        writeln('8');
  84:      0:        dostuff;
  85:      0:        writeln('9');
  86:      0:        writeln('10');
  87:      0:        stop6;
  88:      0:        dostuff;
  89:      0:        stop7;
  90:      0:        new(d);
  91:      0:        new(e);
  92:      0:        dispose(d);
  93:      0:        writeln('11');
  94:      0:        stop8;
  95:      0:    
  96:      0:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;

debug> l debug_test 5:100

   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      0:    
  50:      0:    begin
  51:      0:    
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    
  54:      0:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      0:    
  63:      0:    begin
  64:      0:    
  65:      0:        a := 75;
  66:      0:        b := '6';
  67:      0:    
  68:      0:        stop3;
  69:      0:    
  70:      0:        writeln('Step past me!');
  71:      0:        writeln('And me too!');
  72:      0:        writeln('1');
  73:      0:        writeln('2');
  74:      0:        writeln('3');
  75:      0:        traceme;
  76:      0:        writeln('4');
  77:      0:        stop4;
  78:      0:        writeln('5');
  79:      0:        a := 12;
  80:      0:        writeln('6');
  81:      0:        stop5;
  82:      0:        writeln('7');
  83:      0:        writeln('8');
  84:      0:        dostuff;
  85:      0:        writeln('9');
  86:      0:        writeln('10');
  87:      0:        stop6;
  88:      0:        dostuff;
  89:      0:        stop7;
  90:      0:        new(d);
  91:      0:        new(e);
  92:      0:        dispose(d);
  93:      0:        writeln('11');
  94:      0:        stop8;
  95:      0:    
  96:      0:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;
 101:      0:        c: char;
 102:      0:        b: boolean;
 103:      0:        e: enum;
 104:      0:        sr: sub;

debug> lc debug_test1 1

   1:      1:    module debug_test1(output);
   2:      0:    
    00004A: AE mrkl*          0000000000000002
    000053: AE mrkl*          0000000000000003
   3:      0:    procedure writehi;
    000053: AE mrkl*          0000000000000003
    00005C: AE mrkl*          0000000000000004
   4:      0:    
    00005C: AE mrkl*          0000000000000004
    000065: AE mrkl*          0000000000000005
   5:      0:    begin
    000065: AE mrkl*          0000000000000005
    00006E: AE mrkl*          0000000000000005
    000077: 0B mst         01,0000000000000000,0000000000000020
    000089: AE mrkl*          0000000000000006
   6:      0:    
    000089: AE mrkl*          0000000000000006
    000092: AE mrkl*          0000000000000007
   7:      0:        writeln('this is debug test1')
    000092: AE mrkl*          0000000000000007
    00009B: 38 lca            0000000000003106
    0000A4: 7B ldci           0000000000000013
    0000AD: 76 swp            0000000000000008
    0000B6: 05 lao            0000000000003126
    0000BF: 76 swp            0000000000000010
    0000C8: FB cpl         
    0000C9: 0F csp            0000000000000006
    0000CB: 0F csp            0000000000000005
    0000CD: 75 dmp            0000000000000008
    0000D6: AE mrkl*          0000000000000008
   8:      0:    
    0000D6: AE mrkl*          0000000000000008
    0000DF: AE mrkl*          0000000000000009
   9:      0:    end;
    0000DF: AE mrkl*          0000000000000009
    0000E8: 0E retp           0000000000000000
    0000F1: AE mrkl*          000000000000000A
  10:      1:    
    0000F1: AE mrkl*          000000000000000A
    0000FA: AE mrkl*          000000000000000B

debug> lc debug_test1 1 100

   1:      1:    module debug_test1(output);
   2:      0:    
    00004A: AE mrkl*          0000000000000002
    000053: AE mrkl*          0000000000000003
   3:      0:    procedure writehi;
    000053: AE mrkl*          0000000000000003
    00005C: AE mrkl*          0000000000000004
   4:      0:    
    00005C: AE mrkl*          0000000000000004
    000065: AE mrkl*          0000000000000005
   5:      0:    begin
    000065: AE mrkl*          0000000000000005
    00006E: AE mrkl*          0000000000000005
    000077: 0B mst         01,0000000000000000,0000000000000020
    000089: AE mrkl*          0000000000000006
   6:      0:    
    000089: AE mrkl*          0000000000000006
    000092: AE mrkl*          0000000000000007
   7:      0:        writeln('this is debug test1')
    000092: AE mrkl*          0000000000000007
    00009B: 38 lca            0000000000003106
    0000A4: 7B ldci           0000000000000013
    0000AD: 76 swp            0000000000000008
    0000B6: 05 lao            0000000000003126
    0000BF: 76 swp            0000000000000010
    0000C8: FB cpl         
    0000C9: 0F csp            0000000000000006
    0000CB: 0F csp            0000000000000005
    0000CD: 75 dmp            0000000000000008
    0000D6: AE mrkl*          0000000000000008
   8:      0:    
    0000D6: AE mrkl*          0000000000000008
    0000DF: AE mrkl*          0000000000000009
   9:      0:    end;
    0000DF: AE mrkl*          0000000000000009
    0000E8: 0E retp           0000000000000000
    0000F1: AE mrkl*          000000000000000A
  10:      1:    
    0000F1: AE mrkl*          000000000000000A
    0000FA: AE mrkl*          000000000000000B
  11:      2:    begin
    0000FA: AE mrkl*          000000000000000B
    000103: AE mrkl*          000000000000000B
    00010C: 0B mst         00,0000000000000000,0000000000000000
    00011E: AE mrkl*          000000000000000C
  12:      1:    
    00011E: AE mrkl*          000000000000000C
    000127: AE mrkl*          000000000000000D
  13:      1:    end.
    000127: AE mrkl*          000000000000000D
    000130: 0E retp           0000000000000000
    000139: 0B mst         00,0000000000000000,0000000000000000
    00014B: 0E retp           0000000000000000

debug> lc debug_test1 1:100

   1:      1:    module debug_test1(output);
   2:      0:    
    00004A: AE mrkl*          0000000000000002
    000053: AE mrkl*          0000000000000003
   3:      0:    procedure writehi;
    000053: AE mrkl*          0000000000000003
    00005C: AE mrkl*          0000000000000004
   4:      0:    
    00005C: AE mrkl*          0000000000000004
    000065: AE mrkl*          0000000000000005
   5:      0:    begin
    000065: AE mrkl*          0000000000000005
    00006E: AE mrkl*          0000000000000005
    000077: 0B mst         01,0000000000000000,0000000000000020
    000089: AE mrkl*          0000000000000006
   6:      0:    
    000089: AE mrkl*          0000000000000006
    000092: AE mrkl*          0000000000000007
   7:      0:        writeln('this is debug test1')
    000092: AE mrkl*          0000000000000007
    00009B: 38 lca            0000000000003106
    0000A4: 7B ldci           0000000000000013
    0000AD: 76 swp            0000000000000008
    0000B6: 05 lao            0000000000003126
    0000BF: 76 swp            0000000000000010
    0000C8: FB cpl         
    0000C9: 0F csp            0000000000000006
    0000CB: 0F csp            0000000000000005
    0000CD: 75 dmp            0000000000000008
    0000D6: AE mrkl*          0000000000000008
   8:      0:    
    0000D6: AE mrkl*          0000000000000008
    0000DF: AE mrkl*          0000000000000009
   9:      0:    end;
    0000DF: AE mrkl*          0000000000000009
    0000E8: 0E retp           0000000000000000
    0000F1: AE mrkl*          000000000000000A
  10:      1:    
    0000F1: AE mrkl*          000000000000000A
    0000FA: AE mrkl*          000000000000000B
  11:      2:    begin
    0000FA: AE mrkl*          000000000000000B
    000103: AE mrkl*          000000000000000B
    00010C: 0B mst         00,0000000000000000,0000000000000000
    00011E: AE mrkl*          000000000000000C
  12:      1:    
    00011E: AE mrkl*          000000000000000C
    000127: AE mrkl*          000000000000000D
  13:      1:    end.
    000127: AE mrkl*          000000000000000D
    000130: 0E retp           0000000000000000
    000139: 0B mst         00,0000000000000000,0000000000000000
    00014B: 0E retp           0000000000000000

debug> lc debug_test 5

   5:      0:    type
    00018B: AE mrkl*          0000000000000005
    000194: AE mrkl*          0000000000000006
   6:      0:        enum = (one, two, three);
    000194: AE mrkl*          0000000000000006
    00019D: AE mrkl*          0000000000000007
   7:      0:        sub = 1..10;
    00019D: AE mrkl*          0000000000000007
    0001A6: AE mrkl*          0000000000000008
   8:      0:        a10 = array 10 of integer;
    0001A6: AE mrkl*          0000000000000008
    0001AF: AE mrkl*          0000000000000009
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001AF: AE mrkl*          0000000000000009
    0001B8: AE mrkl*          000000000000000A
  10:      0:                   a: a10 end;
    0001B8: AE mrkl*          000000000000000A
    0001C1: AE mrkl*          000000000000000B
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001C1: AE mrkl*          000000000000000B
    0001CA: AE mrkl*          000000000000000C
  12:      0:                    rec: r; a: a10 end;
    0001CA: AE mrkl*          000000000000000C
    0001D3: AE mrkl*          000000000000000D
  13:      0:        a2 = array 10 of r2;
    0001D3: AE mrkl*          000000000000000D
    0001DC: AE mrkl*          000000000000000E
  14:      0:    
    0001DC: AE mrkl*          000000000000000E
    0001E5: AE mrkl*          000000000000000F

debug> lc debug_test 5 100

   5:      0:    type
    00018B: AE mrkl*          0000000000000005
    000194: AE mrkl*          0000000000000006
   6:      0:        enum = (one, two, three);
    000194: AE mrkl*          0000000000000006
    00019D: AE mrkl*          0000000000000007
   7:      0:        sub = 1..10;
    00019D: AE mrkl*          0000000000000007
    0001A6: AE mrkl*          0000000000000008
   8:      0:        a10 = array 10 of integer;
    0001A6: AE mrkl*          0000000000000008
    0001AF: AE mrkl*          0000000000000009
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001AF: AE mrkl*          0000000000000009
    0001B8: AE mrkl*          000000000000000A
  10:      0:                   a: a10 end;
    0001B8: AE mrkl*          000000000000000A
    0001C1: AE mrkl*          000000000000000B
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001C1: AE mrkl*          000000000000000B
    0001CA: AE mrkl*          000000000000000C
  12:      0:                    rec: r; a: a10 end;
    0001CA: AE mrkl*          000000000000000C
    0001D3: AE mrkl*          000000000000000D
  13:      0:        a2 = array 10 of r2;
    0001D3: AE mrkl*          000000000000000D
    0001DC: AE mrkl*          000000000000000E
  14:      0:    
    0001DC: AE mrkl*          000000000000000E
    0001E5: AE mrkl*          000000000000000F
  15:      0:    var i, x, i2: integer;
    0001E5: AE mrkl*          000000000000000F
    0001EE: AE mrkl*          0000000000000010
  16:      0:        c: char;
    0001EE: AE mrkl*          0000000000000010
    0001F7: AE mrkl*          0000000000000011
  17:      0:        b: boolean;
    0001F7: AE mrkl*          0000000000000011
    000200: AE mrkl*          0000000000000012
  18:      0:        e: enum;
    000200: AE mrkl*          0000000000000012
    000209: AE mrkl*          0000000000000013
  19:      0:        sr: sub;
    000209: AE mrkl*          0000000000000013
    000212: AE mrkl*          0000000000000014
  20:      0:        f: real;
    000212: AE mrkl*          0000000000000014
    00021B: AE mrkl*          0000000000000015
  21:      0:        rv: r2;
    00021B: AE mrkl*          0000000000000015
    000224: AE mrkl*          0000000000000016
  22:      0:        a: a10;
    000224: AE mrkl*          0000000000000016
    00022D: AE mrkl*          0000000000000017
  23:      0:        ar: a2;
    00022D: AE mrkl*          0000000000000017
    000236: AE mrkl*          0000000000000018
  24:      0:        pi: ^integer;
    000236: AE mrkl*          0000000000000018
    00023F: AE mrkl*          0000000000000019
  25:      0:    
    00023F: AE mrkl*          0000000000000019
    000248: AE mrkl*          000000000000001A
  26:      0:    procedure stop1; begin end;
    000248: AE mrkl*          000000000000001A
    000251: AE mrkl*          000000000000001A
    00025A: 0B mst         01,0000000000000000,0000000000000000
    00026C: 0E retp           0000000000000000
    000275: AE mrkl*          000000000000001B
  27:      0:    
    000275: AE mrkl*          000000000000001B
    00027E: AE mrkl*          000000000000001C
  28:      0:    procedure stop2; begin end;
    00027E: AE mrkl*          000000000000001C
    000287: AE mrkl*          000000000000001C
    000290: 0B mst         01,0000000000000000,0000000000000000
    0002A2: 0E retp           0000000000000000
    0002AB: AE mrkl*          000000000000001D
  29:      0:    
    0002AB: AE mrkl*          000000000000001D
    0002B4: AE mrkl*          000000000000001E
  30:      0:    procedure stop3; begin end;
    0002B4: AE mrkl*          000000000000001E
    0002BD: AE mrkl*          000000000000001E
    0002C6: 0B mst         01,0000000000000000,0000000000000000
    0002D8: 0E retp           0000000000000000
    0002E1: AE mrkl*          000000000000001F
  31:      0:    
    0002E1: AE mrkl*          000000000000001F
    0002EA: AE mrkl*          0000000000000020
  32:      0:    procedure traceme; begin end;
    0002EA: AE mrkl*          0000000000000020
    0002F3: AE mrkl*          0000000000000020
    0002FC: 0B mst         01,0000000000000000,0000000000000000
    00030E: 0E retp           0000000000000000
    000317: AE mrkl*          0000000000000021
  33:      0:    
    000317: AE mrkl*          0000000000000021
    000320: AE mrkl*          0000000000000022
  34:      0:    procedure stop4; begin end;
    000320: AE mrkl*          0000000000000022
    000329: AE mrkl*          0000000000000022
    000332: 0B mst         01,0000000000000000,0000000000000000
    000344: 0E retp           0000000000000000
    00034D: AE mrkl*          0000000000000023
  35:      0:    
    00034D: AE mrkl*          0000000000000023
    000356: AE mrkl*          0000000000000024
  36:      0:    procedure stop5; begin end;
    000356: AE mrkl*          0000000000000024
    00035F: AE mrkl*          0000000000000024
    000368: 0B mst         01,0000000000000000,0000000000000000
    00037A: 0E retp           0000000000000000
    000383: AE mrkl*          0000000000000025
  37:      0:    
    000383: AE mrkl*          0000000000000025
    00038C: AE mrkl*          0000000000000026
  38:      0:    procedure stop6; begin end;
    00038C: AE mrkl*          0000000000000026
    000395: AE mrkl*          0000000000000026
    00039E: 0B mst         01,0000000000000000,0000000000000000
    0003B0: 0E retp           0000000000000000
    0003B9: AE mrkl*          0000000000000027
  39:      0:    
    0003B9: AE mrkl*          0000000000000027
    0003C2: AE mrkl*          0000000000000028
  40:      0:    procedure stop7; begin end;
    0003C2: AE mrkl*          0000000000000028
    0003CB: AE mrkl*          0000000000000028
    0003D4: 0B mst         01,0000000000000000,0000000000000000
    0003E6: 0E retp           0000000000000000
    0003EF: AE mrkl*          0000000000000029
  41:      0:    
    0003EF: AE mrkl*          0000000000000029
    0003F8: AE mrkl*          000000000000002A
  42:      0:    procedure stop8; begin end;
    0003F8: AE mrkl*          000000000000002A
    000401: AE mrkl*          000000000000002A
    00040A: 0B mst         01,0000000000000000,0000000000000000
    00041C: 0E retp           0000000000000000
    000425: AE mrkl*          000000000000002B
  43:      0:    
    000425: AE mrkl*          000000000000002B
    00042E: AE mrkl*          000000000000002C
  44:      0:    procedure stop9; begin end;
    00042E: AE mrkl*          000000000000002C
    000437: AE mrkl*          000000000000002C
    000440: 0B mst         01,0000000000000000,0000000000000000
    000452: 0E retp           0000000000000000
    00045B: AE mrkl*          000000000000002D
  45:      0:    
    00045B: AE mrkl*          000000000000002D
    000464: AE mrkl*          000000000000002E
  46:      0:    procedure dostuff;
    000464: AE mrkl*          000000000000002E
    00046D: AE mrkl*          000000000000002F
  47:      0:    
    00046D: AE mrkl*          000000000000002F
    000476: AE mrkl*          0000000000000030
  48:      0:    var i: integer;
    000476: AE mrkl*          0000000000000030
    00047F: AE mrkl*          0000000000000031
  49:      0:    
    00047F: AE mrkl*          0000000000000031
    000488: AE mrkl*          0000000000000032
  50:      0:    begin
    000488: AE mrkl*          0000000000000032
    000491: AE mrkl*          0000000000000032
    00049A: 0B mst         01,0000000000000018,0000000000000020
    0004AC: AE mrkl*          0000000000000033
  51:      0:    
    0004AC: AE mrkl*          0000000000000033
    0004B5: AE mrkl*          0000000000000034
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
    0004B5: AE mrkl*          0000000000000034
    0004BE: 7B ldci           0000000000000001
    0004C7: 02 stri        02,FFFFFFFFFFFFFFE0
    0004D1: 7B ldci           0000000000000004
    0004DA: 02 stri        02,FFFFFFFFFFFFFFD8
    0004E4: 00 lodi        02,FFFFFFFFFFFFFFE0
    0004EE: 02 stri        02,FFFFFFFFFFFFFFE8
    0004F8: AE mrkl*          0000000000000034
    000501: 00 lodi        02,FFFFFFFFFFFFFFE8
    00050B: 00 lodi        02,FFFFFFFFFFFFFFD8
    000515: A1 leqi        
    000516: 18 fjp            00000000000005B3
    00051F: 38 lca            00000000000030E3
    000528: 7B ldci           000000000000000B
    000531: 76 swp            0000000000000008
    00053A: 05 lao            0000000000003126
    000543: 76 swp            0000000000000010
    00054C: FB cpl         
    00054D: 0F csp            0000000000000006
    00054F: 00 lodi        02,FFFFFFFFFFFFFFE8
    000559: 7B ldci           000000000000000B
    000562: 0F csp            0000000000000008
    000564: 0F csp            0000000000000005
    000566: 75 dmp            0000000000000008
    00056F: 00 lodi        02,FFFFFFFFFFFFFFE8
    000579: 00 lodi        02,FFFFFFFFFFFFFFD8
    000583: 89 equi        
    000584: 77 tjp            00000000000005B3
    00058D: 00 lodi        02,FFFFFFFFFFFFFFE8
    000597: 0A inci           0000000000000001
    0005A0: 02 stri        02,FFFFFFFFFFFFFFE8
    0005AA: 17 ujp            00000000000004F8
    0005B3: AE mrkl*          0000000000000034
    0005BC: 04 lda         02,FFFFFFFFFFFFFFE8
    0005C6: BD inv         
    0005C7: AE mrkl*          0000000000000035
  53:      0:    
    0005C7: AE mrkl*          0000000000000035
    0005D0: AE mrkl*          0000000000000036
  54:      0:    end;
    0005D0: AE mrkl*          0000000000000036
    0005D9: 0E retp           0000000000000000
    0005E2: AE mrkl*          0000000000000037
  55:      0:    
    0005E2: AE mrkl*          0000000000000037
    0005EB: AE mrkl*          0000000000000038
  56:      0:    procedure proc2(i: integer; c: char);
    0005EB: AE mrkl*          0000000000000038
    0005F4: AE mrkl*          0000000000000039
  57:      0:    
    0005F4: AE mrkl*          0000000000000039
    0005FD: AE mrkl*          000000000000003A
  58:      0:    var a: integer;
    0005FD: AE mrkl*          000000000000003A
    000606: AE mrkl*          000000000000003B
  59:      0:        b: char;
    000606: AE mrkl*          000000000000003B
    00060F: AE mrkl*          000000000000003C
  60:      0:        d: ^integer;
    00060F: AE mrkl*          000000000000003C
    000618: AE mrkl*          000000000000003D
  61:      0:        e: ^integer;
    000618: AE mrkl*          000000000000003D
    000621: AE mrkl*          000000000000003E
  62:      0:    
    000621: AE mrkl*          000000000000003E
    00062A: AE mrkl*          000000000000003F
  63:      0:    begin
    00062A: AE mrkl*          000000000000003F
    000633: AE mrkl*          000000000000003F
    00063C: 0B mst         01,0000000000000020,0000000000000020
    00064E: AE mrkl*          0000000000000040
  64:      0:    
    00064E: AE mrkl*          0000000000000040
    000657: AE mrkl*          0000000000000041
  65:      0:        a := 75;
    000657: AE mrkl*          0000000000000041
    000660: 7B ldci           000000000000004B
    000669: 02 stri        02,FFFFFFFFFFFFFFE8
    000673: AE mrkl*          0000000000000042
  66:      0:        b := '6';
    000673: AE mrkl*          0000000000000042
    00067C: 7F ldcc           0000000000000036
    00067E: 63 chkc           00000000000030D3
    000687: 4A strc        02,FFFFFFFFFFFFFFE7
    000691: AE mrkl*          0000000000000043
  67:      0:    
    000691: AE mrkl*          0000000000000043
    00069A: AE mrkl*          0000000000000044
  68:      0:        stop3;
    00069A: AE mrkl*          0000000000000044
    0006A3: F5 sfr            0000000000000000
    0006AC: 0C cup            00000000000002BD
    0006B5: AE mrkl*          0000000000000044
    0006BE: AE mrkl*          0000000000000045
  69:      0:    
    0006BE: AE mrkl*          0000000000000045
    0006C7: AE mrkl*          0000000000000046
  70:      0:        writeln('Step past me!');
    0006C7: AE mrkl*          0000000000000046
    0006D0: 38 lca            00000000000030BE
    0006D9: 7B ldci           000000000000000D
    0006E2: 76 swp            0000000000000008
    0006EB: 05 lao            0000000000003126
    0006F4: 76 swp            0000000000000010
    0006FD: FB cpl         
    0006FE: 0F csp            0000000000000006
    000700: 0F csp            0000000000000005
    000702: 75 dmp            0000000000000008
    00070B: AE mrkl*          0000000000000047
  71:      0:        writeln('And me too!');
    00070B: AE mrkl*          0000000000000047
    000714: 38 lca            00000000000030AB
    00071D: 7B ldci           000000000000000B
    000726: 76 swp            0000000000000008
    00072F: 05 lao            0000000000003126
    000738: 76 swp            0000000000000010
    000741: FB cpl         
    000742: 0F csp            0000000000000006
    000744: 0F csp            0000000000000005
    000746: 75 dmp            0000000000000008
    00074F: AE mrkl*          0000000000000048
  72:      0:        writeln('1');
    00074F: AE mrkl*          0000000000000048
    000758: 7F ldcc           0000000000000031
    00075A: 05 lao            0000000000003126
    000763: 76 swp            0000000000000008
    00076C: 7B ldci           0000000000000001
    000775: 0F csp            000000000000000A
    000777: 0F csp            0000000000000005
    000779: 75 dmp            0000000000000008
    000782: AE mrkl*          0000000000000049
  73:      0:        writeln('2');
    000782: AE mrkl*          0000000000000049
    00078B: 7F ldcc           0000000000000032
    00078D: 05 lao            0000000000003126
    000796: 76 swp            0000000000000008
    00079F: 7B ldci           0000000000000001
    0007A8: 0F csp            000000000000000A
    0007AA: 0F csp            0000000000000005
    0007AC: 75 dmp            0000000000000008
    0007B5: AE mrkl*          000000000000004A
  74:      0:        writeln('3');
    0007B5: AE mrkl*          000000000000004A
    0007BE: 7F ldcc           0000000000000033
    0007C0: 05 lao            0000000000003126
    0007C9: 76 swp            0000000000000008
    0007D2: 7B ldci           0000000000000001
    0007DB: 0F csp            000000000000000A
    0007DD: 0F csp            0000000000000005
    0007DF: 75 dmp            0000000000000008
    0007E8: AE mrkl*          000000000000004B
  75:      0:        traceme;
    0007E8: AE mrkl*          000000000000004B
    0007F1: F5 sfr            0000000000000000
    0007FA: 0C cup            00000000000002F3
    000803: AE mrkl*          000000000000004B
    00080C: AE mrkl*          000000000000004C
  76:      0:        writeln('4');
    00080C: AE mrkl*          000000000000004C
    000815: 7F ldcc           0000000000000034
    000817: 05 lao            0000000000003126
    000820: 76 swp            0000000000000008
    000829: 7B ldci           0000000000000001
    000832: 0F csp            000000000000000A
    000834: 0F csp            0000000000000005
    000836: 75 dmp            0000000000000008
    00083F: AE mrkl*          000000000000004D
  77:      0:        stop4;
    00083F: AE mrkl*          000000000000004D
    000848: F5 sfr            0000000000000000
    000851: 0C cup            0000000000000329
    00085A: AE mrkl*          000000000000004D
    000863: AE mrkl*          000000000000004E
  78:      0:        writeln('5');
    000863: AE mrkl*          000000000000004E
    00086C: 7F ldcc           0000000000000035
    00086E: 05 lao            0000000000003126
    000877: 76 swp            0000000000000008
    000880: 7B ldci           0000000000000001
    000889: 0F csp            000000000000000A
    00088B: 0F csp            0000000000000005
    00088D: 75 dmp            0000000000000008
    000896: AE mrkl*          000000000000004F
  79:      0:        a := 12;
    000896: AE mrkl*          000000000000004F
    00089F: 7B ldci           000000000000000C
    0008A8: 02 stri        02,FFFFFFFFFFFFFFE8
    0008B2: AE mrkl*          0000000000000050
  80:      0:        writeln('6');
    0008B2: AE mrkl*          0000000000000050
    0008BB: 7F ldcc           0000000000000036
    0008BD: 05 lao            0000000000003126
    0008C6: 76 swp            0000000000000008
    0008CF: 7B ldci           0000000000000001
    0008D8: 0F csp            000000000000000A
    0008DA: 0F csp            0000000000000005
    0008DC: 75 dmp            0000000000000008
    0008E5: AE mrkl*          0000000000000051
  81:      0:        stop5;
    0008E5: AE mrkl*          0000000000000051
    0008EE: F5 sfr            0000000000000000
    0008F7: 0C cup            000000000000035F
    000900: AE mrkl*          0000000000000051
    000909: AE mrkl*          0000000000000052
  82:      0:        writeln('7');
    000909: AE mrkl*          0000000000000052
    000912: 7F ldcc           0000000000000037
    000914: 05 lao            0000000000003126
    00091D: 76 swp            0000000000000008
    000926: 7B ldci           0000000000000001
    00092F: 0F csp            000000000000000A
    000931: 0F csp            0000000000000005
    000933: 75 dmp            0000000000000008
    00093C: AE mrkl*          0000000000000053
  83:      0:        writeln('8');
    00093C: AE mrkl*          0000000000000053
    000945: 7F ldcc           0000000000000038
    000947: 05 lao            0000000000003126
    000950: 76 swp            0000000000000008
    000959: 7B ldci           0000000000000001
    000962: 0F csp            000000000000000A
    000964: 0F csp            0000000000000005
    000966: 75 dmp            0000000000000008
    00096F: AE mrkl*          0000000000000054
  84:      0:        dostuff;
    00096F: AE mrkl*          0000000000000054
    000978: F5 sfr            0000000000000000
    000981: 0C cup            000000000000047F
    00098A: AE mrkl*          0000000000000054
    000993: AE mrkl*          0000000000000055
  85:      0:        writeln('9');
    000993: AE mrkl*          0000000000000055
    00099C: 7F ldcc           0000000000000039
    00099E: 05 lao            0000000000003126
    0009A7: 76 swp            0000000000000008
    0009B0: 7B ldci           0000000000000001
    0009B9: 0F csp            000000000000000A
    0009BB: 0F csp            0000000000000005
    0009BD: 75 dmp            0000000000000008
    0009C6: AE mrkl*          0000000000000056
  86:      0:        writeln('10');
    0009C6: AE mrkl*          0000000000000056
    0009CF: 38 lca            00000000000030A1
    0009D8: 7B ldci           0000000000000002
    0009E1: 76 swp            0000000000000008
    0009EA: 05 lao            0000000000003126
    0009F3: 76 swp            0000000000000010
    0009FC: FB cpl         
    0009FD: 0F csp            0000000000000006
    0009FF: 0F csp            0000000000000005
    000A01: 75 dmp            0000000000000008
    000A0A: AE mrkl*          0000000000000057
  87:      0:        stop6;
    000A0A: AE mrkl*          0000000000000057
    000A13: F5 sfr            0000000000000000
    000A1C: 0C cup            0000000000000395
    000A25: AE mrkl*          0000000000000057
    000A2E: AE mrkl*          0000000000000058
  88:      0:        dostuff;
    000A2E: AE mrkl*          0000000000000058
    000A37: F5 sfr            0000000000000000
    000A40: 0C cup            000000000000047F
    000A49: AE mrkl*          0000000000000058
    000A52: AE mrkl*          0000000000000059
  89:      0:        stop7;
    000A52: AE mrkl*          0000000000000059
    000A5B: F5 sfr            0000000000000000
    000A64: 0C cup            00000000000003CB
    000A6D: AE mrkl*          0000000000000059
    000A76: AE mrkl*          000000000000005A
  90:      0:        new(d);
    000A76: AE mrkl*          000000000000005A
    000A7F: 04 lda         02,FFFFFFFFFFFFFFDC
    000A89: 7B ldci           0000000000000008
    000A92: 0F csp            0000000000000004
    000A94: AE mrkl*          000000000000005B
  91:      0:        new(e);
    000A94: AE mrkl*          000000000000005B
    000A9D: 04 lda         02,FFFFFFFFFFFFFFD4
    000AA7: 7B ldci           0000000000000008
    000AB0: 0F csp            0000000000000004
    000AB2: AE mrkl*          000000000000005C
  92:      0:        dispose(d);
    000AB2: AE mrkl*          000000000000005C
    000ABB: 69 loda        02,FFFFFFFFFFFFFFDC
    000AC5: 7B ldci           0000000000000008
    000ACE: 0F csp            000000000000001A
    000AD0: AE mrkl*          000000000000005D
  93:      0:        writeln('11');
    000AD0: AE mrkl*          000000000000005D
    000AD9: 38 lca            0000000000003097
    000AE2: 7B ldci           0000000000000002
    000AEB: 76 swp            0000000000000008
    000AF4: 05 lao            0000000000003126
    000AFD: 76 swp            0000000000000010
    000B06: FB cpl         
    000B07: 0F csp            0000000000000006
    000B09: 0F csp            0000000000000005
    000B0B: 75 dmp            0000000000000008
    000B14: AE mrkl*          000000000000005E
  94:      0:        stop8;
    000B14: AE mrkl*          000000000000005E
    000B1D: F5 sfr            0000000000000000
    000B26: 0C cup            0000000000000401
    000B2F: AE mrkl*          000000000000005E
    000B38: AE mrkl*          000000000000005F
  95:      0:    
    000B38: AE mrkl*          000000000000005F
    000B41: AE mrkl*          0000000000000060
  96:      0:    end;
    000B41: AE mrkl*          0000000000000060
    000B4A: 0E retp           0000000000000010
    000B53: AE mrkl*          0000000000000061
  97:      0:    
    000B53: AE mrkl*          0000000000000061
    000B5C: AE mrkl*          0000000000000062
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
    000B5C: AE mrkl*          0000000000000062
    000B65: AE mrkl*          0000000000000063
  99:      0:    
    000B65: AE mrkl*          0000000000000063
    000B6E: AE mrkl*          0000000000000064
 100:      0:    var i, x, i2: integer;
    000B6E: AE mrkl*          0000000000000064
    000B77: AE mrkl*          0000000000000065

debug> lc debug_test 5:100

   5:      0:    type
    00018B: AE mrkl*          0000000000000005
    000194: AE mrkl*          0000000000000006
   6:      0:        enum = (one, two, three);
    000194: AE mrkl*          0000000000000006
    00019D: AE mrkl*          0000000000000007
   7:      0:        sub = 1..10;
    00019D: AE mrkl*          0000000000000007
    0001A6: AE mrkl*          0000000000000008
   8:      0:        a10 = array 10 of integer;
    0001A6: AE mrkl*          0000000000000008
    0001AF: AE mrkl*          0000000000000009
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001AF: AE mrkl*          0000000000000009
    0001B8: AE mrkl*          000000000000000A
  10:      0:                   a: a10 end;
    0001B8: AE mrkl*          000000000000000A
    0001C1: AE mrkl*          000000000000000B
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001C1: AE mrkl*          000000000000000B
    0001CA: AE mrkl*          000000000000000C
  12:      0:                    rec: r; a: a10 end;
    0001CA: AE mrkl*          000000000000000C
    0001D3: AE mrkl*          000000000000000D
  13:      0:        a2 = array 10 of r2;
    0001D3: AE mrkl*          000000000000000D
    0001DC: AE mrkl*          000000000000000E
  14:      0:    
    0001DC: AE mrkl*          000000000000000E
    0001E5: AE mrkl*          000000000000000F
  15:      0:    var i, x, i2: integer;
    0001E5: AE mrkl*          000000000000000F
    0001EE: AE mrkl*          0000000000000010
  16:      0:        c: char;
    0001EE: AE mrkl*          0000000000000010
    0001F7: AE mrkl*          0000000000000011
  17:      0:        b: boolean;
    0001F7: AE mrkl*          0000000000000011
    000200: AE mrkl*          0000000000000012
  18:      0:        e: enum;
    000200: AE mrkl*          0000000000000012
    000209: AE mrkl*          0000000000000013
  19:      0:        sr: sub;
    000209: AE mrkl*          0000000000000013
    000212: AE mrkl*          0000000000000014
  20:      0:        f: real;
    000212: AE mrkl*          0000000000000014
    00021B: AE mrkl*          0000000000000015
  21:      0:        rv: r2;
    00021B: AE mrkl*          0000000000000015
    000224: AE mrkl*          0000000000000016
  22:      0:        a: a10;
    000224: AE mrkl*          0000000000000016
    00022D: AE mrkl*          0000000000000017
  23:      0:        ar: a2;
    00022D: AE mrkl*          0000000000000017
    000236: AE mrkl*          0000000000000018
  24:      0:        pi: ^integer;
    000236: AE mrkl*          0000000000000018
    00023F: AE mrkl*          0000000000000019
  25:      0:    
    00023F: AE mrkl*          0000000000000019
    000248: AE mrkl*          000000000000001A
  26:      0:    procedure stop1; begin end;
    000248: AE mrkl*          000000000000001A
    000251: AE mrkl*          000000000000001A
    00025A: 0B mst         01,0000000000000000,0000000000000000
    00026C: 0E retp           0000000000000000
    000275: AE mrkl*          000000000000001B
  27:      0:    
    000275: AE mrkl*          000000000000001B
    00027E: AE mrkl*          000000000000001C
  28:      0:    procedure stop2; begin end;
    00027E: AE mrkl*          000000000000001C
    000287: AE mrkl*          000000000000001C
    000290: 0B mst         01,0000000000000000,0000000000000000
    0002A2: 0E retp           0000000000000000
    0002AB: AE mrkl*          000000000000001D
  29:      0:    
    0002AB: AE mrkl*          000000000000001D
    0002B4: AE mrkl*          000000000000001E
  30:      0:    procedure stop3; begin end;
    0002B4: AE mrkl*          000000000000001E
    0002BD: AE mrkl*          000000000000001E
    0002C6: 0B mst         01,0000000000000000,0000000000000000
    0002D8: 0E retp           0000000000000000
    0002E1: AE mrkl*          000000000000001F
  31:      0:    
    0002E1: AE mrkl*          000000000000001F
    0002EA: AE mrkl*          0000000000000020
  32:      0:    procedure traceme; begin end;
    0002EA: AE mrkl*          0000000000000020
    0002F3: AE mrkl*          0000000000000020
    0002FC: 0B mst         01,0000000000000000,0000000000000000
    00030E: 0E retp           0000000000000000
    000317: AE mrkl*          0000000000000021
  33:      0:    
    000317: AE mrkl*          0000000000000021
    000320: AE mrkl*          0000000000000022
  34:      0:    procedure stop4; begin end;
    000320: AE mrkl*          0000000000000022
    000329: AE mrkl*          0000000000000022
    000332: 0B mst         01,0000000000000000,0000000000000000
    000344: 0E retp           0000000000000000
    00034D: AE mrkl*          0000000000000023
  35:      0:    
    00034D: AE mrkl*          0000000000000023
    000356: AE mrkl*          0000000000000024
  36:      0:    procedure stop5; begin end;
    000356: AE mrkl*          0000000000000024
    00035F: AE mrkl*          0000000000000024
    000368: 0B mst         01,0000000000000000,0000000000000000
    00037A: 0E retp           0000000000000000
    000383: AE mrkl*          0000000000000025
  37:      0:    
    000383: AE mrkl*          0000000000000025
    00038C: AE mrkl*          0000000000000026
  38:      0:    procedure stop6; begin end;
    00038C: AE mrkl*          0000000000000026
    000395: AE mrkl*          0000000000000026
    00039E: 0B mst         01,0000000000000000,0000000000000000
    0003B0: 0E retp           0000000000000000
    0003B9: AE mrkl*          0000000000000027
  39:      0:    
    0003B9: AE mrkl*          0000000000000027
    0003C2: AE mrkl*          0000000000000028
  40:      0:    procedure stop7; begin end;
    0003C2: AE mrkl*          0000000000000028
    0003CB: AE mrkl*          0000000000000028
    0003D4: 0B mst         01,0000000000000000,0000000000000000
    0003E6: 0E retp           0000000000000000
    0003EF: AE mrkl*          0000000000000029
  41:      0:    
    0003EF: AE mrkl*          0000000000000029
    0003F8: AE mrkl*          000000000000002A
  42:      0:    procedure stop8; begin end;
    0003F8: AE mrkl*          000000000000002A
    000401: AE mrkl*          000000000000002A
    00040A: 0B mst         01,0000000000000000,0000000000000000
    00041C: 0E retp           0000000000000000
    000425: AE mrkl*          000000000000002B
  43:      0:    
    000425: AE mrkl*          000000000000002B
    00042E: AE mrkl*          000000000000002C
  44:      0:    procedure stop9; begin end;
    00042E: AE mrkl*          000000000000002C
    000437: AE mrkl*          000000000000002C
    000440: 0B mst         01,0000000000000000,0000000000000000
    000452: 0E retp           0000000000000000
    00045B: AE mrkl*          000000000000002D
  45:      0:    
    00045B: AE mrkl*          000000000000002D
    000464: AE mrkl*          000000000000002E
  46:      0:    procedure dostuff;
    000464: AE mrkl*          000000000000002E
    00046D: AE mrkl*          000000000000002F
  47:      0:    
    00046D: AE mrkl*          000000000000002F
    000476: AE mrkl*          0000000000000030
  48:      0:    var i: integer;
    000476: AE mrkl*          0000000000000030
    00047F: AE mrkl*          0000000000000031
  49:      0:    
    00047F: AE mrkl*          0000000000000031
    000488: AE mrkl*          0000000000000032
  50:      0:    begin
    000488: AE mrkl*          0000000000000032
    000491: AE mrkl*          0000000000000032
    00049A: 0B mst         01,0000000000000018,0000000000000020
    0004AC: AE mrkl*          0000000000000033
  51:      0:    
    0004AC: AE mrkl*          0000000000000033
    0004B5: AE mrkl*          0000000000000034
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
    0004B5: AE mrkl*          0000000000000034
    0004BE: 7B ldci           0000000000000001
    0004C7: 02 stri        02,FFFFFFFFFFFFFFE0
    0004D1: 7B ldci           0000000000000004
    0004DA: 02 stri        02,FFFFFFFFFFFFFFD8
    0004E4: 00 lodi        02,FFFFFFFFFFFFFFE0
    0004EE: 02 stri        02,FFFFFFFFFFFFFFE8
    0004F8: AE mrkl*          0000000000000034
    000501: 00 lodi        02,FFFFFFFFFFFFFFE8
    00050B: 00 lodi        02,FFFFFFFFFFFFFFD8
    000515: A1 leqi        
    000516: 18 fjp            00000000000005B3
    00051F: 38 lca            00000000000030E3
    000528: 7B ldci           000000000000000B
    000531: 76 swp            0000000000000008
    00053A: 05 lao            0000000000003126
    000543: 76 swp            0000000000000010
    00054C: FB cpl         
    00054D: 0F csp            0000000000000006
    00054F: 00 lodi        02,FFFFFFFFFFFFFFE8
    000559: 7B ldci           000000000000000B
    000562: 0F csp            0000000000000008
    000564: 0F csp            0000000000000005
    000566: 75 dmp            0000000000000008
    00056F: 00 lodi        02,FFFFFFFFFFFFFFE8
    000579: 00 lodi        02,FFFFFFFFFFFFFFD8
    000583: 89 equi        
    000584: 77 tjp            00000000000005B3
    00058D: 00 lodi        02,FFFFFFFFFFFFFFE8
    000597: 0A inci           0000000000000001
    0005A0: 02 stri        02,FFFFFFFFFFFFFFE8
    0005AA: 17 ujp            00000000000004F8
    0005B3: AE mrkl*          0000000000000034
    0005BC: 04 lda         02,FFFFFFFFFFFFFFE8
    0005C6: BD inv         
    0005C7: AE mrkl*          0000000000000035
  53:      0:    
    0005C7: AE mrkl*          0000000000000035
    0005D0: AE mrkl*          0000000000000036
  54:      0:    end;
    0005D0: AE mrkl*          0000000000000036
    0005D9: 0E retp           0000000000000000
    0005E2: AE mrkl*          0000000000000037
  55:      0:    
    0005E2: AE mrkl*          0000000000000037
    0005EB: AE mrkl*          0000000000000038
  56:      0:    procedure proc2(i: integer; c: char);
    0005EB: AE mrkl*          0000000000000038
    0005F4: AE mrkl*          0000000000000039
  57:      0:    
    0005F4: AE mrkl*          0000000000000039
    0005FD: AE mrkl*          000000000000003A
  58:      0:    var a: integer;
    0005FD: AE mrkl*          000000000000003A
    000606: AE mrkl*          000000000000003B
  59:      0:        b: char;
    000606: AE mrkl*          000000000000003B
    00060F: AE mrkl*          000000000000003C
  60:      0:        d: ^integer;
    00060F: AE mrkl*          000000000000003C
    000618: AE mrkl*          000000000000003D
  61:      0:        e: ^integer;
    000618: AE mrkl*          000000000000003D
    000621: AE mrkl*          000000000000003E
  62:      0:    
    000621: AE mrkl*          000000000000003E
    00062A: AE mrkl*          000000000000003F
  63:      0:    begin
    00062A: AE mrkl*          000000000000003F
    000633: AE mrkl*          000000000000003F
    00063C: 0B mst         01,0000000000000020,0000000000000020
    00064E: AE mrkl*          0000000000000040
  64:      0:    
    00064E: AE mrkl*          0000000000000040
    000657: AE mrkl*          0000000000000041
  65:      0:        a := 75;
    000657: AE mrkl*          0000000000000041
    000660: 7B ldci           000000000000004B
    000669: 02 stri        02,FFFFFFFFFFFFFFE8
    000673: AE mrkl*          0000000000000042
  66:      0:        b := '6';
    000673: AE mrkl*          0000000000000042
    00067C: 7F ldcc           0000000000000036
    00067E: 63 chkc           00000000000030D3
    000687: 4A strc        02,FFFFFFFFFFFFFFE7
    000691: AE mrkl*          0000000000000043
  67:      0:    
    000691: AE mrkl*          0000000000000043
    00069A: AE mrkl*          0000000000000044
  68:      0:        stop3;
    00069A: AE mrkl*          0000000000000044
    0006A3: F5 sfr            0000000000000000
    0006AC: 0C cup            00000000000002BD
    0006B5: AE mrkl*          0000000000000044
    0006BE: AE mrkl*          0000000000000045
  69:      0:    
    0006BE: AE mrkl*          0000000000000045
    0006C7: AE mrkl*          0000000000000046
  70:      0:        writeln('Step past me!');
    0006C7: AE mrkl*          0000000000000046
    0006D0: 38 lca            00000000000030BE
    0006D9: 7B ldci           000000000000000D
    0006E2: 76 swp            0000000000000008
    0006EB: 05 lao            0000000000003126
    0006F4: 76 swp            0000000000000010
    0006FD: FB cpl         
    0006FE: 0F csp            0000000000000006
    000700: 0F csp            0000000000000005
    000702: 75 dmp            0000000000000008
    00070B: AE mrkl*          0000000000000047
  71:      0:        writeln('And me too!');
    00070B: AE mrkl*          0000000000000047
    000714: 38 lca            00000000000030AB
    00071D: 7B ldci           000000000000000B
    000726: 76 swp            0000000000000008
    00072F: 05 lao            0000000000003126
    000738: 76 swp            0000000000000010
    000741: FB cpl         
    000742: 0F csp            0000000000000006
    000744: 0F csp            0000000000000005
    000746: 75 dmp            0000000000000008
    00074F: AE mrkl*          0000000000000048
  72:      0:        writeln('1');
    00074F: AE mrkl*          0000000000000048
    000758: 7F ldcc           0000000000000031
    00075A: 05 lao            0000000000003126
    000763: 76 swp            0000000000000008
    00076C: 7B ldci           0000000000000001
    000775: 0F csp            000000000000000A
    000777: 0F csp            0000000000000005
    000779: 75 dmp            0000000000000008
    000782: AE mrkl*          0000000000000049
  73:      0:        writeln('2');
    000782: AE mrkl*          0000000000000049
    00078B: 7F ldcc           0000000000000032
    00078D: 05 lao            0000000000003126
    000796: 76 swp            0000000000000008
    00079F: 7B ldci           0000000000000001
    0007A8: 0F csp            000000000000000A
    0007AA: 0F csp            0000000000000005
    0007AC: 75 dmp            0000000000000008
    0007B5: AE mrkl*          000000000000004A
  74:      0:        writeln('3');
    0007B5: AE mrkl*          000000000000004A
    0007BE: 7F ldcc           0000000000000033
    0007C0: 05 lao            0000000000003126
    0007C9: 76 swp            0000000000000008
    0007D2: 7B ldci           0000000000000001
    0007DB: 0F csp            000000000000000A
    0007DD: 0F csp            0000000000000005
    0007DF: 75 dmp            0000000000000008
    0007E8: AE mrkl*          000000000000004B
  75:      0:        traceme;
    0007E8: AE mrkl*          000000000000004B
    0007F1: F5 sfr            0000000000000000
    0007FA: 0C cup            00000000000002F3
    000803: AE mrkl*          000000000000004B
    00080C: AE mrkl*          000000000000004C
  76:      0:        writeln('4');
    00080C: AE mrkl*          000000000000004C
    000815: 7F ldcc           0000000000000034
    000817: 05 lao            0000000000003126
    000820: 76 swp            0000000000000008
    000829: 7B ldci           0000000000000001
    000832: 0F csp            000000000000000A
    000834: 0F csp            0000000000000005
    000836: 75 dmp            0000000000000008
    00083F: AE mrkl*          000000000000004D
  77:      0:        stop4;
    00083F: AE mrkl*          000000000000004D
    000848: F5 sfr            0000000000000000
    000851: 0C cup            0000000000000329
    00085A: AE mrkl*          000000000000004D
    000863: AE mrkl*          000000000000004E
  78:      0:        writeln('5');
    000863: AE mrkl*          000000000000004E
    00086C: 7F ldcc           0000000000000035
    00086E: 05 lao            0000000000003126
    000877: 76 swp            0000000000000008
    000880: 7B ldci           0000000000000001
    000889: 0F csp            000000000000000A
    00088B: 0F csp            0000000000000005
    00088D: 75 dmp            0000000000000008
    000896: AE mrkl*          000000000000004F
  79:      0:        a := 12;
    000896: AE mrkl*          000000000000004F
    00089F: 7B ldci           000000000000000C
    0008A8: 02 stri        02,FFFFFFFFFFFFFFE8
    0008B2: AE mrkl*          0000000000000050
  80:      0:        writeln('6');
    0008B2: AE mrkl*          0000000000000050
    0008BB: 7F ldcc           0000000000000036
    0008BD: 05 lao            0000000000003126
    0008C6: 76 swp            0000000000000008
    0008CF: 7B ldci           0000000000000001
    0008D8: 0F csp            000000000000000A
    0008DA: 0F csp            0000000000000005
    0008DC: 75 dmp            0000000000000008
    0008E5: AE mrkl*          0000000000000051
  81:      0:        stop5;
    0008E5: AE mrkl*          0000000000000051
    0008EE: F5 sfr            0000000000000000
    0008F7: 0C cup            000000000000035F
    000900: AE mrkl*          0000000000000051
    000909: AE mrkl*          0000000000000052
  82:      0:        writeln('7');
    000909: AE mrkl*          0000000000000052
    000912: 7F ldcc           0000000000000037
    000914: 05 lao            0000000000003126
    00091D: 76 swp            0000000000000008
    000926: 7B ldci           0000000000000001
    00092F: 0F csp            000000000000000A
    000931: 0F csp            0000000000000005
    000933: 75 dmp            0000000000000008
    00093C: AE mrkl*          0000000000000053
  83:      0:        writeln('8');
    00093C: AE mrkl*          0000000000000053
    000945: 7F ldcc           0000000000000038
    000947: 05 lao            0000000000003126
    000950: 76 swp            0000000000000008
    000959: 7B ldci           0000000000000001
    000962: 0F csp            000000000000000A
    000964: 0F csp            0000000000000005
    000966: 75 dmp            0000000000000008
    00096F: AE mrkl*          0000000000000054
  84:      0:        dostuff;
    00096F: AE mrkl*          0000000000000054
    000978: F5 sfr            0000000000000000
    000981: 0C cup            000000000000047F
    00098A: AE mrkl*          0000000000000054
    000993: AE mrkl*          0000000000000055
  85:      0:        writeln('9');
    000993: AE mrkl*          0000000000000055
    00099C: 7F ldcc           0000000000000039
    00099E: 05 lao            0000000000003126
    0009A7: 76 swp            0000000000000008
    0009B0: 7B ldci           0000000000000001
    0009B9: 0F csp            000000000000000A
    0009BB: 0F csp            0000000000000005
    0009BD: 75 dmp            0000000000000008
    0009C6: AE mrkl*          0000000000000056
  86:      0:        writeln('10');
    0009C6: AE mrkl*          0000000000000056
    0009CF: 38 lca            00000000000030A1
    0009D8: 7B ldci           0000000000000002
    0009E1: 76 swp            0000000000000008
    0009EA: 05 lao            0000000000003126
    0009F3: 76 swp            0000000000000010
    0009FC: FB cpl         
    0009FD: 0F csp            0000000000000006
    0009FF: 0F csp            0000000000000005
    000A01: 75 dmp            0000000000000008
    000A0A: AE mrkl*          0000000000000057
  87:      0:        stop6;
    000A0A: AE mrkl*          0000000000000057
    000A13: F5 sfr            0000000000000000
    000A1C: 0C cup            0000000000000395
    000A25: AE mrkl*          0000000000000057
    000A2E: AE mrkl*          0000000000000058
  88:      0:        dostuff;
    000A2E: AE mrkl*          0000000000000058
    000A37: F5 sfr            0000000000000000
    000A40: 0C cup            000000000000047F
    000A49: AE mrkl*          0000000000000058
    000A52: AE mrkl*          0000000000000059
  89:      0:        stop7;
    000A52: AE mrkl*          0000000000000059
    000A5B: F5 sfr            0000000000000000
    000A64: 0C cup            00000000000003CB
    000A6D: AE mrkl*          0000000000000059
    000A76: AE mrkl*          000000000000005A
  90:      0:        new(d);
    000A76: AE mrkl*          000000000000005A
    000A7F: 04 lda         02,FFFFFFFFFFFFFFDC
    000A89: 7B ldci           0000000000000008
    000A92: 0F csp            0000000000000004
    000A94: AE mrkl*          000000000000005B
  91:      0:        new(e);
    000A94: AE mrkl*          000000000000005B
    000A9D: 04 lda         02,FFFFFFFFFFFFFFD4
    000AA7: 7B ldci           0000000000000008
    000AB0: 0F csp            0000000000000004
    000AB2: AE mrkl*          000000000000005C
  92:      0:        dispose(d);
    000AB2: AE mrkl*          000000000000005C
    000ABB: 69 loda        02,FFFFFFFFFFFFFFDC
    000AC5: 7B ldci           0000000000000008
    000ACE: 0F csp            000000000000001A
    000AD0: AE mrkl*          000000000000005D
  93:      0:        writeln('11');
    000AD0: AE mrkl*          000000000000005D
    000AD9: 38 lca            0000000000003097
    000AE2: 7B ldci           0000000000000002
    000AEB: 76 swp            0000000000000008
    000AF4: 05 lao            0000000000003126
    000AFD: 76 swp            0000000000000010
    000B06: FB cpl         
    000B07: 0F csp            0000000000000006
    000B09: 0F csp            0000000000000005
    000B0B: 75 dmp            0000000000000008
    000B14: AE mrkl*          000000000000005E
  94:      0:        stop8;
    000B14: AE mrkl*          000000000000005E
    000B1D: F5 sfr            0000000000000000
    000B26: 0C cup            0000000000000401
    000B2F: AE mrkl*          000000000000005E
    000B38: AE mrkl*          000000000000005F
  95:      0:    
    000B38: AE mrkl*          000000000000005F
    000B41: AE mrkl*          0000000000000060
  96:      0:    end;
    000B41: AE mrkl*          0000000000000060
    000B4A: 0E retp           0000000000000010
    000B53: AE mrkl*          0000000000000061
  97:      0:    
    000B53: AE mrkl*          0000000000000061
    000B5C: AE mrkl*          0000000000000062
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
    000B5C: AE mrkl*          0000000000000062
    000B65: AE mrkl*          0000000000000063
  99:      0:    
    000B65: AE mrkl*          0000000000000063
    000B6E: AE mrkl*          0000000000000064
 100:      0:    var i, x, i2: integer;
    000B6E: AE mrkl*          0000000000000064
    000B77: AE mrkl*          0000000000000065
 101:      0:        c: char;
    000B77: AE mrkl*          0000000000000065
    000B80: AE mrkl*          0000000000000066
 102:      0:        b: boolean;
    000B80: AE mrkl*          0000000000000066
    000B89: AE mrkl*          0000000000000067
 103:      0:        e: enum;
    000B89: AE mrkl*          0000000000000067
    000B92: AE mrkl*          0000000000000068
 104:      0:        sr: sub;
    000B92: AE mrkl*          0000000000000068
    000B9B: AE mrkl*          0000000000000069

debug> li $0

    Addr    Op Ins         P  Q
----------------------------------
    000000: 14 lnp*           0000000000003B80
    000009: 15 cal            0000000000000013
    000012: 3A stp*        
    000013: AE mrkl*          0000000000000001
    00001C: F5 sfr            0000000000000000
    000025: 0C cup            00000000000000F1
    00002E: 15 cal            0000000000000154
    000037: F5 sfr            0000000000000000
    000040: 0C cup            0000000000000139
    000049: 16 ret         
debug> li $0 $100

    Addr    Op Ins         P  Q
----------------------------------
    000000: 14 lnp*           0000000000003B80
    000009: 15 cal            0000000000000013
    000012: 3A stp*        
    000013: AE mrkl*          0000000000000001
    00001C: F5 sfr            0000000000000000
    000025: 0C cup            00000000000000F1
    00002E: 15 cal            0000000000000154
    000037: F5 sfr            0000000000000000
    000040: 0C cup            0000000000000139
    000049: 16 ret         
    00004A: AE mrkl*          0000000000000002
    000053: AE mrkl*          0000000000000003
    00005C: AE mrkl*          0000000000000004
    000065: AE mrkl*          0000000000000005
    00006E: AE mrkl*          0000000000000005
    000077: 0B mst         01,0000000000000000,0000000000000020
    000089: AE mrkl*          0000000000000006
    000092: AE mrkl*          0000000000000007
    00009B: 38 lca            0000000000003106
    0000A4: 7B ldci           0000000000000013
    0000AD: 76 swp            0000000000000008
    0000B6: 05 lao            0000000000003126
    0000BF: 76 swp            0000000000000010
    0000C8: FB cpl         
    0000C9: 0F csp            0000000000000006
    0000CB: 0F csp            0000000000000005
    0000CD: 75 dmp            0000000000000008
    0000D6: AE mrkl*          0000000000000008
    0000DF: AE mrkl*          0000000000000009
    0000E8: 0E retp           0000000000000000
    0000F1: AE mrkl*          000000000000000A
    0000FA: AE mrkl*          000000000000000B
debug> li $0:100

    Addr    Op Ins         P  Q
----------------------------------
    000000: 14 lnp*           0000000000003B80
    000009: 15 cal            0000000000000013
    000012: 3A stp*        
    000013: AE mrkl*          0000000000000001
    00001C: F5 sfr            0000000000000000
    000025: 0C cup            00000000000000F1
    00002E: 15 cal            0000000000000154
    000037: F5 sfr            0000000000000000
    000040: 0C cup            0000000000000139
    000049: 16 ret         
    00004A: AE mrkl*          0000000000000002
    000053: AE mrkl*          0000000000000003
    00005C: AE mrkl*          0000000000000004
    000065: AE mrkl*          0000000000000005
    00006E: AE mrkl*          0000000000000005
    000077: 0B mst         01,0000000000000000,0000000000000020
    000089: AE mrkl*          0000000000000006
    000092: AE mrkl*          0000000000000007
    00009B: 38 lca            0000000000003106
    0000A4: 7B ldci           0000000000000013
    0000AD: 76 swp            0000000000000008
    0000B6: 05 lao            0000000000003126
    0000BF: 76 swp            0000000000000010
    0000C8: FB cpl         
    0000C9: 0F csp            0000000000000006
    0000CB: 0F csp            0000000000000005
    0000CD: 75 dmp            0000000000000008
    0000D6: AE mrkl*          0000000000000008
    0000DF: AE mrkl*          0000000000000009
    0000E8: 0E retp           0000000000000000
    0000F1: AE mrkl*          000000000000000A
    0000FA: AE mrkl*          000000000000000B
    000103: AE mrkl*          000000000000000B
    00010C: 0B mst         00,0000000000000000,0000000000000000
    00011E: AE mrkl*          000000000000000C
    000127: AE mrkl*          000000000000000D
    000130: 0E retp           0000000000000000
    000139: 0B mst         00,0000000000000000,0000000000000000
    00014B: 0E retp           0000000000000000
    000154: AE mrkl*          0000000000000001
    00015D: F5 sfr            0000000000000000
    000166: 0C cup            0000000000001AB8
    00016F: 16 ret         
    000170: AE mrkl*          0000000000000002
    000179: AE mrkl*          0000000000000003
    000182: AE mrkl*          0000000000000004
    00018B: AE mrkl*          0000000000000005
    000194: AE mrkl*          0000000000000006
    00019D: AE mrkl*          0000000000000007
    0001A6: AE mrkl*          0000000000000008
    0001AF: AE mrkl*          0000000000000009
    0001B8: AE mrkl*          000000000000000A
    0001C1: AE mrkl*          000000000000000B
    0001CA: AE mrkl*          000000000000000C
    0001D3: AE mrkl*          000000000000000D
    0001DC: AE mrkl*          000000000000000E
    0001E5: AE mrkl*          000000000000000F
    0001EE: AE mrkl*          0000000000000010
    0001F7: AE mrkl*          0000000000000011
    000200: AE mrkl*          0000000000000012
    000209: AE mrkl*          0000000000000013
    000212: AE mrkl*          0000000000000014
    00021B: AE mrkl*          0000000000000015
    000224: AE mrkl*          0000000000000016
    00022D: AE mrkl*          0000000000000017
    000236: AE mrkl*          0000000000000018
    00023F: AE mrkl*          0000000000000019
    000248: AE mrkl*          000000000000001A
    000251: AE mrkl*          000000000000001A
    00025A: 0B mst         01,0000000000000000,0000000000000000
    00026C: 0E retp           0000000000000000
    000275: AE mrkl*          000000000000001B
    00027E: AE mrkl*          000000000000001C
    000287: AE mrkl*          000000000000001C
    000290: 0B mst         01,0000000000000000,0000000000000000
    0002A2: 0E retp           0000000000000000
    0002AB: AE mrkl*          000000000000001D
    0002B4: AE mrkl*          000000000000001E
    0002BD: AE mrkl*          000000000000001E
    0002C6: 0B mst         01,0000000000000000,0000000000000000
    0002D8: 0E retp           0000000000000000
    0002E1: AE mrkl*          000000000000001F
    0002EA: AE mrkl*          0000000000000020
    0002F3: AE mrkl*          0000000000000020
    0002FC: 0B mst         01,0000000000000000,0000000000000000
    00030E: 0E retp           0000000000000000
    000317: AE mrkl*          0000000000000021
    000320: AE mrkl*          0000000000000022
    000329: AE mrkl*          0000000000000022
    000332: 0B mst         01,0000000000000000,0000000000000000
    000344: 0E retp           0000000000000000
    00034D: AE mrkl*          0000000000000023
    000356: AE mrkl*          0000000000000024
    00035F: AE mrkl*          0000000000000024
    000368: 0B mst         01,0000000000000000,0000000000000000
    00037A: 0E retp           0000000000000000
    000383: AE mrkl*          0000000000000025
    00038C: AE mrkl*          0000000000000026
    000395: AE mrkl*          0000000000000026
    00039E: 0B mst         01,0000000000000000,0000000000000000
debug> li $4e

    Addr    Op Ins         P  Q
----------------------------------
    00004E: 00 lodi        00,00000003AE000000
    000058: 00 lodi        00,0000000004AE0000
    000062: 00 lodi        00,000000000005AE00
    00006C: 00 lodi        00,00000000000005AE
    000076: 00 lodi        0B,0000000000000001
    000080: 00 lodi        20,AE00000000000000
    00008A: 06 stoi        
    00008B: 00 lodi        00,0007AE0000000000
    000095: 00 lodi        00,0031063800000000
    00009F: 00 lodi        00,000000137B000000
debug> li $4e $100

    Addr    Op Ins         P  Q
----------------------------------
    00004E: 00 lodi        00,00000003AE000000
    000058: 00 lodi        00,0000000004AE0000
    000062: 00 lodi        00,000000000005AE00
    00006C: 00 lodi        00,00000000000005AE
    000076: 00 lodi        0B,0000000000000001
    000080: 00 lodi        20,AE00000000000000
    00008A: 06 stoi        
    00008B: 00 lodi        00,0007AE0000000000
    000095: 00 lodi        00,0031063800000000
    00009F: 00 lodi        00,000000137B000000
    0000A9: 00 lodi        00,0000000008760000
    0000B3: 00 lodi        00,0000000031260500
    0000BD: 00 lodi        00,0000000000001076
    0000C7: 00 lodi        FB,00000875050F060F
    0000D1: 00 lodi        00,00000008AE000000
    0000DB: 00 lodi        00,0000000009AE0000
    0000E5: 00 lodi        00,0000000000000E00
    0000EF: 00 lodi        00,0000000000000AAE
    0000F9: 00 lodi        AE,000000000000000B
debug> li $4e:100

    Addr    Op Ins         P  Q
----------------------------------
    00004E: 00 lodi        00,00000003AE000000
    000058: 00 lodi        00,0000000004AE0000
    000062: 00 lodi        00,000000000005AE00
    00006C: 00 lodi        00,00000000000005AE
    000076: 00 lodi        0B,0000000000000001
    000080: 00 lodi        20,AE00000000000000
    00008A: 06 stoi        
    00008B: 00 lodi        00,0007AE0000000000
    000095: 00 lodi        00,0031063800000000
    00009F: 00 lodi        00,000000137B000000
    0000A9: 00 lodi        00,0000000008760000
    0000B3: 00 lodi        00,0000000031260500
    0000BD: 00 lodi        00,0000000000001076
    0000C7: 00 lodi        FB,00000875050F060F
    0000D1: 00 lodi        00,00000008AE000000
    0000DB: 00 lodi        00,0000000009AE0000
    0000E5: 00 lodi        00,0000000000000E00
    0000EF: 00 lodi        00,0000000000000AAE
    0000F9: 00 lodi        AE,000000000000000B
    000103: AE mrkl*          000000000000000B
    00010C: 0B mst         00,0000000000000000,0000000000000000
    00011E: AE mrkl*          000000000000000C
    000127: AE mrkl*          000000000000000D
    000130: 0E retp           0000000000000000
    000139: 0B mst         00,0000000000000000,0000000000000000
    00014B: 0E retp           0000000000000000
    000154: AE mrkl*          0000000000000001
    00015D: F5 sfr            0000000000000000
    000166: 0C cup            0000000000001AB8
    00016F: 16 ret         
    000170: AE mrkl*          0000000000000002
    000179: AE mrkl*          0000000000000003
    000182: AE mrkl*          0000000000000004
    00018B: AE mrkl*          0000000000000005
    000194: AE mrkl*          0000000000000006
    00019D: AE mrkl*          0000000000000007
    0001A6: AE mrkl*          0000000000000008
    0001AF: AE mrkl*          0000000000000009
    0001B8: AE mrkl*          000000000000000A
    0001C1: AE mrkl*          000000000000000B
    0001CA: AE mrkl*          000000000000000C
    0001D3: AE mrkl*          000000000000000D
    0001DC: AE mrkl*          000000000000000E
    0001E5: AE mrkl*          000000000000000F
    0001EE: AE mrkl*          0000000000000010
    0001F7: AE mrkl*          0000000000000011
    000200: AE mrkl*          0000000000000012
    000209: AE mrkl*          0000000000000013
    000212: AE mrkl*          0000000000000014
    00021B: AE mrkl*          0000000000000015
    000224: AE mrkl*          0000000000000016
    00022D: AE mrkl*          0000000000000017
    000236: AE mrkl*          0000000000000018
    00023F: AE mrkl*          0000000000000019
    000248: AE mrkl*          000000000000001A
    000251: AE mrkl*          000000000000001A
    00025A: 0B mst         01,0000000000000000,0000000000000000
    00026C: 0E retp           0000000000000000
    000275: AE mrkl*          000000000000001B
    00027E: AE mrkl*          000000000000001C
    000287: AE mrkl*          000000000000001C
    000290: 0B mst         01,0000000000000000,0000000000000000
    0002A2: 0E retp           0000000000000000
    0002AB: AE mrkl*          000000000000001D
    0002B4: AE mrkl*          000000000000001E
    0002BD: AE mrkl*          000000000000001E
    0002C6: 0B mst         01,0000000000000000,0000000000000000
    0002D8: 0E retp           0000000000000000
    0002E1: AE mrkl*          000000000000001F
    0002EA: AE mrkl*          0000000000000020
    0002F3: AE mrkl*          0000000000000020
    0002FC: 0B mst         01,0000000000000000,0000000000000000
    00030E: 0E retp           0000000000000000
    000317: AE mrkl*          0000000000000021
    000320: AE mrkl*          0000000000000022
    000329: AE mrkl*          0000000000000022
    000332: 0B mst         01,0000000000000000,0000000000000000
    000344: 0E retp           0000000000000000
    00034D: AE mrkl*          0000000000000023
    000356: AE mrkl*          0000000000000024
    00035F: AE mrkl*          0000000000000024
    000368: 0B mst         01,0000000000000000,0000000000000000
    00037A: 0E retp           0000000000000000
    000383: AE mrkl*          0000000000000025
    00038C: AE mrkl*          0000000000000026
    000395: AE mrkl*          0000000000000026
    00039E: 0B mst         01,0000000000000000,0000000000000000
    0003B0: 0E retp           0000000000000000
    0003B9: AE mrkl*          0000000000000027
    0003C2: AE mrkl*          0000000000000028
    0003CB: AE mrkl*          0000000000000028
    0003D4: 0B mst         01,0000000000000000,0000000000000000
    0003E6: 0E retp           0000000000000000
    0003EF: AE mrkl*          0000000000000029
    0003F8: AE mrkl*          000000000000002A
    000401: AE mrkl*          000000000000002A
    00040A: 0B mst         01,0000000000000000,0000000000000000
    00041C: 0E retp           0000000000000000
    000425: AE mrkl*          000000000000002B
    00042E: AE mrkl*          000000000000002C
debug> ! run until end of program block
debug> b debug_test stop1
debug> r
This is debug test
this is debug test1

=== break ===

  25:      0:    
  26:      1: b* procedure stop1; begin end;
  27:      0:    

debug> ! expressions/constants
debug> p $100

256

debug> p &100

64

debug> p %100

4

debug> p 255$

FF

debug> p 100&

144

debug> p 100%

1100100

debug> p not 1$

7FFFFFFFFFFFFFFE

debug> p 2+(3*4)

14

debug> p (2+3)*4

20

debug> p ['0'..'9','a','b']

['0'..'9','a'..'b']

debug> p 'hi there bob''s'

'hi there bob's'

debug> p 'hi '''' there'

'hi '' there'

debug> p 1

1

debug> p 12.34

 1.234000000000000e+01

debug> p 3*4

12

debug> p 3.0*4.0

 1.200000000000000e+01

debug> p 10/3

 3.333333333333333e+00

debug> p 10.0/3.0

 3.333333333333333e+00

debug> p 10 div 3

3

debug> p 10 mod 3

1

debug> p 10 and 3%

10

debug> p 1+2

3

debug> p 1.0+2.0

 3.000000000000000e+00

debug> p 3-1

2

debug> p 3.0-1.0

 2.000000000000000e+00

debug> p 10 or 3%

1011

debug> p 10 xor 3%

1001

debug> p 12 = 12

true(1)

debug> p 12 = 13

false(0)

debug> p 12 <> 12

false(0)

debug> p 12 <> 13

true(1)

debug> p 12 < 13

true(1)

debug> p 12 < 12

false(0)

debug> p 12 < 10

false(0)

debug> p 42 > 10

true(1)

debug> p 42 > 42

false(0)

debug> p 42 > 50

false(0)

debug> p 32 <= 40

true(1)

debug> p 32 <= 32

true(1)

debug> p 32 <= 12

false(0)

debug> p 92 >= 10

true(1)

debug> p 92 >= 92

true(1)

debug> p 92 >= 100

false(0)

debug> 
debug> p x

42

debug> p c

'a'(97)

debug> p b

true(1)

debug> p e

two(1)

debug> p sr

5

debug> p f

 1.234000000000000e+11

debug> p rv

record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.678000000000001e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.432000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end

debug> p a

array 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 end

debug> p ar

array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end

debug> p a[5]

15

debug> p rv.rec.sr

3

debug> p rv.rec.a

array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end

debug> p rv.rec.a[5]

25

debug> p ar[5].e

one(0)

debug> p ar[6].rec.a[5]

40

debug> p pi$

3B88

debug> p pi^

42

debug> 
debug> d 0


000000: 14 80 3B 00 00 00 00 00 00 15 13 00 00 00 00 00   ..;.............
000010: 00 00 3A AE 01 00 00 00 00 00 00 00 F5 00 00 00   ..:.............
000020: 00 00 00 00 00 0C F1 00 00 00 00 00 00 00 15 54   ...............T
000030: 01 00 00 00 00 00 00 F5 00 00 00 00 00 00 00 00   ................
000040: 0C 39 01 00 00 00 00 00 00 16 AE 02 00 00 00 00   .9..............
000050: 00 00 00 AE 03 00 00 00 00 00 00 00 AE 04 00 00   ................
000060: 00 00 00 00 00 AE 05 00 00 00 00 00 00 00 AE 05   ................
000070: 00 00 00 00 00 00 00 0B 01 00 00 00 00 00 00 00   ................
000080: 00 20 00 00 00 00 00 00 00 AE 06 00 00 00 00 00   . ..............
000090: 00 00 AE 07 00 00 00 00 00 00 00 38 06 31 00 00   ...........8.1..
0000A0: 00 00 00 00 7B 13 00 00 00 00 00 00 00 76 08 00   ....{........v..
0000B0: 00 00 00 00 00 00 05 26 31 00 00 00 00 00 00 76   .......&1......v
0000C0: 10 00 00 00 00 00 00 00 FB 0F 06 0F 05 75 08 00   .............u..
0000D0: 00 00 00 00 00 00 AE 08 00 00 00 00 00 00 00 AE   ................
0000E0: 09 00 00 00 00 00 00 00 0E 00 00 00 00 00 00 00   ................
0000F0: 00 AE 0A 00 00 00 00 00 00 00 AE 0B 00 00 00 00   ................


debug> d 0 $100


000000: 14 80 3B 00 00 00 00 00 00 15 13 00 00 00 00 00   ..;.............
000010: 00 00 3A AE 01 00 00 00 00 00 00 00 F5 00 00 00   ..:.............
000020: 00 00 00 00 00 0C F1 00 00 00 00 00 00 00 15 54   ...............T
000030: 01 00 00 00 00 00 00 F5 00 00 00 00 00 00 00 00   ................
000040: 0C 39 01 00 00 00 00 00 00 16 AE 02 00 00 00 00   .9..............
000050: 00 00 00 AE 03 00 00 00 00 00 00 00 AE 04 00 00   ................
000060: 00 00 00 00 00 AE 05 00 00 00 00 00 00 00 AE 05   ................
000070: 00 00 00 00 00 00 00 0B 01 00 00 00 00 00 00 00   ................
000080: 00 20 00 00 00 00 00 00 00 AE 06 00 00 00 00 00   . ..............
000090: 00 00 AE 07 00 00 00 00 00 00 00 38 06 31 00 00   ...........8.1..
0000A0: 00 00 00 00 7B 13 00 00 00 00 00 00 00 76 08 00   ....{........v..
0000B0: 00 00 00 00 00 00 05 26 31 00 00 00 00 00 00 76   .......&1......v
0000C0: 10 00 00 00 00 00 00 00 FB 0F 06 0F 05 75 08 00   .............u..
0000D0: 00 00 00 00 00 00 AE 08 00 00 00 00 00 00 00 AE   ................
0000E0: 09 00 00 00 00 00 00 00 0E 00 00 00 00 00 00 00   ................
0000F0: 00 AE 0A 00 00 00 00 00 00 00 AE 0B 00 00 00 00   ................
000100: 00                                                .


debug> d 0:$100


000000: 14 80 3B 00 00 00 00 00 00 15 13 00 00 00 00 00   ..;.............
000010: 00 00 3A AE 01 00 00 00 00 00 00 00 F5 00 00 00   ..:.............
000020: 00 00 00 00 00 0C F1 00 00 00 00 00 00 00 15 54   ...............T
000030: 01 00 00 00 00 00 00 F5 00 00 00 00 00 00 00 00   ................
000040: 0C 39 01 00 00 00 00 00 00 16 AE 02 00 00 00 00   .9..............
000050: 00 00 00 AE 03 00 00 00 00 00 00 00 AE 04 00 00   ................
000060: 00 00 00 00 00 AE 05 00 00 00 00 00 00 00 AE 05   ................
000070: 00 00 00 00 00 00 00 0B 01 00 00 00 00 00 00 00   ................
000080: 00 20 00 00 00 00 00 00 00 AE 06 00 00 00 00 00   . ..............
000090: 00 00 AE 07 00 00 00 00 00 00 00 38 06 31 00 00   ...........8.1..
0000A0: 00 00 00 00 7B 13 00 00 00 00 00 00 00 76 08 00   ....{........v..
0000B0: 00 00 00 00 00 00 05 26 31 00 00 00 00 00 00 76   .......&1......v
0000C0: 10 00 00 00 00 00 00 00 FB 0F 06 0F 05 75 08 00   .............u..
0000D0: 00 00 00 00 00 00 AE 08 00 00 00 00 00 00 00 AE   ................
0000E0: 09 00 00 00 00 00 00 00 0E 00 00 00 00 00 00 00   ................
0000F0: 00 AE 0A 00 00 00 00 00 00 00 AE 0B 00 00 00 00   ................


debug> d $100


000100: 00 00 00 AE 0B 00 00 00 00 00 00 00 0B 00 00 00   ................
000110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 AE 0C   ................
000120: 00 00 00 00 00 00 00 AE 0D 00 00 00 00 00 00 00   ................
000130: 0E 00 00 00 00 00 00 00 00 0B 00 00 00 00 00 00   ................
000140: 00 00 00 00 00 00 00 00 00 00 00 0E 00 00 00 00   ................
000150: 00 00 00 00 AE 01 00 00 00 00 00 00 00 F5 00 00   ................
000160: 00 00 00 00 00 00 0C B8 1A 00 00 00 00 00 00 16   ................
000170: AE 02 00 00 00 00 00 00 00 AE 03 00 00 00 00 00   ................
000180: 00 00 AE 04 00 00 00 00 00 00 00 AE 05 00 00 00   ................
000190: 00 00 00 00 AE 06 00 00 00 00 00 00 00 AE 07 00   ................
0001A0: 00 00 00 00 00 00 AE 08 00 00 00 00 00 00 00 AE   ................
0001B0: 09 00 00 00 00 00 00 00 AE 0A 00 00 00 00 00 00   ................
0001C0: 00 AE 0B 00 00 00 00 00 00 00 AE 0C 00 00 00 00   ................
0001D0: 00 00 00 AE 0D 00 00 00 00 00 00 00 AE 0E 00 00   ................
0001E0: 00 00 00 00 00 AE 0F 00 00 00 00 00 00 00 AE 10   ................
0001F0: 00 00 00 00 00 00 00 AE 11 00 00 00 00 00 00 00   ................


debug> d $100 $100


000100: 00                                                .


debug> d $100:$100


000100: 00 00 00 AE 0B 00 00 00 00 00 00 00 0B 00 00 00   ................
000110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 AE 0C   ................
000120: 00 00 00 00 00 00 00 AE 0D 00 00 00 00 00 00 00   ................
000130: 0E 00 00 00 00 00 00 00 00 0B 00 00 00 00 00 00   ................
000140: 00 00 00 00 00 00 00 00 00 00 00 0E 00 00 00 00   ................
000150: 00 00 00 00 AE 01 00 00 00 00 00 00 00 F5 00 00   ................
000160: 00 00 00 00 00 00 0C B8 1A 00 00 00 00 00 00 16   ................
000170: AE 02 00 00 00 00 00 00 00 AE 03 00 00 00 00 00   ................
000180: 00 00 AE 04 00 00 00 00 00 00 00 AE 05 00 00 00   ................
000190: 00 00 00 00 AE 06 00 00 00 00 00 00 00 AE 07 00   ................
0001A0: 00 00 00 00 00 00 AE 08 00 00 00 00 00 00 00 AE   ................
0001B0: 09 00 00 00 00 00 00 00 AE 0A 00 00 00 00 00 00   ................
0001C0: 00 AE 0B 00 00 00 00 00 00 00 AE 0C 00 00 00 00   ................
0001D0: 00 00 00 AE 0D 00 00 00 00 00 00 00 AE 0E 00 00   ................
0001E0: 00 00 00 00 00 AE 0F 00 00 00 00 00 00 00 AE 10   ................
0001F0: 00 00 00 00 00 00 00 AE 11 00 00 00 00 00 00 00   ................


debug> ! print contents of i, then modify using enter, then print again
debug> p x

42

debug> e *x 12 0 0 0
debug> p x

12

debug> st i $1234
debug> p i$

1234

debug> pg

Globals:

pi                   
ar                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
a                    array 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 end
rv                   record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.678000000000001e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.432000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
f                     1.234000000000000e+11
sr                   5
e                    two(1)
b                    true(1)
c                    'a'(97)
i                    4660
x                    12
i2                   Undefined

debug> ! go down a level to proc1
debug> b stop2
debug> r

=== break ===

  27:      0:    
  28:      1: b* procedure stop2; begin end;
  29:      0:    

debug> ! step out of the stop
debug> ret

 161:      1:    
 162:      1:  *     proc2(74, 'j');
 163:      0:    

debug> 
debug> ! print parameters
debug> p pi

83

debug> p pc

'g'(103)

debug> p pb

true(1)

debug> p pe

two(1)

debug> p psr

7

debug> p pr

 9.876000000000001e+01

debug> p prec

record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.678000000000001e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.432000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end

debug> p pa

array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end

debug> 
debug> ! print locals
debug> p x

43

debug> p c

'b'(98)

debug> p b

false(0)

debug> p e

three(2)

debug> p sr

8

debug> p f

 5.678000000000000e+11

debug> p rv

record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
   8.764999999999999e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
     3.632000000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end

debug> p a

array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end

debug> p ar

array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end

debug> p a[5]

25

debug> p rv.rec.sr

4

debug> p rv.rec.a

array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end

debug> p rv.rec.a[5]

45

debug> p ar[5].e

one(0)

debug> p ar[6].rec.a[5]

80

debug> p ip$

3B98

debug> p ip^

76

debug> 
debug> ! Various dumps. Note pl 2 and pp 2 dumps only dump one level since that is all
debug> ! there is.
debug> pl

Locals for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

ip                   
ar                   array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end
a                    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
rv                   record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
   8.764999999999999e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
     3.632000000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end
f                     5.678000000000000e+11
sr                   8
e                    three(2)
b                    false(0)
c                    'b'(98)
i                    Undefined
x                    43
i2                   Undefined

debug> pl 2

Locals for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

ip                   
ar                   array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end
a                    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
rv                   record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
   8.764999999999999e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
     3.632000000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end
f                     5.678000000000000e+11
sr                   8
e                    three(2)
b                    false(0)
c                    'b'(98)
i                    Undefined
x                    43
i2                   Undefined

debug> pp

Parameters for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

pa                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
prec                 record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.678000000000001e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.432000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
pr                    9.876000000000001e+01
psr                  7
pe                   two(1)
pb                   true(1)
pc                   'g'(103)
pi                   83

debug> pp 2

Parameters for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

pa                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
prec                 record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.678000000000001e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.432000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
pr                    9.876000000000001e+01
psr                  7
pe                   two(1)
pb                   true(1)
pc                   'g'(103)
pi                   83

debug> ds

Storage areas occupied

Program     000000-002A8F (10896)
Constants   002A90-003123 (1684)
Globals     003124-003B7F (2652)
Stack/Heap  003B80-FFFFFF (16761984)

debug> dd

Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80


Mark @FFFFC8
ep: 00FFFFD0: 00000005
sb: 00FFFFD8: 00FFFFA0
et: 00FFFFE0: 00FFFF60

debug> dd 1

Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80

debug> 
debug> ! go down a level to proc2
debug> b stop3
debug> r

=== break ===

  29:      0:    
  30:      1: b* procedure stop3; begin end;
  31:      0:    

debug> ret

  69:      1:    
  70:      1:  *     writeln('Step past me!');
  71:      0:        writeln('And me too!');

debug> 
debug> pl 2

Locals for block: proc2@p_i_c

e                    
d                    
b                    '6'(54)
a                    75


Locals for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

ip                   
ar                   array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.332000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.365000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end
a                    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
rv                   record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
   8.764999999999999e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
     3.632000000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end
f                     5.678000000000000e+11
sr                   8
e                    three(2)
b                    false(0)
c                    'b'(98)
i                    Undefined
x                    43
i2                   Undefined

debug> pp 2

Parameters for block: proc2@p_i_c

c                    'j'(106)
i                    74


Parameters for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

pa                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.678000000000001e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.432000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
prec                 record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.678000000000001e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.432000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
pr                    9.876000000000001e+01
psr                  7
pe                   two(1)
pb                   true(1)
pc                   'g'(103)
pi                   83

debug> dd

Mark @FFEB60
ep: 00FFEB68: 00FFEB80
sb: 00FFEB70: 00FFEB30
et: 00FFEB78: 00FFEB10


Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80


Mark @FFFFC8
ep: 00FFFFD0: 00000005
sb: 00FFFFD8: 00FFFFA0
et: 00FFFFE0: 00FFFF60

debug> dd 2

Mark @FFEB60
ep: 00FFEB68: 00FFEB80
sb: 00FFEB70: 00FFEB30
et: 00FFEB78: 00FFEB10


Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80

debug> ! step over some writes
debug> s 2
Step past me!

  70:      1:        writeln('Step past me!');
  71:      1:  *     writeln('And me too!');
  72:      0:        writeln('1');

And me too!

  71:      1:        writeln('And me too!');
  72:      1:  *     writeln('1');
  73:      0:        writeln('2');

debug> ss 2
1
2
debug> tp traceme
debug> b stop4
debug> r
3

  31:      0:    
  32:      1: t* procedure traceme; begin end;
  33:      0:    

4

=== break ===

  33:      0:    
  34:      1: b* procedure stop4; begin end;
  35:      0:    

debug> ret

  77:      2:        stop4;
  78:      1:  *     writeln('5');
  79:      0:        a := 12;

debug> lb

Breakpoints:

No  Src  Addr   Trc/brk
=======================
 1:  26: 00026C b
 2:  28: 0002A2 b
 3:  30: 0002D8 b
 4:  32: 00030E t
 5:  34: 000344 b

debug> c
debug> lb

Breakpoints:

No  Src  Addr   Trc/brk
=======================

debug> w a
debug> w b
debug> b stop5
debug> r
5
Watch variable: @000008A8: a@00FFEB48: 75 -> 12
6

=== break ===

  35:      0:    
  36:      1: b* procedure stop5; begin end;
  37:      0:    

debug> s

  81:      2:        stop5;
  82:      1:  *     writeln('7');
  83:      0:        writeln('8');

debug> lw

Watch table:

1: 00FFEB48
2: 00FFEB47

debug> cw 1
debug> lw

Watch table:

1: 00FFEB47

debug> cw
debug> lw

Watch table:


debug> ts
debug> b stop6
debug> r
7

  82:      1:        writeln('7');
  83:      1:  *     writeln('8');
  84:      0:        dostuff;

8

  83:      1:        writeln('8');
  84:      1:  *     dostuff;
  85:      0:        writeln('9');


  48:      0:    var i: integer;
  49:      1:  * 
  50:      0:    begin


  49:      1:    
  50:      1:  * begin
  51:      0:    


  49:      1:    
  50:      2:  * begin
  51:      0:    


  50:      2:    begin
  51:      1:  * 
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);


  51:      1:    
  52:      1:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    


  51:      1:    
  52:      2:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    

iteration:           1

  51:      1:    
  52:      3:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    

iteration:           2

  51:      1:    
  52:      4:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    

iteration:           3

  51:      1:    
  52:      5:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    

iteration:           4

  51:      1:    
  52:      6:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    


  52:      6:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      1:  * 
  54:      0:    end;


  53:      1:    
  54:      1:  * end;
  55:      0:    


  83:      1:        writeln('8');
  84:      2:  *     dostuff;
  85:      0:        writeln('9');


  84:      2:        dostuff;
  85:      1:  *     writeln('9');
  86:      0:        writeln('10');

9

  85:      1:        writeln('9');
  86:      1:  *     writeln('10');
  87:      0:        stop6;

10

  86:      1:        writeln('10');
  87:      1:  *     stop6;
  88:      0:        dostuff;


  37:      0:    
  38:      1: b* procedure stop6; begin end;
  39:      0:    


=== break ===

  37:      0:    
  38:      1: b* procedure stop6; begin end;
  39:      0:    

debug> ret

  86:      1:        writeln('10');
  87:      2:  *     stop6;
  88:      0:        dostuff;


  87:      2:        stop6;
  88:      1:  *     dostuff;
  89:      0:        stop7;


  87:      2:        stop6;
  88:      1:  *     dostuff;
  89:      0:        stop7;

debug> nts
debug> an
debug> b stop7
debug> r
iteration:           1
iteration:           2
iteration:           3
iteration:           4

=== break ===

  39:      0:    
  40:      1: b* procedure stop7; begin end;
  41:      0:    

debug> ret

  89:      2:        stop7;
  90:      1:  *     new(d);
  91:      0:        new(e);

debug> lsa

last source lines executed:

  90:      1:  *     new(d);
  89:      2:        stop7;
  40:      1: b  procedure stop7; begin end;
  89:      2:        stop7;
  88:      2:        dostuff;
  54:      2:    end;
  53:      2:    
  52:     12:        for i := 1 to 4 do writeln('iteration: ', i);
  52:     12:        for i := 1 to 4 do writeln('iteration: ', i);
  52:     12:        for i := 1 to 4 do writeln('iteration: ', i);

debug> s

  90:      1:        new(d);
  91:      1:  *     new(e);
  92:      0:        dispose(d);

debug> s

  91:      1:        new(e);
  92:      1:  *     dispose(d);
  93:      0:        writeln('11');

debug> hs

Heap space breakdown

addr: 003B80:     16: alloc
addr: 003B90:     16: alloc
addr: 003BA0:     16: alloc
addr: 003BB0:     16: alloc
debug> s

  92:      1:        dispose(d);
  93:      1:  *     writeln('11');
  94:      0:        stop8;

debug> hs

Heap space breakdown

addr: 003B80:     16: alloc
addr: 003B90:     16: alloc
addr: 003BA0:     16: free
addr: 003BB0:     16: alloc
debug> tr
debug> b stop8
debug> r
  2825/16771856->  6
11
  2827/16771880->  5


=== break ===

  41:      0:    
  42:      1: b* procedure stop8; begin end;
  43:      0:    

debug> ret

  95:      1:    
  96:      1:  * end;
  97:      0:    

debug> ntr
debug> ! step out of proc2
debug> ret

 163:      1:    
 164:      1:  * end;
 165:      0:    

debug> ! step out of proc1
debug> ret

 236:      1:    
 237:      1:  *     stepover1;
 238:      0:    

debug> ! step over next verbose
debug> so
I am stepover proc 1

 238:      1:    
 239:      1:  *     stepover2;
 240:      0:    

debug> ! step over next silently
debug> sso
I am stepover proc 2
debug> ! but now show where you are
debug> ps

 240:      1:    
 241:      1:  *     writeln('Step me!');
 242:      0:    

debug> 
debug> ! Test source profiling.
debug> ! Compare this listing with the one at program start to see if the counters have
debug> ! rolled.
debug> l debug_test 1 100

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      1:    procedure stop1; begin end;
  27:      0:    
  28:      1:    procedure stop2; begin end;
  29:      0:    
  30:      1:    procedure stop3; begin end;
  31:      0:    
  32:      1:    procedure traceme; begin end;
  33:      0:    
  34:      1:    procedure stop4; begin end;
  35:      0:    
  36:      1: b  procedure stop5; begin end;
  37:      0:    
  38:      1: b  procedure stop6; begin end;
  39:      0:    
  40:      1: b  procedure stop7; begin end;
  41:      0:    
  42:      1: b  procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      2:    
  50:      4:    begin
  51:      2:    
  52:     12:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      2:    
  54:      2:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      1:    
  63:      2:    begin
  64:      1:    
  65:      1:        a := 75;
  66:      1:        b := '6';
  67:      1:    
  68:      2:        stop3;
  69:      1:    
  70:      1:        writeln('Step past me!');
  71:      1:        writeln('And me too!');
  72:      1:        writeln('1');
  73:      1:        writeln('2');
  74:      1:        writeln('3');
  75:      2:        traceme;
  76:      1:        writeln('4');
  77:      2:        stop4;
  78:      1:        writeln('5');
  79:      1:        a := 12;
  80:      1:        writeln('6');
  81:      2:        stop5;
  82:      1:        writeln('7');
  83:      1:        writeln('8');
  84:      2:        dostuff;
  85:      1:        writeln('9');
  86:      1:        writeln('10');
  87:      2:        stop6;
  88:      2:        dostuff;
  89:      2:        stop7;
  90:      1:        new(d);
  91:      1:        new(e);
  92:      1:        dispose(d);
  93:      1:        writeln('11');
  94:      2:        stop8;
  95:      1:    
  96:      1:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;

debug> 
debug> !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
debug> !
debug> ! Machine level section
debug> !
debug> ! This section contains hard addresses that need to be moved when the source
debug> ! test program has changed or the compiler has changed.
debug> !
debug> ! machine commands can be tested in source mode, we just don't get a machine
debug> ! level status print. Note li @pc can be a defacto assembly status, since it
debug> ! shows where the execution point is.
debug> !
debug> ! Note the test can need to be recalibrated if the source changes. If it hits
debug> ! the stop instruction, it means you missed a breakpoint (it ran off the end).
debug> !
debug> ! The machine level instructions are indicated as relative offsets from the
debug> ! top of a machine level listing performed before the instruction and indicated
debug> ! in the comment above. This means the location won't change unless the
debug> ! instruction sequence we are indicating has changed.
debug> !
debug> ! Test si, sio, sis, siso, lia, bi, tpi
debug> 
debug> ! should be at writeln('Step me!');
debug> ps

 240:      1:    
 241:      1:  *     writeln('Step me!');
 242:      0:    

debug> p @pc$

28C2

debug> li @pc

    Addr    Op Ins         P  Q
----------------------------------
 *  0028C2: 38 lca            0000000000002AA1
    0028CB: 7B ldci           0000000000000008
    0028D4: 76 swp            0000000000000008
    0028DD: 05 lao            0000000000003126
    0028E6: 76 swp            0000000000000010
    0028EF: FB cpl         
    0028F0: 0F csp            0000000000000006
    0028F2: 0F csp            0000000000000005
    0028F4: 75 dmp            0000000000000008
    0028FD: AE mrkl*          00000000000000F2
debug> si

 240:      1:    
 241:      1:  *     writeln('Step me!');
 242:      0:    

debug> p @pc$

28CB

debug> li @pc

    Addr    Op Ins         P  Q
----------------------------------
 *  0028CB: 7B ldci           0000000000000008
    0028D4: 76 swp            0000000000000008
    0028DD: 05 lao            0000000000003126
    0028E6: 76 swp            0000000000000010
    0028EF: FB cpl         
    0028F0: 0F csp            0000000000000006
    0028F2: 0F csp            0000000000000005
    0028F4: 75 dmp            0000000000000008
    0028FD: AE mrkl*          00000000000000F2
    002906: AE mrkl*          00000000000000F3
debug> sis
debug> p @pc$

28D4

debug> li @pc

    Addr    Op Ins         P  Q
----------------------------------
 *  0028D4: 76 swp            0000000000000008
    0028DD: 05 lao            0000000000003126
    0028E6: 76 swp            0000000000000010
    0028EF: FB cpl         
    0028F0: 0F csp            0000000000000006
    0028F2: 0F csp            0000000000000005
    0028F4: 75 dmp            0000000000000008
    0028FD: AE mrkl*          00000000000000F2
    002906: AE mrkl*          00000000000000F3
    00290F: 7B ldci           0000000000000001
debug> ! run to start of wrs call
debug> ! this is the csp instruction 5th from the top of the above listing
debug> bi @pc+28
debug> r

=== break ===

 240:      1:    
 241:      1: b*     writeln('Step me!');
 242:      0:    

debug> li @pc

    Addr    Op Ins         P  Q
----------------------------------
b*  0028F0: 0F csp            0000000000000006
    0028F2: 0F csp            0000000000000005
    0028F4: 75 dmp            0000000000000008
    0028FD: AE mrkl*          00000000000000F2
    002906: AE mrkl*          00000000000000F3
    00290F: 7B ldci           0000000000000001
    002918: 03 sroi           0000000000003185
    002921: AE mrkl*          00000000000000F4
    00292A: 01 ldoi           0000000000003185
    002933: 7B ldci           0000000000000001
debug> ! dump stack should have parameters on it.
debug> dst
00FFFF80: 0000000000000008 (8)
00FFFF88: 0000000000002AA1 (10913)
00FFFF90: 0000000000000008 (8)
00FFFF98: 0000000000003126 (12582)
00FFFFA0: 000000000000000A (10)
00FFFFA8: 0000000000000001 (1)
00FFFFB0: 000000000000000A (10)
00FFFFB8: 0000000000000001 (1)
00FFFFC0: 0000000000FFFFC8 (16777160)
00FFFFC8: 0000000001000000 (16777216)
debug> ! step over wrs call
debug> sio
Step me!

 240:      1:    
 241:      1: b*     writeln('Step me!');
 242:      0:    

debug> li @pc

    Addr    Op Ins         P  Q
----------------------------------
 *  0028F2: 0F csp            0000000000000005
    0028F4: 75 dmp            0000000000000008
    0028FD: AE mrkl*          00000000000000F2
    002906: AE mrkl*          00000000000000F3
    00290F: 7B ldci           0000000000000001
    002918: 03 sroi           0000000000003185
    002921: AE mrkl*          00000000000000F4
    00292A: 01 ldoi           0000000000003185
    002933: 7B ldci           0000000000000001
    00293C: 1C adi         
debug> ! step over wln call
debug> siso

debug> li @pc:11

    Addr    Op Ins         P  Q
----------------------------------
 *  0028F4: 75 dmp            0000000000000008
    0028FD: AE mrkl*          00000000000000F2
    002906: AE mrkl*          00000000000000F3
    00290F: 7B ldci           0000000000000001
    002918: 03 sroi           0000000000003185
    002921: AE mrkl*          00000000000000F4
    00292A: 01 ldoi           0000000000003185
    002933: 7B ldci           0000000000000001
    00293C: 1C adi         
    00293D: 03 sroi           0000000000003185
    002946: AE mrkl*          00000000000000F5
debug> ! load analyzer buffer
debug> an
debug> ! break at mrkl instruction, 11th from the top of the above listing
debug> bi @pc+82
debug> r

=== break ===

 244:      1: b      x := x+1;
 245:      1:  * 
 246:      0:        for i := 1 to 3 do writeln('Hi there!');    

debug> p @pc$

2946

debug> li @pc

    Addr    Op Ins         P  Q
----------------------------------
b*  002946: AE mrkl*          00000000000000F5
    00294F: AE mrkl*          00000000000000F6
    002958: 7B ldci           0000000000000001
    002961: 02 stri        01,FFFFFFFFFFFFFFF0
    00296B: 7B ldci           0000000000000003
    002974: 02 stri        01,FFFFFFFFFFFFFFE8
    00297E: 00 lodi        01,FFFFFFFFFFFFFFF0
    002988: 03 sroi           000000000000318D
    002991: AE mrkl*          00000000000000F6
    00299A: 01 ldoi           000000000000318D
debug> lia

last instructions executed:

    00293D: 03 sroi           0000000000003185
    00293C: 1C adi         
    002933: 7B ldci           0000000000000001
    00292A: 01 ldoi           0000000000003185
    002921: AE mrkl*          00000000000000F4
    002918: 03 sroi           0000000000003185
    00290F: 7B ldci           0000000000000001
    002906: AE mrkl*          00000000000000F3
    0028FD: AE mrkl*          00000000000000F2
    0028F4: 75 dmp            0000000000000008

debug> ! Now step to for loop (sourcewise)
debug> s

 245:      2:    
 246:      1:  *     for i := 1 to 3 do writeln('Hi there!');    
 247:      0:    

debug> li @pc:20

    Addr    Op Ins         P  Q
----------------------------------
 *  002958: 7B ldci           0000000000000001
    002961: 02 stri        01,FFFFFFFFFFFFFFF0
    00296B: 7B ldci           0000000000000003
    002974: 02 stri        01,FFFFFFFFFFFFFFE8
    00297E: 00 lodi        01,FFFFFFFFFFFFFFF0
    002988: 03 sroi           000000000000318D
    002991: AE mrkl*          00000000000000F6
    00299A: 01 ldoi           000000000000318D
    0029A3: 00 lodi        01,FFFFFFFFFFFFFFE8
    0029AD: A1 leqi        
    0029AE: 18 fjp            0000000000002A33
    0029B7: 38 lca            0000000000002A90
    0029C0: 7B ldci           0000000000000009
    0029C9: 76 swp            0000000000000008
    0029D2: 05 lao            0000000000003126
    0029DB: 76 swp            0000000000000010
    0029E4: FB cpl         
    0029E5: 0F csp            0000000000000006
    0029E7: 0F csp            0000000000000005
    0029E9: 75 dmp            0000000000000008
debug> ! trace at the top of the for loop, and break the line after
debug> ! This is the fjp, 11th instruction from the top of the above listing
debug> tpi @pc+86
debug> b stop9
debug> r

 245:      2:    
 246:      2: t*     for i := 1 to 3 do writeln('Hi there!');    
 247:      0:    

Hi there!

 245:      2:    
 246:      3: t*     for i := 1 to 3 do writeln('Hi there!');    
 247:      0:    

Hi there!

 245:      2:    
 246:      4: t*     for i := 1 to 3 do writeln('Hi there!');    
 247:      0:    

Hi there!

=== break ===

  43:      0:    
  44:      1: b* procedure stop9; begin end;
  45:      0:    

debug> ret

 249:      1:    
 250:      1:  * end.

debug> 
debug> ! Test system variables
debug> ! This must be done at the end since it corrupts the variables.
debug> p @pc$

2A85

debug> st @pc $1234
debug> p @pc$

1234

debug> 
debug> p @sp$

FFFFA0

debug> st @sp $1234
debug> p @sp$

1234

debug> 
debug> p @mp$

FFFFC8

debug> st @mp $1234
debug> p @mp$

1234

debug> 
debug> p @np$

3BC0

debug> st @np $1234
debug> p @np$

1234

debug> 
debug> ! these variables can't be changed
debug> p @constants

10896

debug> p @heapbottom

15232

debug> 
debug> ! exit complete
debug> q

program complete
