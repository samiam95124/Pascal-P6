Compiling debug_test1...
P6 Pascal compiler vs. 0.2.x
Pascal-P6 complies with the requirements of Pascaline version 0.4
and the following annexes: A,B,C,E.


     1       -8 module debug_test1(output); 
     2       -8  
     3       -8 procedure writehi; 
     4      -16  
     5      -16 begin 
     6        7  
     7        7     writeln('this is debug test1') 
     8       14  
     9       14 end; 
    10       17  
    11       17 begin 
    12       17  
    13       17 end. 

Errors in program: 0
Compiling debug_test...
P6 Pascal compiler vs. 0.2.x
Pascal-P6 complies with the requirements of Pascaline version 0.4
and the following annexes: A,B,C,E.


     1       -8 program debug_test(output); 
     2       -8  
     3       -8 joins debug_test1; 
     4        1  
     5        1 type 
     6       -8     enum = (one, two, three); 
     7       -8     sub = 1..10; 
     8       -8     a10 = array 10 of integer; 
     9       -8     r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real;  
    10       -8                a: a10 end; 
    11       -8     r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real;  
    12       -8                 rec: r; a: a10 end; 
    13       -8     a2 = array 10 of r2; 
    14       -8  
    15       -8 var i, x, i2: integer; 
    16       -8     c: char; 
    17       -8     b: boolean; 
    18       -8     e: enum; 
    19       -8     sr: sub; 
    20       -8     f: real; 
    21       -8     rv: r2; 
    22       -8     a: a10; 
    23       -8     ar: a2; 
    24       -8     pi: ^integer; 
    25       -8  
    26       -8 procedure stop1; begin end; 
    27        2  
    28        2 procedure stop2; begin end; 
    29        3  
    30        3 procedure stop3; begin end; 
    31        4  
    32        4 procedure traceme; begin end; 
    33        5  
    34        5 procedure stop4; begin end; 
    35        6  
    36        6 procedure stop5; begin end; 
    37        7  
    38        7 procedure stop6; begin end; 
    39        8  
    40        8 procedure stop7; begin end; 
    41        9  
    42        9 procedure stop8; begin end; 
    43       10  
    44       10 procedure dostuff; 
    45       10  
    46       10 var i: integer; 
    47      -24  
    48      -24 begin 
    49       10  
    50       10     for i := 1 to 4 do writeln('iteration: ', i); 
    51       42  
    52       42 end; 
    53       43  
    54       43 procedure proc2(i: integer; c: char); 
    55       43  
    56       43 var a: integer; 
    57      -24     b: char; 
    58      -25     d: ^integer; 
    59      -36     e: ^integer; 
    60      -44  
    61      -44 begin 
    62       43  
    63       43     a := 75; 
    64       45     b := '6'; 
    65       48  
    66       48     stop3; 
    67       49  
    68       49     writeln('Step past me!'); 
    69       58     writeln('And me too!'); 
    70       67     writeln('1'); 
    71       74     writeln('2'); 
    72       81     writeln('3'); 
    73       88     traceme; 
    74       89     writeln('4'); 
    75       96     stop4; 
    76       97     writeln('5'); 
    77      104     a := 12; 
    78      106     writeln('6'); 
    79      113     stop5; 
    80      114     writeln('7'); 
    81      121     writeln('8'); 
    82      128     dostuff; 
    83      129     writeln('9'); 
    84      136     writeln('10'); 
    85      145     stop6; 
    86      146     dostuff; 
    87      147     stop7; 
    88      148     new(d); 
    89      151     new(e); 
    90      154     dispose(d); 
    91      157     writeln('11'); 
    92      166     stop8; 
    93      167  
    94      167 end; 
c          unreferenced
i          unreferenced

    95      168  
    96      168 procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2); 
    97      168  
    98      168 var i, x, i2: integer; 
    99    -2464     c: char; 
   100    -2465     b: boolean; 
   101    -2466     e: enum; 
   102    -2468     sr: sub; 
   103    -2472     f: real; 
   104    -2480     rv: r2; 
   105    -2704     a: a10; 
   106    -2784     ar: a2; 
   107    -4984     ip: ^integer; 
   108    -4992  
   109    -4992 begin 
   110      174  
   111      174     x := 43; 
   112      176     c := 'b'; 
   113      179     b := false; 
   114      182     e := three; 
   115      185     sr := 8; 
   116      188     f := 56.78e10; 
   117      190  
   118      190     rv.i := 13; 
   119      192     rv.c := 'd'; 
   120      195     rv.b := false; 
   121      198     rv.e := one; 
   122      201     rv.sr := 4; 
   123      204     rv.r := 87.65e20; 
   124      206     rv.rec.i := 85; 
   125      208     rv.rec.c := 'x'; 
   126      211     rv.rec.b := true; 
   127      214     rv.rec.e := two; 
   128      217     rv.rec.sr := 4; 
   129      220     rv.rec.r := 36.32e8; 
   130      222     for i := 1 to 10 do rv.rec.a[i] := i+40; 
   131      251     for i := 1 to 10 do rv.a[i] := i+50; 
   132      280  
   133      280     for i := 1 to 10 do a[i] := i+20; 
   134      309  
   135      309     for i := 1 to 10 do begin 
   136      319  
   137      319         ar[i].i := 16; 
   138      326         ar[i].c := 'z'; 
   139      335         ar[i].b := false; 
   140      344         ar[i].e := three; 
   141      353         ar[i].sr := 2; 
   142      362         ar[i].r := 43.32e20; 
   143      370  
   144      370         ar[i].rec.i := 85; 
   145      378         ar[i].rec.c := 'k'; 
   146      387         ar[i].rec.b := true; 
   147      396         ar[i].rec.e := two; 
   148      405         ar[i].rec.sr := 7; 
   149      414         ar[i].rec.r := 23.65e8; 
   150      422         for i2 := 1 to 10 do ar[i].rec.a[i2] := i2+60; 
   151      456         for i2 := 1 to 10 do ar[i].a[i2] := i2+70; 
   152      490  
   153      490     end; 
   154      500  
   155      500     new(ip); 
   156      503     ip^ := 76; 
   157      507  
   158      507     stop2; 
   159      508  
   160      508     proc2(74, 'j'); 
   161      512  
   162      512 end; 
pa         unreferenced
pb         unreferenced
pe         unreferenced
pc         unreferenced
prec       unreferenced
pr         unreferenced
psr        unreferenced
pi         unreferenced

   163      513  
   164      513 begin 
   165      513  
   166      513     writeln('This is debug test'); 
   167      522     debug_test1.writehi; 
   168      523     x := 42; 
   169      525     c := 'a'; 
   170      528     b := true; 
   171      531     e := two; 
   172      534     sr := 5; 
   173      537     f := 12.34e10; 
   174      539  
   175      539     rv.i := 12; 
   176      541     rv.c := 'c'; 
   177      544     rv.b := false; 
   178      547     rv.e := three; 
   179      550     rv.sr := 6; 
   180      553     rv.r := 56.78e20; 
   181      555     rv.rec.i := 84; 
   182      557     rv.rec.c := 'u'; 
   183      560     rv.rec.b := true; 
   184      563     rv.rec.e := one; 
   185      566     rv.rec.sr := 3; 
   186      569     rv.rec.r := 54.32e8; 
   187      571     for i := 1 to 10 do rv.rec.a[i] := i+20; 
   188      600     for i := 1 to 10 do rv.a[i] := i+30; 
   189      629  
   190      629     for i := 1 to 10 do a[i] := i+10; 
   191      658  
   192      658     for i := 1 to 10 do begin 
   193      668  
   194      668         ar[i].i := 12; 
   195      675         ar[i].c := 'c'; 
   196      684         ar[i].b := false; 
   197      693         ar[i].e := three; 
   198      702         ar[i].sr := 1; 
   199      711         ar[i].r := 56.78e20; 
   200      719  
   201      719         ar[i].rec.i := 84; 
   202      727         ar[i].rec.c := 'u'; 
   203      736         ar[i].rec.b := true; 
   204      745         ar[i].rec.e := one; 
   205      754         ar[i].rec.sr := 3; 
   206      763         ar[i].rec.r := 54.32e8; 
   207      771         for i2 := 1 to 10 do ar[i].rec.a[i2] := i2+20; 
   208      805         for i2 := 1 to 10 do ar[i].a[i2] := i2+30; 
   209      839  
   210      839     end; 
   211      849  
   212      849     new(pi); 
   213      852     pi^ := 42; 
   214      856  
   215      856     stop1; 
   216      857  
   217      857     proc1(83, 'g', true, two, 7, 98.76, rv, ar); 
   218      870  
   219      870     writeln('Step me!'); 
   220      879     for i := 1 to 3 do writeln('Hi there!');     
   221      908  
   222      908 end. 

Errors in program: 0
P6 Pascal interpreter vs. 0.2.x

Assembling/loading program
Running program


P6 debug mode


 165:      1:    
 166:      1:  *     writeln('This is debug test');
 167:      0:        debug_test1.writehi;

debug> !
debug> ! This first part is source level only. I put the machine level commands at the
debug> ! end because they can move around with changes to the program.
debug> !
debug> h

Commands:

h|help              Help (this command)
l    [m] [s[ e|:l]  List source lines
lc   [m] [s[ e|:l]  List source and machine lines coordinated
li   [s[ e|:l]      List machine instructions
p    v              Print expression
d    [s[ e|:l]      Dump memory
e    a v[ v]...     Enter byte values to memory address
st   d v            Set program variable
pg                  Print all globals
pl   [n]            print locals for current/number of enclosing blocks
pp   [n]            print parameters for current/number of enclosing blocks
ds                  Dump storage parameters
dd   [n]            Dump display frames
df   [n]            Dump frames formatted (call trace)
dst  [n]            Dump stack words
b    [m] a          Place breakpoint at source line number/routine
tp   [m] a          Place tracepoint at source line number/routine
bi   a              Place breakpoint at instruction
tpi  a              Place tracepoint at instruction
c    [a]            Clear breakpoint/all breakpoints
lb                  List active breakpoints
w    a              Watch variable
lw                  List watch table
cw   [n]            Clear watch table entry/all watch entries
lia                 List instruction analyzer buffer
lsa                 List source analyzer buffer
s    [n]            Step next source line execution
ss   [n]            Step next source line execution silently
si   [n]            Step instructions
sis  [n]            Step instructions silently
so   [n]            Step over next source line execution
sso  [n]            Step over next source line execution silently
sio  [n]            Step over instructions
siso [n]            Step over instructions silently
ret                 Return from subroutine
hs                  Report heap space
ti                  Turn instruction tracing on
nti                 Turn instruction tracing off
tr                  Turn system routine tracing on
ntr                 Turn system routine tracing off
ts                  Turn source line tracing on
nts                 Turn source line tracing off
spf                 Turn on source level profiling
nspf                Turn off source level profiling
an                  Turn on analyzer mode
nan                 Turn off analyzer mode
r                   Run program from current pc
ps                  Print current registers and instruction
q                   Quit interpreter

!                   Anywhere in line starts a comment

debug> ! turn on source profiling for later test
debug> spf
debug> l debug_test 1

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;

debug> l debug_test 1 100

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure dostuff;
  45:      0:    
  46:      0:    var i: integer;
  47:      0:    
  48:      0:    begin
  49:      0:    
  50:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  51:      0:    
  52:      0:    end;
  53:      0:    
  54:      0:    procedure proc2(i: integer; c: char);
  55:      0:    
  56:      0:    var a: integer;
  57:      0:        b: char;
  58:      0:        d: ^integer;
  59:      0:        e: ^integer;
  60:      0:    
  61:      0:    begin
  62:      0:    
  63:      0:        a := 75;
  64:      0:        b := '6';
  65:      0:    
  66:      0:        stop3;
  67:      0:    
  68:      0:        writeln('Step past me!');
  69:      0:        writeln('And me too!');
  70:      0:        writeln('1');
  71:      0:        writeln('2');
  72:      0:        writeln('3');
  73:      0:        traceme;
  74:      0:        writeln('4');
  75:      0:        stop4;
  76:      0:        writeln('5');
  77:      0:        a := 12;
  78:      0:        writeln('6');
  79:      0:        stop5;
  80:      0:        writeln('7');
  81:      0:        writeln('8');
  82:      0:        dostuff;
  83:      0:        writeln('9');
  84:      0:        writeln('10');
  85:      0:        stop6;
  86:      0:        dostuff;
  87:      0:        stop7;
  88:      0:        new(d);
  89:      0:        new(e);
  90:      0:        dispose(d);
  91:      0:        writeln('11');
  92:      0:        stop8;
  93:      0:    
  94:      0:    end;
  95:      0:    
  96:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  97:      0:    
  98:      0:    var i, x, i2: integer;
  99:      0:        c: char;
 100:      0:        b: boolean;

debug> l debug_test 1:100

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure dostuff;
  45:      0:    
  46:      0:    var i: integer;
  47:      0:    
  48:      0:    begin
  49:      0:    
  50:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  51:      0:    
  52:      0:    end;
  53:      0:    
  54:      0:    procedure proc2(i: integer; c: char);
  55:      0:    
  56:      0:    var a: integer;
  57:      0:        b: char;
  58:      0:        d: ^integer;
  59:      0:        e: ^integer;
  60:      0:    
  61:      0:    begin
  62:      0:    
  63:      0:        a := 75;
  64:      0:        b := '6';
  65:      0:    
  66:      0:        stop3;
  67:      0:    
  68:      0:        writeln('Step past me!');
  69:      0:        writeln('And me too!');
  70:      0:        writeln('1');
  71:      0:        writeln('2');
  72:      0:        writeln('3');
  73:      0:        traceme;
  74:      0:        writeln('4');
  75:      0:        stop4;
  76:      0:        writeln('5');
  77:      0:        a := 12;
  78:      0:        writeln('6');
  79:      0:        stop5;
  80:      0:        writeln('7');
  81:      0:        writeln('8');
  82:      0:        dostuff;
  83:      0:        writeln('9');
  84:      0:        writeln('10');
  85:      0:        stop6;
  86:      0:        dostuff;
  87:      0:        stop7;
  88:      0:        new(d);
  89:      0:        new(e);
  90:      0:        dispose(d);
  91:      0:        writeln('11');
  92:      0:        stop8;
  93:      0:    
  94:      0:    end;
  95:      0:    
  96:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  97:      0:    
  98:      0:    var i, x, i2: integer;
  99:      0:        c: char;
 100:      0:        b: boolean;

debug> l debug_test 5

   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    

debug> l debug_test 5 100

   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure dostuff;
  45:      0:    
  46:      0:    var i: integer;
  47:      0:    
  48:      0:    begin
  49:      0:    
  50:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  51:      0:    
  52:      0:    end;
  53:      0:    
  54:      0:    procedure proc2(i: integer; c: char);
  55:      0:    
  56:      0:    var a: integer;
  57:      0:        b: char;
  58:      0:        d: ^integer;
  59:      0:        e: ^integer;
  60:      0:    
  61:      0:    begin
  62:      0:    
  63:      0:        a := 75;
  64:      0:        b := '6';
  65:      0:    
  66:      0:        stop3;
  67:      0:    
  68:      0:        writeln('Step past me!');
  69:      0:        writeln('And me too!');
  70:      0:        writeln('1');
  71:      0:        writeln('2');
  72:      0:        writeln('3');
  73:      0:        traceme;
  74:      0:        writeln('4');
  75:      0:        stop4;
  76:      0:        writeln('5');
  77:      0:        a := 12;
  78:      0:        writeln('6');
  79:      0:        stop5;
  80:      0:        writeln('7');
  81:      0:        writeln('8');
  82:      0:        dostuff;
  83:      0:        writeln('9');
  84:      0:        writeln('10');
  85:      0:        stop6;
  86:      0:        dostuff;
  87:      0:        stop7;
  88:      0:        new(d);
  89:      0:        new(e);
  90:      0:        dispose(d);
  91:      0:        writeln('11');
  92:      0:        stop8;
  93:      0:    
  94:      0:    end;
  95:      0:    
  96:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  97:      0:    
  98:      0:    var i, x, i2: integer;
  99:      0:        c: char;
 100:      0:        b: boolean;

debug> l debug_test 5:100

   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure dostuff;
  45:      0:    
  46:      0:    var i: integer;
  47:      0:    
  48:      0:    begin
  49:      0:    
  50:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  51:      0:    
  52:      0:    end;
  53:      0:    
  54:      0:    procedure proc2(i: integer; c: char);
  55:      0:    
  56:      0:    var a: integer;
  57:      0:        b: char;
  58:      0:        d: ^integer;
  59:      0:        e: ^integer;
  60:      0:    
  61:      0:    begin
  62:      0:    
  63:      0:        a := 75;
  64:      0:        b := '6';
  65:      0:    
  66:      0:        stop3;
  67:      0:    
  68:      0:        writeln('Step past me!');
  69:      0:        writeln('And me too!');
  70:      0:        writeln('1');
  71:      0:        writeln('2');
  72:      0:        writeln('3');
  73:      0:        traceme;
  74:      0:        writeln('4');
  75:      0:        stop4;
  76:      0:        writeln('5');
  77:      0:        a := 12;
  78:      0:        writeln('6');
  79:      0:        stop5;
  80:      0:        writeln('7');
  81:      0:        writeln('8');
  82:      0:        dostuff;
  83:      0:        writeln('9');
  84:      0:        writeln('10');
  85:      0:        stop6;
  86:      0:        dostuff;
  87:      0:        stop7;
  88:      0:        new(d);
  89:      0:        new(e);
  90:      0:        dispose(d);
  91:      0:        writeln('11');
  92:      0:        stop8;
  93:      0:    
  94:      0:    end;
  95:      0:    
  96:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  97:      0:    
  98:      0:    var i, x, i2: integer;
  99:      0:        c: char;
 100:      0:        b: boolean;
 101:      0:        e: enum;
 102:      0:        sr: sub;
 103:      0:        f: real;
 104:      0:        rv: r2;

debug> lc debug_test1 1

   1:      1:    module debug_test1(output);
   2:      0:    
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
   3:      0:    procedure writehi;
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
   4:      0:    
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
   5:      0:    begin
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
   6:      0:    
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
   7:      0:        writeln('this is debug test1')
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            0000000000002EEA
    0000DF: 05 lao            0000000000002F0A
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
    000103: 7B ldci           0000000000000013
    00010C: 0F csp            0000000000000006
    00010E: 0F csp            0000000000000005
    000110: 75 dmp            0000000000000008
    000119: AE mrkl*          0000000000000008
   8:      0:    
    000119: AE mrkl*          0000000000000008
    000122: AE mrkl*          0000000000000009
   9:      0:    end;
    000122: AE mrkl*          0000000000000009
    00012B: 0E retp           0000000000000000
    000134: AE mrkl*          000000000000000A
  10:      1:    
    000134: AE mrkl*          000000000000000A
    00013D: AE mrkl*          000000000000000B

debug> lc debug_test1 1 100

   1:      1:    module debug_test1(output);
   2:      0:    
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
   3:      0:    procedure writehi;
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
   4:      0:    
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
   5:      0:    begin
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
   6:      0:    
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
   7:      0:        writeln('this is debug test1')
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            0000000000002EEA
    0000DF: 05 lao            0000000000002F0A
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
    000103: 7B ldci           0000000000000013
    00010C: 0F csp            0000000000000006
    00010E: 0F csp            0000000000000005
    000110: 75 dmp            0000000000000008
    000119: AE mrkl*          0000000000000008
   8:      0:    
    000119: AE mrkl*          0000000000000008
    000122: AE mrkl*          0000000000000009
   9:      0:    end;
    000122: AE mrkl*          0000000000000009
    00012B: 0E retp           0000000000000000
    000134: AE mrkl*          000000000000000A
  10:      1:    
    000134: AE mrkl*          000000000000000A
    00013D: AE mrkl*          000000000000000B
  11:      2:    begin
    00013D: AE mrkl*          000000000000000B
    000146: AE mrkl*          000000000000000B
    00014F: 0B mst         00,FFFFFFFFFFFFFFF8,0000000000000000
    000161: AE mrkl*          000000000000000C
  12:      1:    
    000161: AE mrkl*          000000000000000C
    00016A: AE mrkl*          000000000000000D
  13:      1:    end.
    00016A: AE mrkl*          000000000000000D
    000173: 0E retp           0000000000000000
    00017C: 0B mst         01,0000000000000000,0000000000000000
    00018E: 0E retp           0000000000000000

debug> lc debug_test1 1:100

   1:      1:    module debug_test1(output);
   2:      0:    
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
   3:      0:    procedure writehi;
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
   4:      0:    
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
   5:      0:    begin
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
   6:      0:    
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
   7:      0:        writeln('this is debug test1')
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            0000000000002EEA
    0000DF: 05 lao            0000000000002F0A
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
    000103: 7B ldci           0000000000000013
    00010C: 0F csp            0000000000000006
    00010E: 0F csp            0000000000000005
    000110: 75 dmp            0000000000000008
    000119: AE mrkl*          0000000000000008
   8:      0:    
    000119: AE mrkl*          0000000000000008
    000122: AE mrkl*          0000000000000009
   9:      0:    end;
    000122: AE mrkl*          0000000000000009
    00012B: 0E retp           0000000000000000
    000134: AE mrkl*          000000000000000A
  10:      1:    
    000134: AE mrkl*          000000000000000A
    00013D: AE mrkl*          000000000000000B
  11:      2:    begin
    00013D: AE mrkl*          000000000000000B
    000146: AE mrkl*          000000000000000B
    00014F: 0B mst         00,FFFFFFFFFFFFFFF8,0000000000000000
    000161: AE mrkl*          000000000000000C
  12:      1:    
    000161: AE mrkl*          000000000000000C
    00016A: AE mrkl*          000000000000000D
  13:      1:    end.
    00016A: AE mrkl*          000000000000000D
    000173: 0E retp           0000000000000000
    00017C: 0B mst         01,0000000000000000,0000000000000000
    00018E: 0E retp           0000000000000000

debug> lc debug_test 5

   5:      0:    type
    0001CE: AE mrkl*          0000000000000005
    0001D7: AE mrkl*          0000000000000006
   6:      0:        enum = (one, two, three);
    0001D7: AE mrkl*          0000000000000006
    0001E0: AE mrkl*          0000000000000007
   7:      0:        sub = 1..10;
    0001E0: AE mrkl*          0000000000000007
    0001E9: AE mrkl*          0000000000000008
   8:      0:        a10 = array 10 of integer;
    0001E9: AE mrkl*          0000000000000008
    0001F2: AE mrkl*          0000000000000009
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001F2: AE mrkl*          0000000000000009
    0001FB: AE mrkl*          000000000000000A
  10:      0:                   a: a10 end;
    0001FB: AE mrkl*          000000000000000A
    000204: AE mrkl*          000000000000000B
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    000204: AE mrkl*          000000000000000B
    00020D: AE mrkl*          000000000000000C
  12:      0:                    rec: r; a: a10 end;
    00020D: AE mrkl*          000000000000000C
    000216: AE mrkl*          000000000000000D
  13:      0:        a2 = array 10 of r2;
    000216: AE mrkl*          000000000000000D
    00021F: AE mrkl*          000000000000000E
  14:      0:    
    00021F: AE mrkl*          000000000000000E
    000228: AE mrkl*          000000000000000F

debug> lc debug_test 5 100

   5:      0:    type
    0001CE: AE mrkl*          0000000000000005
    0001D7: AE mrkl*          0000000000000006
   6:      0:        enum = (one, two, three);
    0001D7: AE mrkl*          0000000000000006
    0001E0: AE mrkl*          0000000000000007
   7:      0:        sub = 1..10;
    0001E0: AE mrkl*          0000000000000007
    0001E9: AE mrkl*          0000000000000008
   8:      0:        a10 = array 10 of integer;
    0001E9: AE mrkl*          0000000000000008
    0001F2: AE mrkl*          0000000000000009
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001F2: AE mrkl*          0000000000000009
    0001FB: AE mrkl*          000000000000000A
  10:      0:                   a: a10 end;
    0001FB: AE mrkl*          000000000000000A
    000204: AE mrkl*          000000000000000B
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    000204: AE mrkl*          000000000000000B
    00020D: AE mrkl*          000000000000000C
  12:      0:                    rec: r; a: a10 end;
    00020D: AE mrkl*          000000000000000C
    000216: AE mrkl*          000000000000000D
  13:      0:        a2 = array 10 of r2;
    000216: AE mrkl*          000000000000000D
    00021F: AE mrkl*          000000000000000E
  14:      0:    
    00021F: AE mrkl*          000000000000000E
    000228: AE mrkl*          000000000000000F
  15:      0:    var i, x, i2: integer;
    000228: AE mrkl*          000000000000000F
    000231: AE mrkl*          0000000000000010
  16:      0:        c: char;
    000231: AE mrkl*          0000000000000010
    00023A: AE mrkl*          0000000000000011
  17:      0:        b: boolean;
    00023A: AE mrkl*          0000000000000011
    000243: AE mrkl*          0000000000000012
  18:      0:        e: enum;
    000243: AE mrkl*          0000000000000012
    00024C: AE mrkl*          0000000000000013
  19:      0:        sr: sub;
    00024C: AE mrkl*          0000000000000013
    000255: AE mrkl*          0000000000000014
  20:      0:        f: real;
    000255: AE mrkl*          0000000000000014
    00025E: AE mrkl*          0000000000000015
  21:      0:        rv: r2;
    00025E: AE mrkl*          0000000000000015
    000267: AE mrkl*          0000000000000016
  22:      0:        a: a10;
    000267: AE mrkl*          0000000000000016
    000270: AE mrkl*          0000000000000017
  23:      0:        ar: a2;
    000270: AE mrkl*          0000000000000017
    000279: AE mrkl*          0000000000000018
  24:      0:        pi: ^integer;
    000279: AE mrkl*          0000000000000018
    000282: AE mrkl*          0000000000000019
  25:      0:    
    000282: AE mrkl*          0000000000000019
    00028B: AE mrkl*          000000000000001A
  26:      0:    procedure stop1; begin end;
    00028B: AE mrkl*          000000000000001A
    000294: AE mrkl*          000000000000001A
    00029D: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0002AF: 0E retp           0000000000000000
    0002B8: AE mrkl*          000000000000001B
  27:      0:    
    0002B8: AE mrkl*          000000000000001B
    0002C1: AE mrkl*          000000000000001C
  28:      0:    procedure stop2; begin end;
    0002C1: AE mrkl*          000000000000001C
    0002CA: AE mrkl*          000000000000001C
    0002D3: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0002E5: 0E retp           0000000000000000
    0002EE: AE mrkl*          000000000000001D
  29:      0:    
    0002EE: AE mrkl*          000000000000001D
    0002F7: AE mrkl*          000000000000001E
  30:      0:    procedure stop3; begin end;
    0002F7: AE mrkl*          000000000000001E
    000300: AE mrkl*          000000000000001E
    000309: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    00031B: 0E retp           0000000000000000
    000324: AE mrkl*          000000000000001F
  31:      0:    
    000324: AE mrkl*          000000000000001F
    00032D: AE mrkl*          0000000000000020
  32:      0:    procedure traceme; begin end;
    00032D: AE mrkl*          0000000000000020
    000336: AE mrkl*          0000000000000020
    00033F: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000351: 0E retp           0000000000000000
    00035A: AE mrkl*          0000000000000021
  33:      0:    
    00035A: AE mrkl*          0000000000000021
    000363: AE mrkl*          0000000000000022
  34:      0:    procedure stop4; begin end;
    000363: AE mrkl*          0000000000000022
    00036C: AE mrkl*          0000000000000022
    000375: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000387: 0E retp           0000000000000000
    000390: AE mrkl*          0000000000000023
  35:      0:    
    000390: AE mrkl*          0000000000000023
    000399: AE mrkl*          0000000000000024
  36:      0:    procedure stop5; begin end;
    000399: AE mrkl*          0000000000000024
    0003A2: AE mrkl*          0000000000000024
    0003AB: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0003BD: 0E retp           0000000000000000
    0003C6: AE mrkl*          0000000000000025
  37:      0:    
    0003C6: AE mrkl*          0000000000000025
    0003CF: AE mrkl*          0000000000000026
  38:      0:    procedure stop6; begin end;
    0003CF: AE mrkl*          0000000000000026
    0003D8: AE mrkl*          0000000000000026
    0003E1: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0003F3: 0E retp           0000000000000000
    0003FC: AE mrkl*          0000000000000027
  39:      0:    
    0003FC: AE mrkl*          0000000000000027
    000405: AE mrkl*          0000000000000028
  40:      0:    procedure stop7; begin end;
    000405: AE mrkl*          0000000000000028
    00040E: AE mrkl*          0000000000000028
    000417: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000429: 0E retp           0000000000000000
    000432: AE mrkl*          0000000000000029
  41:      0:    
    000432: AE mrkl*          0000000000000029
    00043B: AE mrkl*          000000000000002A
  42:      0:    procedure stop8; begin end;
    00043B: AE mrkl*          000000000000002A
    000444: AE mrkl*          000000000000002A
    00044D: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    00045F: 0E retp           0000000000000000
    000468: AE mrkl*          000000000000002B
  43:      0:    
    000468: AE mrkl*          000000000000002B
    000471: AE mrkl*          000000000000002C
  44:      0:    procedure dostuff;
    000471: AE mrkl*          000000000000002C
    00047A: AE mrkl*          000000000000002D
  45:      0:    
    00047A: AE mrkl*          000000000000002D
    000483: AE mrkl*          000000000000002E
  46:      0:    var i: integer;
    000483: AE mrkl*          000000000000002E
    00048C: AE mrkl*          000000000000002F
  47:      0:    
    00048C: AE mrkl*          000000000000002F
    000495: AE mrkl*          0000000000000030
  48:      0:    begin
    000495: AE mrkl*          0000000000000030
    00049E: AE mrkl*          0000000000000030
    0004A7: 0B mst         01,FFFFFFFFFFFFFFD8,FFFFFFFFFFFFFFE0
    0004B9: AE mrkl*          0000000000000031
  49:      0:    
    0004B9: AE mrkl*          0000000000000031
    0004C2: AE mrkl*          0000000000000032
  50:      0:        for i := 1 to 4 do writeln('iteration: ', i);
    0004C2: AE mrkl*          0000000000000032
    0004CB: 7B ldci           0000000000000001
    0004D4: 02 stri        02,FFFFFFFFFFFFFFE0
    0004DE: 7B ldci           0000000000000004
    0004E7: 02 stri        02,FFFFFFFFFFFFFFD8
    0004F1: 00 lodi        02,FFFFFFFFFFFFFFE0
    0004FB: 02 stri        02,FFFFFFFFFFFFFFE8
    000505: AE mrkl*          0000000000000032
    00050E: 00 lodi        02,FFFFFFFFFFFFFFE8
    000518: 00 lodi        02,FFFFFFFFFFFFFFD8
    000522: A1 leqi        
    000523: 18 fjp            00000000000005C8
    00052C: 38 lca            0000000000002EC7
    000535: 05 lao            0000000000002F0A
    00053E: 76 swp            0000000000000008
    000547: 7B ldci           000000000000000B
    000550: 76 swp            0000000000000008
    000559: 7B ldci           000000000000000B
    000562: 0F csp            0000000000000006
    000564: 00 lodi        02,FFFFFFFFFFFFFFE8
    00056E: 7B ldci           000000000000000B
    000577: 0F csp            0000000000000008
    000579: 0F csp            0000000000000005
    00057B: 75 dmp            0000000000000008
    000584: 00 lodi        02,FFFFFFFFFFFFFFE8
    00058E: 00 lodi        02,FFFFFFFFFFFFFFD8
    000598: 89 equi        
    000599: 77 tjp            00000000000005C8
    0005A2: 00 lodi        02,FFFFFFFFFFFFFFE8
    0005AC: 0A inci           0000000000000001
    0005B5: 02 stri        02,FFFFFFFFFFFFFFE8
    0005BF: 17 ujp            0000000000000505
    0005C8: AE mrkl*          0000000000000032
    0005D1: 04 lda         02,FFFFFFFFFFFFFFE8
    0005DB: BD inv         
    0005DC: AE mrkl*          0000000000000033
  51:      0:    
    0005DC: AE mrkl*          0000000000000033
    0005E5: AE mrkl*          0000000000000034
  52:      0:    end;
    0005E5: AE mrkl*          0000000000000034
    0005EE: 0E retp           0000000000000000
    0005F7: AE mrkl*          0000000000000035
  53:      0:    
    0005F7: AE mrkl*          0000000000000035
    000600: AE mrkl*          0000000000000036
  54:      0:    procedure proc2(i: integer; c: char);
    000600: AE mrkl*          0000000000000036
    000609: AE mrkl*          0000000000000037
  55:      0:    
    000609: AE mrkl*          0000000000000037
    000612: AE mrkl*          0000000000000038
  56:      0:    var a: integer;
    000612: AE mrkl*          0000000000000038
    00061B: AE mrkl*          0000000000000039
  57:      0:        b: char;
    00061B: AE mrkl*          0000000000000039
    000624: AE mrkl*          000000000000003A
  58:      0:        d: ^integer;
    000624: AE mrkl*          000000000000003A
    00062D: AE mrkl*          000000000000003B
  59:      0:        e: ^integer;
    00062D: AE mrkl*          000000000000003B
    000636: AE mrkl*          000000000000003C
  60:      0:    
    000636: AE mrkl*          000000000000003C
    00063F: AE mrkl*          000000000000003D
  61:      0:    begin
    00063F: AE mrkl*          000000000000003D
    000648: AE mrkl*          000000000000003D
    000651: 0B mst         01,FFFFFFFFFFFFFFD0,FFFFFFFFFFFFFFE0
    000663: AE mrkl*          000000000000003E
  62:      0:    
    000663: AE mrkl*          000000000000003E
    00066C: AE mrkl*          000000000000003F
  63:      0:        a := 75;
    00066C: AE mrkl*          000000000000003F
    000675: 7B ldci           000000000000004B
    00067E: 02 stri        02,FFFFFFFFFFFFFFE8
    000688: AE mrkl*          0000000000000040
  64:      0:        b := '6';
    000688: AE mrkl*          0000000000000040
    000691: 7F ldcc           0000000000000036
    000693: 63 chkc           0000000000002EB7
    00069C: 4A strc        02,FFFFFFFFFFFFFFE7
    0006A6: AE mrkl*          0000000000000041
  65:      0:    
    0006A6: AE mrkl*          0000000000000041
    0006AF: AE mrkl*          0000000000000042
  66:      0:        stop3;
    0006AF: AE mrkl*          0000000000000042
    0006B8: F5 sfr            0000000000000000
    0006C1: 0C cup            0000000000000300
    0006CA: AE mrkl*          0000000000000042
    0006D3: AE mrkl*          0000000000000043
  67:      0:    
    0006D3: AE mrkl*          0000000000000043
    0006DC: AE mrkl*          0000000000000044
  68:      0:        writeln('Step past me!');
    0006DC: AE mrkl*          0000000000000044
    0006E5: 38 lca            0000000000002EA2
    0006EE: 05 lao            0000000000002F0A
    0006F7: 76 swp            0000000000000008
    000700: 7B ldci           000000000000000D
    000709: 76 swp            0000000000000008
    000712: 7B ldci           000000000000000D
    00071B: 0F csp            0000000000000006
    00071D: 0F csp            0000000000000005
    00071F: 75 dmp            0000000000000008
    000728: AE mrkl*          0000000000000045
  69:      0:        writeln('And me too!');
    000728: AE mrkl*          0000000000000045
    000731: 38 lca            0000000000002E8F
    00073A: 05 lao            0000000000002F0A
    000743: 76 swp            0000000000000008
    00074C: 7B ldci           000000000000000B
    000755: 76 swp            0000000000000008
    00075E: 7B ldci           000000000000000B
    000767: 0F csp            0000000000000006
    000769: 0F csp            0000000000000005
    00076B: 75 dmp            0000000000000008
    000774: AE mrkl*          0000000000000046
  70:      0:        writeln('1');
    000774: AE mrkl*          0000000000000046
    00077D: 7F ldcc           0000000000000031
    00077F: 05 lao            0000000000002F0A
    000788: 76 swp            0000000000000008
    000791: 7B ldci           0000000000000001
    00079A: 0F csp            000000000000000A
    00079C: 0F csp            0000000000000005
    00079E: 75 dmp            0000000000000008
    0007A7: AE mrkl*          0000000000000047
  71:      0:        writeln('2');
    0007A7: AE mrkl*          0000000000000047
    0007B0: 7F ldcc           0000000000000032
    0007B2: 05 lao            0000000000002F0A
    0007BB: 76 swp            0000000000000008
    0007C4: 7B ldci           0000000000000001
    0007CD: 0F csp            000000000000000A
    0007CF: 0F csp            0000000000000005
    0007D1: 75 dmp            0000000000000008
    0007DA: AE mrkl*          0000000000000048
  72:      0:        writeln('3');
    0007DA: AE mrkl*          0000000000000048
    0007E3: 7F ldcc           0000000000000033
    0007E5: 05 lao            0000000000002F0A
    0007EE: 76 swp            0000000000000008
    0007F7: 7B ldci           0000000000000001
    000800: 0F csp            000000000000000A
    000802: 0F csp            0000000000000005
    000804: 75 dmp            0000000000000008
    00080D: AE mrkl*          0000000000000049
  73:      0:        traceme;
    00080D: AE mrkl*          0000000000000049
    000816: F5 sfr            0000000000000000
    00081F: 0C cup            0000000000000336
    000828: AE mrkl*          0000000000000049
    000831: AE mrkl*          000000000000004A
  74:      0:        writeln('4');
    000831: AE mrkl*          000000000000004A
    00083A: 7F ldcc           0000000000000034
    00083C: 05 lao            0000000000002F0A
    000845: 76 swp            0000000000000008
    00084E: 7B ldci           0000000000000001
    000857: 0F csp            000000000000000A
    000859: 0F csp            0000000000000005
    00085B: 75 dmp            0000000000000008
    000864: AE mrkl*          000000000000004B
  75:      0:        stop4;
    000864: AE mrkl*          000000000000004B
    00086D: F5 sfr            0000000000000000
    000876: 0C cup            000000000000036C
    00087F: AE mrkl*          000000000000004B
    000888: AE mrkl*          000000000000004C
  76:      0:        writeln('5');
    000888: AE mrkl*          000000000000004C
    000891: 7F ldcc           0000000000000035
    000893: 05 lao            0000000000002F0A
    00089C: 76 swp            0000000000000008
    0008A5: 7B ldci           0000000000000001
    0008AE: 0F csp            000000000000000A
    0008B0: 0F csp            0000000000000005
    0008B2: 75 dmp            0000000000000008
    0008BB: AE mrkl*          000000000000004D
  77:      0:        a := 12;
    0008BB: AE mrkl*          000000000000004D
    0008C4: 7B ldci           000000000000000C
    0008CD: 02 stri        02,FFFFFFFFFFFFFFE8
    0008D7: AE mrkl*          000000000000004E
  78:      0:        writeln('6');
    0008D7: AE mrkl*          000000000000004E
    0008E0: 7F ldcc           0000000000000036
    0008E2: 05 lao            0000000000002F0A
    0008EB: 76 swp            0000000000000008
    0008F4: 7B ldci           0000000000000001
    0008FD: 0F csp            000000000000000A
    0008FF: 0F csp            0000000000000005
    000901: 75 dmp            0000000000000008
    00090A: AE mrkl*          000000000000004F
  79:      0:        stop5;
    00090A: AE mrkl*          000000000000004F
    000913: F5 sfr            0000000000000000
    00091C: 0C cup            00000000000003A2
    000925: AE mrkl*          000000000000004F
    00092E: AE mrkl*          0000000000000050
  80:      0:        writeln('7');
    00092E: AE mrkl*          0000000000000050
    000937: 7F ldcc           0000000000000037
    000939: 05 lao            0000000000002F0A
    000942: 76 swp            0000000000000008
    00094B: 7B ldci           0000000000000001
    000954: 0F csp            000000000000000A
    000956: 0F csp            0000000000000005
    000958: 75 dmp            0000000000000008
    000961: AE mrkl*          0000000000000051
  81:      0:        writeln('8');
    000961: AE mrkl*          0000000000000051
    00096A: 7F ldcc           0000000000000038
    00096C: 05 lao            0000000000002F0A
    000975: 76 swp            0000000000000008
    00097E: 7B ldci           0000000000000001
    000987: 0F csp            000000000000000A
    000989: 0F csp            0000000000000005
    00098B: 75 dmp            0000000000000008
    000994: AE mrkl*          0000000000000052
  82:      0:        dostuff;
    000994: AE mrkl*          0000000000000052
    00099D: F5 sfr            0000000000000000
    0009A6: 0C cup            000000000000048C
    0009AF: AE mrkl*          0000000000000052
    0009B8: AE mrkl*          0000000000000053
  83:      0:        writeln('9');
    0009B8: AE mrkl*          0000000000000053
    0009C1: 7F ldcc           0000000000000039
    0009C3: 05 lao            0000000000002F0A
    0009CC: 76 swp            0000000000000008
    0009D5: 7B ldci           0000000000000001
    0009DE: 0F csp            000000000000000A
    0009E0: 0F csp            0000000000000005
    0009E2: 75 dmp            0000000000000008
    0009EB: AE mrkl*          0000000000000054
  84:      0:        writeln('10');
    0009EB: AE mrkl*          0000000000000054
    0009F4: 38 lca            0000000000002E85
    0009FD: 05 lao            0000000000002F0A
    000A06: 76 swp            0000000000000008
    000A0F: 7B ldci           0000000000000002
    000A18: 76 swp            0000000000000008
    000A21: 7B ldci           0000000000000002
    000A2A: 0F csp            0000000000000006
    000A2C: 0F csp            0000000000000005
    000A2E: 75 dmp            0000000000000008
    000A37: AE mrkl*          0000000000000055
  85:      0:        stop6;
    000A37: AE mrkl*          0000000000000055
    000A40: F5 sfr            0000000000000000
    000A49: 0C cup            00000000000003D8
    000A52: AE mrkl*          0000000000000055
    000A5B: AE mrkl*          0000000000000056
  86:      0:        dostuff;
    000A5B: AE mrkl*          0000000000000056
    000A64: F5 sfr            0000000000000000
    000A6D: 0C cup            000000000000048C
    000A76: AE mrkl*          0000000000000056
    000A7F: AE mrkl*          0000000000000057
  87:      0:        stop7;
    000A7F: AE mrkl*          0000000000000057
    000A88: F5 sfr            0000000000000000
    000A91: 0C cup            000000000000040E
    000A9A: AE mrkl*          0000000000000057
    000AA3: AE mrkl*          0000000000000058
  88:      0:        new(d);
    000AA3: AE mrkl*          0000000000000058
    000AAC: 04 lda         02,FFFFFFFFFFFFFFDC
    000AB6: 7B ldci           0000000000000008
    000ABF: 0F csp            0000000000000004
    000AC1: AE mrkl*          0000000000000059
  89:      0:        new(e);
    000AC1: AE mrkl*          0000000000000059
    000ACA: 04 lda         02,FFFFFFFFFFFFFFD4
    000AD4: 7B ldci           0000000000000008
    000ADD: 0F csp            0000000000000004
    000ADF: AE mrkl*          000000000000005A
  90:      0:        dispose(d);
    000ADF: AE mrkl*          000000000000005A
    000AE8: 69 loda        02,FFFFFFFFFFFFFFDC
    000AF2: 7B ldci           0000000000000008
    000AFB: 0F csp            000000000000001A
    000AFD: AE mrkl*          000000000000005B
  91:      0:        writeln('11');
    000AFD: AE mrkl*          000000000000005B
    000B06: 38 lca            0000000000002E7B
    000B0F: 05 lao            0000000000002F0A
    000B18: 76 swp            0000000000000008
    000B21: 7B ldci           0000000000000002
    000B2A: 76 swp            0000000000000008
    000B33: 7B ldci           0000000000000002
    000B3C: 0F csp            0000000000000006
    000B3E: 0F csp            0000000000000005
    000B40: 75 dmp            0000000000000008
    000B49: AE mrkl*          000000000000005C
  92:      0:        stop8;
    000B49: AE mrkl*          000000000000005C
    000B52: F5 sfr            0000000000000000
    000B5B: 0C cup            0000000000000444
    000B64: AE mrkl*          000000000000005C
    000B6D: AE mrkl*          000000000000005D
  93:      0:    
    000B6D: AE mrkl*          000000000000005D
    000B76: AE mrkl*          000000000000005E
  94:      0:    end;
    000B76: AE mrkl*          000000000000005E
    000B7F: 0E retp           0000000000000010
    000B88: AE mrkl*          000000000000005F
  95:      0:    
    000B88: AE mrkl*          000000000000005F
    000B91: AE mrkl*          0000000000000060
  96:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
    000B91: AE mrkl*          0000000000000060
    000B9A: AE mrkl*          0000000000000061
  97:      0:    
    000B9A: AE mrkl*          0000000000000061
    000BA3: AE mrkl*          0000000000000062
  98:      0:    var i, x, i2: integer;
    000BA3: AE mrkl*          0000000000000062
    000BAC: AE mrkl*          0000000000000063
  99:      0:        c: char;
    000BAC: AE mrkl*          0000000000000063
    000BB5: AE mrkl*          0000000000000064
 100:      0:        b: boolean;
    000BB5: AE mrkl*          0000000000000064
    000BBE: AE mrkl*          0000000000000065

debug> lc debug_test 5:100

   5:      0:    type
    0001CE: AE mrkl*          0000000000000005
    0001D7: AE mrkl*          0000000000000006
   6:      0:        enum = (one, two, three);
    0001D7: AE mrkl*          0000000000000006
    0001E0: AE mrkl*          0000000000000007
   7:      0:        sub = 1..10;
    0001E0: AE mrkl*          0000000000000007
    0001E9: AE mrkl*          0000000000000008
   8:      0:        a10 = array 10 of integer;
    0001E9: AE mrkl*          0000000000000008
    0001F2: AE mrkl*          0000000000000009
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001F2: AE mrkl*          0000000000000009
    0001FB: AE mrkl*          000000000000000A
  10:      0:                   a: a10 end;
    0001FB: AE mrkl*          000000000000000A
    000204: AE mrkl*          000000000000000B
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    000204: AE mrkl*          000000000000000B
    00020D: AE mrkl*          000000000000000C
  12:      0:                    rec: r; a: a10 end;
    00020D: AE mrkl*          000000000000000C
    000216: AE mrkl*          000000000000000D
  13:      0:        a2 = array 10 of r2;
    000216: AE mrkl*          000000000000000D
    00021F: AE mrkl*          000000000000000E
  14:      0:    
    00021F: AE mrkl*          000000000000000E
    000228: AE mrkl*          000000000000000F
  15:      0:    var i, x, i2: integer;
    000228: AE mrkl*          000000000000000F
    000231: AE mrkl*          0000000000000010
  16:      0:        c: char;
    000231: AE mrkl*          0000000000000010
    00023A: AE mrkl*          0000000000000011
  17:      0:        b: boolean;
    00023A: AE mrkl*          0000000000000011
    000243: AE mrkl*          0000000000000012
  18:      0:        e: enum;
    000243: AE mrkl*          0000000000000012
    00024C: AE mrkl*          0000000000000013
  19:      0:        sr: sub;
    00024C: AE mrkl*          0000000000000013
    000255: AE mrkl*          0000000000000014
  20:      0:        f: real;
    000255: AE mrkl*          0000000000000014
    00025E: AE mrkl*          0000000000000015
  21:      0:        rv: r2;
    00025E: AE mrkl*          0000000000000015
    000267: AE mrkl*          0000000000000016
  22:      0:        a: a10;
    000267: AE mrkl*          0000000000000016
    000270: AE mrkl*          0000000000000017
  23:      0:        ar: a2;
    000270: AE mrkl*          0000000000000017
    000279: AE mrkl*          0000000000000018
  24:      0:        pi: ^integer;
    000279: AE mrkl*          0000000000000018
    000282: AE mrkl*          0000000000000019
  25:      0:    
    000282: AE mrkl*          0000000000000019
    00028B: AE mrkl*          000000000000001A
  26:      0:    procedure stop1; begin end;
    00028B: AE mrkl*          000000000000001A
    000294: AE mrkl*          000000000000001A
    00029D: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0002AF: 0E retp           0000000000000000
    0002B8: AE mrkl*          000000000000001B
  27:      0:    
    0002B8: AE mrkl*          000000000000001B
    0002C1: AE mrkl*          000000000000001C
  28:      0:    procedure stop2; begin end;
    0002C1: AE mrkl*          000000000000001C
    0002CA: AE mrkl*          000000000000001C
    0002D3: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0002E5: 0E retp           0000000000000000
    0002EE: AE mrkl*          000000000000001D
  29:      0:    
    0002EE: AE mrkl*          000000000000001D
    0002F7: AE mrkl*          000000000000001E
  30:      0:    procedure stop3; begin end;
    0002F7: AE mrkl*          000000000000001E
    000300: AE mrkl*          000000000000001E
    000309: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    00031B: 0E retp           0000000000000000
    000324: AE mrkl*          000000000000001F
  31:      0:    
    000324: AE mrkl*          000000000000001F
    00032D: AE mrkl*          0000000000000020
  32:      0:    procedure traceme; begin end;
    00032D: AE mrkl*          0000000000000020
    000336: AE mrkl*          0000000000000020
    00033F: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000351: 0E retp           0000000000000000
    00035A: AE mrkl*          0000000000000021
  33:      0:    
    00035A: AE mrkl*          0000000000000021
    000363: AE mrkl*          0000000000000022
  34:      0:    procedure stop4; begin end;
    000363: AE mrkl*          0000000000000022
    00036C: AE mrkl*          0000000000000022
    000375: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000387: 0E retp           0000000000000000
    000390: AE mrkl*          0000000000000023
  35:      0:    
    000390: AE mrkl*          0000000000000023
    000399: AE mrkl*          0000000000000024
  36:      0:    procedure stop5; begin end;
    000399: AE mrkl*          0000000000000024
    0003A2: AE mrkl*          0000000000000024
    0003AB: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0003BD: 0E retp           0000000000000000
    0003C6: AE mrkl*          0000000000000025
  37:      0:    
    0003C6: AE mrkl*          0000000000000025
    0003CF: AE mrkl*          0000000000000026
  38:      0:    procedure stop6; begin end;
    0003CF: AE mrkl*          0000000000000026
    0003D8: AE mrkl*          0000000000000026
    0003E1: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0003F3: 0E retp           0000000000000000
    0003FC: AE mrkl*          0000000000000027
  39:      0:    
    0003FC: AE mrkl*          0000000000000027
    000405: AE mrkl*          0000000000000028
  40:      0:    procedure stop7; begin end;
    000405: AE mrkl*          0000000000000028
    00040E: AE mrkl*          0000000000000028
    000417: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000429: 0E retp           0000000000000000
    000432: AE mrkl*          0000000000000029
  41:      0:    
    000432: AE mrkl*          0000000000000029
    00043B: AE mrkl*          000000000000002A
  42:      0:    procedure stop8; begin end;
    00043B: AE mrkl*          000000000000002A
    000444: AE mrkl*          000000000000002A
    00044D: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    00045F: 0E retp           0000000000000000
    000468: AE mrkl*          000000000000002B
  43:      0:    
    000468: AE mrkl*          000000000000002B
    000471: AE mrkl*          000000000000002C
  44:      0:    procedure dostuff;
    000471: AE mrkl*          000000000000002C
    00047A: AE mrkl*          000000000000002D
  45:      0:    
    00047A: AE mrkl*          000000000000002D
    000483: AE mrkl*          000000000000002E
  46:      0:    var i: integer;
    000483: AE mrkl*          000000000000002E
    00048C: AE mrkl*          000000000000002F
  47:      0:    
    00048C: AE mrkl*          000000000000002F
    000495: AE mrkl*          0000000000000030
  48:      0:    begin
    000495: AE mrkl*          0000000000000030
    00049E: AE mrkl*          0000000000000030
    0004A7: 0B mst         01,FFFFFFFFFFFFFFD8,FFFFFFFFFFFFFFE0
    0004B9: AE mrkl*          0000000000000031
  49:      0:    
    0004B9: AE mrkl*          0000000000000031
    0004C2: AE mrkl*          0000000000000032
  50:      0:        for i := 1 to 4 do writeln('iteration: ', i);
    0004C2: AE mrkl*          0000000000000032
    0004CB: 7B ldci           0000000000000001
    0004D4: 02 stri        02,FFFFFFFFFFFFFFE0
    0004DE: 7B ldci           0000000000000004
    0004E7: 02 stri        02,FFFFFFFFFFFFFFD8
    0004F1: 00 lodi        02,FFFFFFFFFFFFFFE0
    0004FB: 02 stri        02,FFFFFFFFFFFFFFE8
    000505: AE mrkl*          0000000000000032
    00050E: 00 lodi        02,FFFFFFFFFFFFFFE8
    000518: 00 lodi        02,FFFFFFFFFFFFFFD8
    000522: A1 leqi        
    000523: 18 fjp            00000000000005C8
    00052C: 38 lca            0000000000002EC7
    000535: 05 lao            0000000000002F0A
    00053E: 76 swp            0000000000000008
    000547: 7B ldci           000000000000000B
    000550: 76 swp            0000000000000008
    000559: 7B ldci           000000000000000B
    000562: 0F csp            0000000000000006
    000564: 00 lodi        02,FFFFFFFFFFFFFFE8
    00056E: 7B ldci           000000000000000B
    000577: 0F csp            0000000000000008
    000579: 0F csp            0000000000000005
    00057B: 75 dmp            0000000000000008
    000584: 00 lodi        02,FFFFFFFFFFFFFFE8
    00058E: 00 lodi        02,FFFFFFFFFFFFFFD8
    000598: 89 equi        
    000599: 77 tjp            00000000000005C8
    0005A2: 00 lodi        02,FFFFFFFFFFFFFFE8
    0005AC: 0A inci           0000000000000001
    0005B5: 02 stri        02,FFFFFFFFFFFFFFE8
    0005BF: 17 ujp            0000000000000505
    0005C8: AE mrkl*          0000000000000032
    0005D1: 04 lda         02,FFFFFFFFFFFFFFE8
    0005DB: BD inv         
    0005DC: AE mrkl*          0000000000000033
  51:      0:    
    0005DC: AE mrkl*          0000000000000033
    0005E5: AE mrkl*          0000000000000034
  52:      0:    end;
    0005E5: AE mrkl*          0000000000000034
    0005EE: 0E retp           0000000000000000
    0005F7: AE mrkl*          0000000000000035
  53:      0:    
    0005F7: AE mrkl*          0000000000000035
    000600: AE mrkl*          0000000000000036
  54:      0:    procedure proc2(i: integer; c: char);
    000600: AE mrkl*          0000000000000036
    000609: AE mrkl*          0000000000000037
  55:      0:    
    000609: AE mrkl*          0000000000000037
    000612: AE mrkl*          0000000000000038
  56:      0:    var a: integer;
    000612: AE mrkl*          0000000000000038
    00061B: AE mrkl*          0000000000000039
  57:      0:        b: char;
    00061B: AE mrkl*          0000000000000039
    000624: AE mrkl*          000000000000003A
  58:      0:        d: ^integer;
    000624: AE mrkl*          000000000000003A
    00062D: AE mrkl*          000000000000003B
  59:      0:        e: ^integer;
    00062D: AE mrkl*          000000000000003B
    000636: AE mrkl*          000000000000003C
  60:      0:    
    000636: AE mrkl*          000000000000003C
    00063F: AE mrkl*          000000000000003D
  61:      0:    begin
    00063F: AE mrkl*          000000000000003D
    000648: AE mrkl*          000000000000003D
    000651: 0B mst         01,FFFFFFFFFFFFFFD0,FFFFFFFFFFFFFFE0
    000663: AE mrkl*          000000000000003E
  62:      0:    
    000663: AE mrkl*          000000000000003E
    00066C: AE mrkl*          000000000000003F
  63:      0:        a := 75;
    00066C: AE mrkl*          000000000000003F
    000675: 7B ldci           000000000000004B
    00067E: 02 stri        02,FFFFFFFFFFFFFFE8
    000688: AE mrkl*          0000000000000040
  64:      0:        b := '6';
    000688: AE mrkl*          0000000000000040
    000691: 7F ldcc           0000000000000036
    000693: 63 chkc           0000000000002EB7
    00069C: 4A strc        02,FFFFFFFFFFFFFFE7
    0006A6: AE mrkl*          0000000000000041
  65:      0:    
    0006A6: AE mrkl*          0000000000000041
    0006AF: AE mrkl*          0000000000000042
  66:      0:        stop3;
    0006AF: AE mrkl*          0000000000000042
    0006B8: F5 sfr            0000000000000000
    0006C1: 0C cup            0000000000000300
    0006CA: AE mrkl*          0000000000000042
    0006D3: AE mrkl*          0000000000000043
  67:      0:    
    0006D3: AE mrkl*          0000000000000043
    0006DC: AE mrkl*          0000000000000044
  68:      0:        writeln('Step past me!');
    0006DC: AE mrkl*          0000000000000044
    0006E5: 38 lca            0000000000002EA2
    0006EE: 05 lao            0000000000002F0A
    0006F7: 76 swp            0000000000000008
    000700: 7B ldci           000000000000000D
    000709: 76 swp            0000000000000008
    000712: 7B ldci           000000000000000D
    00071B: 0F csp            0000000000000006
    00071D: 0F csp            0000000000000005
    00071F: 75 dmp            0000000000000008
    000728: AE mrkl*          0000000000000045
  69:      0:        writeln('And me too!');
    000728: AE mrkl*          0000000000000045
    000731: 38 lca            0000000000002E8F
    00073A: 05 lao            0000000000002F0A
    000743: 76 swp            0000000000000008
    00074C: 7B ldci           000000000000000B
    000755: 76 swp            0000000000000008
    00075E: 7B ldci           000000000000000B
    000767: 0F csp            0000000000000006
    000769: 0F csp            0000000000000005
    00076B: 75 dmp            0000000000000008
    000774: AE mrkl*          0000000000000046
  70:      0:        writeln('1');
    000774: AE mrkl*          0000000000000046
    00077D: 7F ldcc           0000000000000031
    00077F: 05 lao            0000000000002F0A
    000788: 76 swp            0000000000000008
    000791: 7B ldci           0000000000000001
    00079A: 0F csp            000000000000000A
    00079C: 0F csp            0000000000000005
    00079E: 75 dmp            0000000000000008
    0007A7: AE mrkl*          0000000000000047
  71:      0:        writeln('2');
    0007A7: AE mrkl*          0000000000000047
    0007B0: 7F ldcc           0000000000000032
    0007B2: 05 lao            0000000000002F0A
    0007BB: 76 swp            0000000000000008
    0007C4: 7B ldci           0000000000000001
    0007CD: 0F csp            000000000000000A
    0007CF: 0F csp            0000000000000005
    0007D1: 75 dmp            0000000000000008
    0007DA: AE mrkl*          0000000000000048
  72:      0:        writeln('3');
    0007DA: AE mrkl*          0000000000000048
    0007E3: 7F ldcc           0000000000000033
    0007E5: 05 lao            0000000000002F0A
    0007EE: 76 swp            0000000000000008
    0007F7: 7B ldci           0000000000000001
    000800: 0F csp            000000000000000A
    000802: 0F csp            0000000000000005
    000804: 75 dmp            0000000000000008
    00080D: AE mrkl*          0000000000000049
  73:      0:        traceme;
    00080D: AE mrkl*          0000000000000049
    000816: F5 sfr            0000000000000000
    00081F: 0C cup            0000000000000336
    000828: AE mrkl*          0000000000000049
    000831: AE mrkl*          000000000000004A
  74:      0:        writeln('4');
    000831: AE mrkl*          000000000000004A
    00083A: 7F ldcc           0000000000000034
    00083C: 05 lao            0000000000002F0A
    000845: 76 swp            0000000000000008
    00084E: 7B ldci           0000000000000001
    000857: 0F csp            000000000000000A
    000859: 0F csp            0000000000000005
    00085B: 75 dmp            0000000000000008
    000864: AE mrkl*          000000000000004B
  75:      0:        stop4;
    000864: AE mrkl*          000000000000004B
    00086D: F5 sfr            0000000000000000
    000876: 0C cup            000000000000036C
    00087F: AE mrkl*          000000000000004B
    000888: AE mrkl*          000000000000004C
  76:      0:        writeln('5');
    000888: AE mrkl*          000000000000004C
    000891: 7F ldcc           0000000000000035
    000893: 05 lao            0000000000002F0A
    00089C: 76 swp            0000000000000008
    0008A5: 7B ldci           0000000000000001
    0008AE: 0F csp            000000000000000A
    0008B0: 0F csp            0000000000000005
    0008B2: 75 dmp            0000000000000008
    0008BB: AE mrkl*          000000000000004D
  77:      0:        a := 12;
    0008BB: AE mrkl*          000000000000004D
    0008C4: 7B ldci           000000000000000C
    0008CD: 02 stri        02,FFFFFFFFFFFFFFE8
    0008D7: AE mrkl*          000000000000004E
  78:      0:        writeln('6');
    0008D7: AE mrkl*          000000000000004E
    0008E0: 7F ldcc           0000000000000036
    0008E2: 05 lao            0000000000002F0A
    0008EB: 76 swp            0000000000000008
    0008F4: 7B ldci           0000000000000001
    0008FD: 0F csp            000000000000000A
    0008FF: 0F csp            0000000000000005
    000901: 75 dmp            0000000000000008
    00090A: AE mrkl*          000000000000004F
  79:      0:        stop5;
    00090A: AE mrkl*          000000000000004F
    000913: F5 sfr            0000000000000000
    00091C: 0C cup            00000000000003A2
    000925: AE mrkl*          000000000000004F
    00092E: AE mrkl*          0000000000000050
  80:      0:        writeln('7');
    00092E: AE mrkl*          0000000000000050
    000937: 7F ldcc           0000000000000037
    000939: 05 lao            0000000000002F0A
    000942: 76 swp            0000000000000008
    00094B: 7B ldci           0000000000000001
    000954: 0F csp            000000000000000A
    000956: 0F csp            0000000000000005
    000958: 75 dmp            0000000000000008
    000961: AE mrkl*          0000000000000051
  81:      0:        writeln('8');
    000961: AE mrkl*          0000000000000051
    00096A: 7F ldcc           0000000000000038
    00096C: 05 lao            0000000000002F0A
    000975: 76 swp            0000000000000008
    00097E: 7B ldci           0000000000000001
    000987: 0F csp            000000000000000A
    000989: 0F csp            0000000000000005
    00098B: 75 dmp            0000000000000008
    000994: AE mrkl*          0000000000000052
  82:      0:        dostuff;
    000994: AE mrkl*          0000000000000052
    00099D: F5 sfr            0000000000000000
    0009A6: 0C cup            000000000000048C
    0009AF: AE mrkl*          0000000000000052
    0009B8: AE mrkl*          0000000000000053
  83:      0:        writeln('9');
    0009B8: AE mrkl*          0000000000000053
    0009C1: 7F ldcc           0000000000000039
    0009C3: 05 lao            0000000000002F0A
    0009CC: 76 swp            0000000000000008
    0009D5: 7B ldci           0000000000000001
    0009DE: 0F csp            000000000000000A
    0009E0: 0F csp            0000000000000005
    0009E2: 75 dmp            0000000000000008
    0009EB: AE mrkl*          0000000000000054
  84:      0:        writeln('10');
    0009EB: AE mrkl*          0000000000000054
    0009F4: 38 lca            0000000000002E85
    0009FD: 05 lao            0000000000002F0A
    000A06: 76 swp            0000000000000008
    000A0F: 7B ldci           0000000000000002
    000A18: 76 swp            0000000000000008
    000A21: 7B ldci           0000000000000002
    000A2A: 0F csp            0000000000000006
    000A2C: 0F csp            0000000000000005
    000A2E: 75 dmp            0000000000000008
    000A37: AE mrkl*          0000000000000055
  85:      0:        stop6;
    000A37: AE mrkl*          0000000000000055
    000A40: F5 sfr            0000000000000000
    000A49: 0C cup            00000000000003D8
    000A52: AE mrkl*          0000000000000055
    000A5B: AE mrkl*          0000000000000056
  86:      0:        dostuff;
    000A5B: AE mrkl*          0000000000000056
    000A64: F5 sfr            0000000000000000
    000A6D: 0C cup            000000000000048C
    000A76: AE mrkl*          0000000000000056
    000A7F: AE mrkl*          0000000000000057
  87:      0:        stop7;
    000A7F: AE mrkl*          0000000000000057
    000A88: F5 sfr            0000000000000000
    000A91: 0C cup            000000000000040E
    000A9A: AE mrkl*          0000000000000057
    000AA3: AE mrkl*          0000000000000058
  88:      0:        new(d);
    000AA3: AE mrkl*          0000000000000058
    000AAC: 04 lda         02,FFFFFFFFFFFFFFDC
    000AB6: 7B ldci           0000000000000008
    000ABF: 0F csp            0000000000000004
    000AC1: AE mrkl*          0000000000000059
  89:      0:        new(e);
    000AC1: AE mrkl*          0000000000000059
    000ACA: 04 lda         02,FFFFFFFFFFFFFFD4
    000AD4: 7B ldci           0000000000000008
    000ADD: 0F csp            0000000000000004
    000ADF: AE mrkl*          000000000000005A
  90:      0:        dispose(d);
    000ADF: AE mrkl*          000000000000005A
    000AE8: 69 loda        02,FFFFFFFFFFFFFFDC
    000AF2: 7B ldci           0000000000000008
    000AFB: 0F csp            000000000000001A
    000AFD: AE mrkl*          000000000000005B
  91:      0:        writeln('11');
    000AFD: AE mrkl*          000000000000005B
    000B06: 38 lca            0000000000002E7B
    000B0F: 05 lao            0000000000002F0A
    000B18: 76 swp            0000000000000008
    000B21: 7B ldci           0000000000000002
    000B2A: 76 swp            0000000000000008
    000B33: 7B ldci           0000000000000002
    000B3C: 0F csp            0000000000000006
    000B3E: 0F csp            0000000000000005
    000B40: 75 dmp            0000000000000008
    000B49: AE mrkl*          000000000000005C
  92:      0:        stop8;
    000B49: AE mrkl*          000000000000005C
    000B52: F5 sfr            0000000000000000
    000B5B: 0C cup            0000000000000444
    000B64: AE mrkl*          000000000000005C
    000B6D: AE mrkl*          000000000000005D
  93:      0:    
    000B6D: AE mrkl*          000000000000005D
    000B76: AE mrkl*          000000000000005E
  94:      0:    end;
    000B76: AE mrkl*          000000000000005E
    000B7F: 0E retp           0000000000000010
    000B88: AE mrkl*          000000000000005F
  95:      0:    
    000B88: AE mrkl*          000000000000005F
    000B91: AE mrkl*          0000000000000060
  96:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
    000B91: AE mrkl*          0000000000000060
    000B9A: AE mrkl*          0000000000000061
  97:      0:    
    000B9A: AE mrkl*          0000000000000061
    000BA3: AE mrkl*          0000000000000062
  98:      0:    var i, x, i2: integer;
    000BA3: AE mrkl*          0000000000000062
    000BAC: AE mrkl*          0000000000000063
  99:      0:        c: char;
    000BAC: AE mrkl*          0000000000000063
    000BB5: AE mrkl*          0000000000000064
 100:      0:        b: boolean;
    000BB5: AE mrkl*          0000000000000064
    000BBE: AE mrkl*          0000000000000065
 101:      0:        e: enum;
    000BBE: AE mrkl*          0000000000000065
    000BC7: AE mrkl*          0000000000000066
 102:      0:        sr: sub;
    000BC7: AE mrkl*          0000000000000066
    000BD0: AE mrkl*          0000000000000067
 103:      0:        f: real;
    000BD0: AE mrkl*          0000000000000067
    000BD9: AE mrkl*          0000000000000068
 104:      0:        rv: r2;
    000BD9: AE mrkl*          0000000000000068
    000BE2: AE mrkl*          0000000000000069

debug> li $0

Addr    Op Ins            P  Q
----------------------------------
    000000: 14 lnp*           0000000000003964
    000009: 15 cal            000000000000004E
    000012: 3A stp*        
    000013: F2 eext*       
    000014: F2 eext*       
    000015: F2 eext*       
    000016: F2 eext*       
    000017: F2 eext*       
    000018: F2 eext*       
    000019: F2 eext*       
debug> li $0 $100

Addr    Op Ins            P  Q
----------------------------------
    000000: 14 lnp*           0000000000003964
    000009: 15 cal            000000000000004E
    000012: 3A stp*        
    000013: F2 eext*       
    000014: F2 eext*       
    000015: F2 eext*       
    000016: F2 eext*       
    000017: F2 eext*       
    000018: F2 eext*       
    000019: F2 eext*       
    00001A: F2 eext*       
    00001B: F2 eext*       
    00001C: F2 eext*       
    00001D: F2 eext*       
    00001E: F2 eext*       
    00001F: F2 eext*       
    000020: F2 eext*       
    000021: F2 eext*       
    000022: F2 eext*       
    000023: F2 eext*       
    000024: F2 eext*       
    000025: F2 eext*       
    000026: F2 eext*       
    000027: F2 eext*       
    000028: F2 eext*       
    000029: F2 eext*       
    00002A: F2 eext*       
    00002B: F2 eext*       
    00002C: F2 eext*       
    00002D: F2 eext*       
    00002E: F2 eext*       
    00002F: F2 eext*       
    000030: F2 eext*       
    000031: F2 eext*       
    000032: F2 eext*       
    000033: F2 eext*       
    000034: F2 eext*       
    000035: F2 eext*       
    000036: F2 eext*       
    000037: F2 eext*       
    000038: F2 eext*       
    000039: F2 eext*       
    00003A: F2 eext*       
    00003B: F2 eext*       
    00003C: F2 eext*       
    00003D: F2 eext*       
    00003E: F2 eext*       
    00003F: F2 eext*       
    000040: F2 eext*       
    000041: F2 eext*       
    000042: F2 eext*       
    000043: F2 eext*       
    000044: F2 eext*       
    000045: F2 eext*       
    000046: F2 eext*       
    000047: F2 eext*       
    000048: F2 eext*       
    000049: F2 eext*       
    00004A: F2 eext*       
    00004B: F2 eext*       
    00004C: F2 eext*       
    00004D: F2 eext*       
    00004E: AE mrkl*          0000000000000001
    000057: F5 sfr            0000000000000000
    000060: 0C cup            0000000000000134
    000069: 15 cal            0000000000000197
    000072: F5 sfr            0000000000000000
    00007B: 0C cup            000000000000017C
    000084: 16 ret         
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            0000000000002EEA
    0000DF: 05 lao            0000000000002F0A
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
debug> li $0:100

Addr    Op Ins            P  Q
----------------------------------
    000000: 14 lnp*           0000000000003964
    000009: 15 cal            000000000000004E
    000012: 3A stp*        
    000013: F2 eext*       
    000014: F2 eext*       
    000015: F2 eext*       
    000016: F2 eext*       
    000017: F2 eext*       
    000018: F2 eext*       
    000019: F2 eext*       
    00001A: F2 eext*       
    00001B: F2 eext*       
    00001C: F2 eext*       
    00001D: F2 eext*       
    00001E: F2 eext*       
    00001F: F2 eext*       
    000020: F2 eext*       
    000021: F2 eext*       
    000022: F2 eext*       
    000023: F2 eext*       
    000024: F2 eext*       
    000025: F2 eext*       
    000026: F2 eext*       
    000027: F2 eext*       
    000028: F2 eext*       
    000029: F2 eext*       
    00002A: F2 eext*       
    00002B: F2 eext*       
    00002C: F2 eext*       
    00002D: F2 eext*       
    00002E: F2 eext*       
    00002F: F2 eext*       
    000030: F2 eext*       
    000031: F2 eext*       
    000032: F2 eext*       
    000033: F2 eext*       
    000034: F2 eext*       
    000035: F2 eext*       
    000036: F2 eext*       
    000037: F2 eext*       
    000038: F2 eext*       
    000039: F2 eext*       
    00003A: F2 eext*       
    00003B: F2 eext*       
    00003C: F2 eext*       
    00003D: F2 eext*       
    00003E: F2 eext*       
    00003F: F2 eext*       
    000040: F2 eext*       
    000041: F2 eext*       
    000042: F2 eext*       
    000043: F2 eext*       
    000044: F2 eext*       
    000045: F2 eext*       
    000046: F2 eext*       
    000047: F2 eext*       
    000048: F2 eext*       
    000049: F2 eext*       
    00004A: F2 eext*       
    00004B: F2 eext*       
    00004C: F2 eext*       
    00004D: F2 eext*       
    00004E: AE mrkl*          0000000000000001
    000057: F5 sfr            0000000000000000
    000060: 0C cup            0000000000000134
    000069: 15 cal            0000000000000197
    000072: F5 sfr            0000000000000000
    00007B: 0C cup            000000000000017C
    000084: 16 ret         
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            0000000000002EEA
    0000DF: 05 lao            0000000000002F0A
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
    000103: 7B ldci           0000000000000013
    00010C: 0F csp            0000000000000006
    00010E: 0F csp            0000000000000005
    000110: 75 dmp            0000000000000008
    000119: AE mrkl*          0000000000000008
    000122: AE mrkl*          0000000000000009
    00012B: 0E retp           0000000000000000
    000134: AE mrkl*          000000000000000A
    00013D: AE mrkl*          000000000000000B
    000146: AE mrkl*          000000000000000B
    00014F: 0B mst         00,FFFFFFFFFFFFFFF8,0000000000000000
    000161: AE mrkl*          000000000000000C
    00016A: AE mrkl*          000000000000000D
    000173: 0E retp           0000000000000000
    00017C: 0B mst         01,0000000000000000,0000000000000000
    00018E: 0E retp           0000000000000000
    000197: AE mrkl*          0000000000000001
    0001A0: F5 sfr            0000000000000000
debug> li $4e

Addr    Op Ins            P  Q
----------------------------------
    00004E: AE mrkl*          0000000000000001
    000057: F5 sfr            0000000000000000
    000060: 0C cup            0000000000000134
    000069: 15 cal            0000000000000197
    000072: F5 sfr            0000000000000000
    00007B: 0C cup            000000000000017C
    000084: 16 ret         
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
debug> li $4e $100

Addr    Op Ins            P  Q
----------------------------------
    00004E: AE mrkl*          0000000000000001
    000057: F5 sfr            0000000000000000
    000060: 0C cup            0000000000000134
    000069: 15 cal            0000000000000197
    000072: F5 sfr            0000000000000000
    00007B: 0C cup            000000000000017C
    000084: 16 ret         
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            0000000000002EEA
    0000DF: 05 lao            0000000000002F0A
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
debug> li $4e:100

Addr    Op Ins            P  Q
----------------------------------
    00004E: AE mrkl*          0000000000000001
    000057: F5 sfr            0000000000000000
    000060: 0C cup            0000000000000134
    000069: 15 cal            0000000000000197
    000072: F5 sfr            0000000000000000
    00007B: 0C cup            000000000000017C
    000084: 16 ret         
    000085: AE mrkl*          0000000000000002
    00008E: AE mrkl*          0000000000000003
    000097: AE mrkl*          0000000000000004
    0000A0: AE mrkl*          0000000000000005
    0000A9: AE mrkl*          0000000000000005
    0000B2: 0B mst         01,FFFFFFFFFFFFFFF0,FFFFFFFFFFFFFFE0
    0000C4: AE mrkl*          0000000000000006
    0000CD: AE mrkl*          0000000000000007
    0000D6: 38 lca            0000000000002EEA
    0000DF: 05 lao            0000000000002F0A
    0000E8: 76 swp            0000000000000008
    0000F1: 7B ldci           0000000000000013
    0000FA: 76 swp            0000000000000008
    000103: 7B ldci           0000000000000013
    00010C: 0F csp            0000000000000006
    00010E: 0F csp            0000000000000005
    000110: 75 dmp            0000000000000008
    000119: AE mrkl*          0000000000000008
    000122: AE mrkl*          0000000000000009
    00012B: 0E retp           0000000000000000
    000134: AE mrkl*          000000000000000A
    00013D: AE mrkl*          000000000000000B
    000146: AE mrkl*          000000000000000B
    00014F: 0B mst         00,FFFFFFFFFFFFFFF8,0000000000000000
    000161: AE mrkl*          000000000000000C
    00016A: AE mrkl*          000000000000000D
    000173: 0E retp           0000000000000000
    00017C: 0B mst         01,0000000000000000,0000000000000000
    00018E: 0E retp           0000000000000000
    000197: AE mrkl*          0000000000000001
    0001A0: F5 sfr            0000000000000000
    0001A9: 0C cup            000000000000199F
    0001B2: 16 ret         
    0001B3: AE mrkl*          0000000000000002
    0001BC: AE mrkl*          0000000000000003
    0001C5: AE mrkl*          0000000000000004
    0001CE: AE mrkl*          0000000000000005
    0001D7: AE mrkl*          0000000000000006
    0001E0: AE mrkl*          0000000000000007
    0001E9: AE mrkl*          0000000000000008
    0001F2: AE mrkl*          0000000000000009
    0001FB: AE mrkl*          000000000000000A
    000204: AE mrkl*          000000000000000B
    00020D: AE mrkl*          000000000000000C
    000216: AE mrkl*          000000000000000D
    00021F: AE mrkl*          000000000000000E
    000228: AE mrkl*          000000000000000F
    000231: AE mrkl*          0000000000000010
    00023A: AE mrkl*          0000000000000011
    000243: AE mrkl*          0000000000000012
    00024C: AE mrkl*          0000000000000013
    000255: AE mrkl*          0000000000000014
    00025E: AE mrkl*          0000000000000015
    000267: AE mrkl*          0000000000000016
    000270: AE mrkl*          0000000000000017
    000279: AE mrkl*          0000000000000018
    000282: AE mrkl*          0000000000000019
    00028B: AE mrkl*          000000000000001A
    000294: AE mrkl*          000000000000001A
    00029D: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0002AF: 0E retp           0000000000000000
    0002B8: AE mrkl*          000000000000001B
    0002C1: AE mrkl*          000000000000001C
    0002CA: AE mrkl*          000000000000001C
    0002D3: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0002E5: 0E retp           0000000000000000
    0002EE: AE mrkl*          000000000000001D
    0002F7: AE mrkl*          000000000000001E
    000300: AE mrkl*          000000000000001E
    000309: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    00031B: 0E retp           0000000000000000
    000324: AE mrkl*          000000000000001F
    00032D: AE mrkl*          0000000000000020
    000336: AE mrkl*          0000000000000020
    00033F: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000351: 0E retp           0000000000000000
    00035A: AE mrkl*          0000000000000021
    000363: AE mrkl*          0000000000000022
    00036C: AE mrkl*          0000000000000022
    000375: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    000387: 0E retp           0000000000000000
    000390: AE mrkl*          0000000000000023
    000399: AE mrkl*          0000000000000024
    0003A2: AE mrkl*          0000000000000024
    0003AB: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0003BD: 0E retp           0000000000000000
    0003C6: AE mrkl*          0000000000000025
    0003CF: AE mrkl*          0000000000000026
    0003D8: AE mrkl*          0000000000000026
    0003E1: 0B mst         01,FFFFFFFFFFFFFFF0,0000000000000000
    0003F3: 0E retp           0000000000000000
    0003FC: AE mrkl*          0000000000000027
    000405: AE mrkl*          0000000000000028
debug> ! run until end of program block
debug> b debug_test stop1
debug> r
This is debug test
this is debug test1

=== break ===

  25:      0:    
  26:      1: b* procedure stop1; begin end;
  27:      0:    

debug> ! expressions/constants
debug> p $100

256

debug> p &100

64

debug> p %100

4

debug> p 255$

FF

debug> p 100&

144

debug> p 100%

1100100

debug> p not 1$

7FFFFFFFFFFFFFFE

debug> p 2+(3*4)

14

debug> p (2+3)*4

20

debug> p ['0'..'9','a','b']

['0'..'9','a'..'b']

debug> p 'hi there bob''s'

'hi there bob's'

debug> p 'hi '''' there'

'hi '' there'

debug> p 1

1

debug> p 12.34

 1.2340000000000000e+01

debug> p 3*4

12

debug> p 3.0*4.0

 1.2000000000000000e+01

debug> p 10/3

 3.3333333333333335e+00

debug> p 10.0/3.0

 3.3333333333333335e+00

debug> p 10 div 3

3

debug> p 10 mod 3

1

debug> p 10 and 3%

10

debug> p 1+2

3

debug> p 1.0+2.0

 3.0000000000000000e+00

debug> p 3-1

2

debug> p 3.0-1.0

 2.0000000000000000e+00

debug> p 10 or 3%

1011

debug> p 10 xor 3%

1001

debug> p 12 = 12

true(1)

debug> p 12 = 13

false(0)

debug> p 12 <> 12

false(0)

debug> p 12 <> 13

true(1)

debug> p 12 < 13

true(1)

debug> p 12 < 12

false(0)

debug> p 12 < 10

false(0)

debug> p 42 > 10

true(1)

debug> p 42 > 42

false(0)

debug> p 42 > 50

false(0)

debug> p 32 <= 40

true(1)

debug> p 32 <= 32

true(1)

debug> p 32 <= 12

false(0)

debug> p 92 >= 10

true(1)

debug> p 92 >= 92

true(1)

debug> p 92 >= 100

false(0)

debug> 
debug> p x

42

debug> p c

'a'(97)

debug> p b

true(1)

debug> p e

two(1)

debug> p sr

5

debug> p f

 1.2340000000000000e+11

debug> p rv

record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.6780000000000005e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.4320000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end

debug> p a

array 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 end

debug> p ar

array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end

debug> p a[5]

15

debug> p rv.rec.sr

3

debug> p rv.rec.a

array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end

debug> p rv.rec.a[5]

25

debug> p ar[5].e

one(0)

debug> p ar[6].rec.a[5]

40

debug> p pi$

396C

debug> p pi^

42

debug> 
debug> d 0


000000: 14 64 39 00 00 00 00 00 00 15 4E 00 00 00 00 00   .d9.......N.....
000010: 00 00 3A F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2   ..:.............
000020: F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2   ................
******: ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **   ****************
000040: F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 AE 01   ................
000050: 00 00 00 00 00 00 00 F5 00 00 00 00 00 00 00 00   ................
000060: 0C 34 01 00 00 00 00 00 00 15 97 01 00 00 00 00   .4..............
000070: 00 00 F5 00 00 00 00 00 00 00 00 0C 7C 01 00 00   ............|...
000080: 00 00 00 00 16 AE 02 00 00 00 00 00 00 00 AE 03   ................
000090: 00 00 00 00 00 00 00 AE 04 00 00 00 00 00 00 00   ................
0000A0: AE 05 00 00 00 00 00 00 00 AE 05 00 00 00 00 00   ................
0000B0: 00 00 0B 01 F0 FF FF FF FF FF FF FF E0 FF FF FF   ................
0000C0: FF FF FF FF AE 06 00 00 00 00 00 00 00 AE 07 00   ................
0000D0: 00 00 00 00 00 00 38 EA 2E 00 00 00 00 00 00 05   ......8.........
0000E0: 0A 2F 00 00 00 00 00 00 76 08 00 00 00 00 00 00   ./......v.......
0000F0: 00 7B 13 00 00 00 00 00 00 00 76 08 00 00 00 00   .{........v.....


debug> d 0 $100


000000: 14 64 39 00 00 00 00 00 00 15 4E 00 00 00 00 00   .d9.......N.....
000010: 00 00 3A F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2   ..:.............
000020: F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2   ................
******: ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **   ****************
000040: F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 AE 01   ................
000050: 00 00 00 00 00 00 00 F5 00 00 00 00 00 00 00 00   ................
000060: 0C 34 01 00 00 00 00 00 00 15 97 01 00 00 00 00   .4..............
000070: 00 00 F5 00 00 00 00 00 00 00 00 0C 7C 01 00 00   ............|...
000080: 00 00 00 00 16 AE 02 00 00 00 00 00 00 00 AE 03   ................
000090: 00 00 00 00 00 00 00 AE 04 00 00 00 00 00 00 00   ................
0000A0: AE 05 00 00 00 00 00 00 00 AE 05 00 00 00 00 00   ................
0000B0: 00 00 0B 01 F0 FF FF FF FF FF FF FF E0 FF FF FF   ................
0000C0: FF FF FF FF AE 06 00 00 00 00 00 00 00 AE 07 00   ................
0000D0: 00 00 00 00 00 00 38 EA 2E 00 00 00 00 00 00 05   ......8.........
0000E0: 0A 2F 00 00 00 00 00 00 76 08 00 00 00 00 00 00   ./......v.......
0000F0: 00 7B 13 00 00 00 00 00 00 00 76 08 00 00 00 00   .{........v.....
000100: 00                                                .


debug> d 0:$100


000000: 14 64 39 00 00 00 00 00 00 15 4E 00 00 00 00 00   .d9.......N.....
000010: 00 00 3A F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2   ..:.............
000020: F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2   ................
******: ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **   ****************
000040: F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 F2 AE 01   ................
000050: 00 00 00 00 00 00 00 F5 00 00 00 00 00 00 00 00   ................
000060: 0C 34 01 00 00 00 00 00 00 15 97 01 00 00 00 00   .4..............
000070: 00 00 F5 00 00 00 00 00 00 00 00 0C 7C 01 00 00   ............|...
000080: 00 00 00 00 16 AE 02 00 00 00 00 00 00 00 AE 03   ................
000090: 00 00 00 00 00 00 00 AE 04 00 00 00 00 00 00 00   ................
0000A0: AE 05 00 00 00 00 00 00 00 AE 05 00 00 00 00 00   ................
0000B0: 00 00 0B 01 F0 FF FF FF FF FF FF FF E0 FF FF FF   ................
0000C0: FF FF FF FF AE 06 00 00 00 00 00 00 00 AE 07 00   ................
0000D0: 00 00 00 00 00 00 38 EA 2E 00 00 00 00 00 00 05   ......8.........
0000E0: 0A 2F 00 00 00 00 00 00 76 08 00 00 00 00 00 00   ./......v.......
0000F0: 00 7B 13 00 00 00 00 00 00 00 76 08 00 00 00 00   .{........v.....


debug> d $100


000100: 00 00 00 7B 13 00 00 00 00 00 00 00 0F 06 0F 05   ...{............
000110: 75 08 00 00 00 00 00 00 00 AE 08 00 00 00 00 00   u...............
000120: 00 00 AE 09 00 00 00 00 00 00 00 0E 00 00 00 00   ................
000130: 00 00 00 00 AE 0A 00 00 00 00 00 00 00 AE 0B 00   ................
000140: 00 00 00 00 00 00 AE 0B 00 00 00 00 00 00 00 0B   ................
000150: 00 F8 FF FF FF FF FF FF FF 00 00 00 00 00 00 00   ................
000160: 00 AE 0C 00 00 00 00 00 00 00 AE 0D 00 00 00 00   ................
000170: 00 00 00 0E 00 00 00 00 00 00 00 00 0B 01 00 00   ................
000180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0E 00   ................
000190: 00 00 00 00 00 00 00 AE 01 00 00 00 00 00 00 00   ................
0001A0: F5 00 00 00 00 00 00 00 00 0C 9F 19 00 00 00 00   ................
0001B0: 00 00 16 AE 02 00 00 00 00 00 00 00 AE 03 00 00   ................
0001C0: 00 00 00 00 00 AE 04 00 00 00 00 00 00 00 AE 05   ................
0001D0: 00 00 00 00 00 00 00 AE 06 00 00 00 00 00 00 00   ................
0001E0: AE 07 00 00 00 00 00 00 00 AE 08 00 00 00 00 00   ................
0001F0: 00 00 AE 09 00 00 00 00 00 00 00 AE 0A 00 00 00   ................


debug> d $100 $100


000100: 00                                                .


debug> d $100:$100


000100: 00 00 00 7B 13 00 00 00 00 00 00 00 0F 06 0F 05   ...{............
000110: 75 08 00 00 00 00 00 00 00 AE 08 00 00 00 00 00   u...............
000120: 00 00 AE 09 00 00 00 00 00 00 00 0E 00 00 00 00   ................
000130: 00 00 00 00 AE 0A 00 00 00 00 00 00 00 AE 0B 00   ................
000140: 00 00 00 00 00 00 AE 0B 00 00 00 00 00 00 00 0B   ................
000150: 00 F8 FF FF FF FF FF FF FF 00 00 00 00 00 00 00   ................
000160: 00 AE 0C 00 00 00 00 00 00 00 AE 0D 00 00 00 00   ................
000170: 00 00 00 0E 00 00 00 00 00 00 00 00 0B 01 00 00   ................
000180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0E 00   ................
000190: 00 00 00 00 00 00 00 AE 01 00 00 00 00 00 00 00   ................
0001A0: F5 00 00 00 00 00 00 00 00 0C 9F 19 00 00 00 00   ................
0001B0: 00 00 16 AE 02 00 00 00 00 00 00 00 AE 03 00 00   ................
0001C0: 00 00 00 00 00 AE 04 00 00 00 00 00 00 00 AE 05   ................
0001D0: 00 00 00 00 00 00 00 AE 06 00 00 00 00 00 00 00   ................
0001E0: AE 07 00 00 00 00 00 00 00 AE 08 00 00 00 00 00   ................
0001F0: 00 00 AE 09 00 00 00 00 00 00 00 AE 0A 00 00 00   ................


debug> ! print contents of i, then modify using enter, then print again
debug> p x

42

debug> e *x 12 0 0 0
debug> p x

12

debug> st i $1234
debug> p i$

1234

debug> pg

Globals:

pi                   
ar                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
a                    array 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 end
rv                   record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.6780000000000005e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.4320000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
f                     1.2340000000000000e+11
sr                   5
e                    two(1)
b                    true(1)
c                    'a'(97)
i                    4660
x                    12
i2                   Undefined

debug> ! go down a level to proc1
debug> b stop2
debug> r

=== break ===

  27:      0:    
  28:      1: b* procedure stop2; begin end;
  29:      0:    

debug> ! step out of the stop
debug> ret

 159:      1:    
 160:      1:  *     proc2(74, 'j');
 161:      0:    

debug> 
debug> ! print parameters
debug> p pi

83

debug> p pc

'g'(103)

debug> p pb

true(1)

debug> p pe

two(1)

debug> p psr

7

debug> p pr

 9.8760000000000005e+01

debug> p prec

record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.6780000000000005e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.4320000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end

debug> p pa

array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end

debug> 
debug> ! print locals
debug> p x

43

debug> p c

'b'(98)

debug> p b

false(0)

debug> p e

three(2)

debug> p sr

8

debug> p f

 5.6780000000000000e+11

debug> p rv

record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
   8.7649999999999997e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
     3.6320000000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end

debug> p a

array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end

debug> p ar

array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end

debug> p a[5]

25

debug> p rv.rec.sr

4

debug> p rv.rec.a

array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end

debug> p rv.rec.a[5]

45

debug> p ar[5].e

one(0)

debug> p ar[6].rec.a[5]

80

debug> p ip$

397C

debug> p ip^

76

debug> 
debug> ! Various dumps. Note pl 2 and pp 2 dumps only dump one level since that is all
debug> ! there is.
debug> pl

Locals for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

ip                   
ar                   array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end
a                    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
rv                   record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
   8.7649999999999997e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
     3.6320000000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end
f                     5.6780000000000000e+11
sr                   8
e                    three(2)
b                    false(0)
c                    'b'(98)
i                    Undefined
x                    43
i2                   Undefined

debug> pl 2

Locals for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

ip                   
ar                   array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end
a                    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
rv                   record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
   8.7649999999999997e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
     3.6320000000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end
f                     5.6780000000000000e+11
sr                   8
e                    three(2)
b                    false(0)
c                    'b'(98)
i                    Undefined
x                    43
i2                   Undefined

debug> pp

Parameters for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

pa                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
prec                 record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.6780000000000005e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.4320000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
pr                    9.8760000000000005e+01
psr                  7
pe                   two(1)
pb                   true(1)
pc                   'g'(103)
pi                   83

debug> pp 2

Parameters for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

pa                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
prec                 record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.6780000000000005e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.4320000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
pr                    9.8760000000000005e+01
psr                  7
pe                   two(1)
pb                   true(1)
pc                   'g'(103)
pi                   83

debug> ds

Storage areas occupied

Program     000000-0028B3 (10420)
Constants   0028B4-002F07 (1620)
Globals     002F08-003963 (2652)
Stack/Heap  003964-FFFFFF (16762524)

debug> dd

Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80


Mark @FFFFC8
ep: 00FFFFD0: 00000005
sb: 00FFFFD8: 00FFFFA0
et: 00FFFFE0: 00FFFF60

debug> dd 1

Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80

debug> 
debug> ! go down a level to proc2
debug> b stop3
debug> r

=== break ===

  29:      0:    
  30:      1: b* procedure stop3; begin end;
  31:      0:    

debug> ret

  67:      1:    
  68:      1:  *     writeln('Step past me!');
  69:      0:        writeln('And me too!');

debug> 
debug> pl 2

Locals for block: proc2@p_i_c

e                    
d                    
b                    '6'(54)
a                    75


Locals for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

ip                   
ar                   array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
     4.3320000000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
       2.3650000000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end
a                    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
rv                   record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
   8.7649999999999997e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
     3.6320000000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end
f                     5.6780000000000000e+11
sr                   8
e                    three(2)
b                    false(0)
c                    'b'(98)
i                    Undefined
x                    43
i2                   Undefined

debug> pp 2

Parameters for block: proc2@p_i_c

c                    'j'(106)
i                    74


Parameters for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

pa                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
     5.6780000000000005e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
       5.4320000000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
prec                 record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
   5.6780000000000005e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
     5.4320000000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
pr                    9.8760000000000005e+01
psr                  7
pe                   two(1)
pb                   true(1)
pc                   'g'(103)
pi                   83

debug> dd

Mark @FFEB60
ep: 00FFEB68: 00FFEB80
sb: 00FFEB70: 00FFEB30
et: 00FFEB78: 00FFEB10


Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80


Mark @FFFFC8
ep: 00FFFFD0: 00000005
sb: 00FFFFD8: 00FFFFA0
et: 00FFFFE0: 00FFFF60

debug> dd 2

Mark @FFEB60
ep: 00FFEB68: 00FFEB80
sb: 00FFEB70: 00FFEB30
et: 00FFEB78: 00FFEB10


Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80

debug> ! step over some writes
debug> s 2
Step past me!

  68:      1:        writeln('Step past me!');
  69:      1:  *     writeln('And me too!');
  70:      0:        writeln('1');

And me too!

  69:      1:        writeln('And me too!');
  70:      1:  *     writeln('1');
  71:      0:        writeln('2');

debug> ss 2
1
2
debug> tp traceme
debug> b stop4
debug> r
3

  31:      0:    
  32:      1: t* procedure traceme; begin end;
  33:      0:    

4

=== break ===

  33:      0:    
  34:      1: b* procedure stop4; begin end;
  35:      0:    

debug> ret

  75:      2:        stop4;
  76:      1:  *     writeln('5');
  77:      0:        a := 12;

debug> lb

Breakpoints:

No  Src  Addr   Trc/brk
=======================
 1:  26: 0002AF b
 2:  28: 0002E5 b
 3:  30: 00031B b
 4:  32: 000351 t
 5:  34: 000387 b

debug> c
debug> lb

Breakpoints:

No  Src  Addr   Trc/brk
=======================

debug> w a
debug> w b
debug> b stop5
debug> r
5
Watch variable: @000008CD: a@00FFEB48: 75 -> 12
6

=== break ===

  35:      0:    
  36:      1: b* procedure stop5; begin end;
  37:      0:    

debug> s

  79:      2:        stop5;
  80:      1:  *     writeln('7');
  81:      0:        writeln('8');

debug> lw

Watch table:

1: 00FFEB48
2: 00FFEB47

debug> cw 1
debug> lw

Watch table:

1: 00FFEB47

debug> cw
debug> lw

Watch table:


debug> ts
debug> b stop6
debug> r
7

  80:      1:        writeln('7');
  81:      1:  *     writeln('8');
  82:      0:        dostuff;

8

  81:      1:        writeln('8');
  82:      1:  *     dostuff;
  83:      0:        writeln('9');


  46:      0:    var i: integer;
  47:      1:  * 
  48:      0:    begin


  47:      1:    
  48:      1:  * begin
  49:      0:    


  47:      1:    
  48:      2:  * begin
  49:      0:    


  48:      2:    begin
  49:      1:  * 
  50:      0:        for i := 1 to 4 do writeln('iteration: ', i);


  49:      1:    
  50:      1:  *     for i := 1 to 4 do writeln('iteration: ', i);
  51:      0:    


  49:      1:    
  50:      2:  *     for i := 1 to 4 do writeln('iteration: ', i);
  51:      0:    

iteration:           1

  49:      1:    
  50:      3:  *     for i := 1 to 4 do writeln('iteration: ', i);
  51:      0:    

iteration:           2

  49:      1:    
  50:      4:  *     for i := 1 to 4 do writeln('iteration: ', i);
  51:      0:    

iteration:           3

  49:      1:    
  50:      5:  *     for i := 1 to 4 do writeln('iteration: ', i);
  51:      0:    

iteration:           4

  49:      1:    
  50:      6:  *     for i := 1 to 4 do writeln('iteration: ', i);
  51:      0:    


  50:      6:        for i := 1 to 4 do writeln('iteration: ', i);
  51:      1:  * 
  52:      0:    end;


  51:      1:    
  52:      1:  * end;
  53:      0:    


  81:      1:        writeln('8');
  82:      2:  *     dostuff;
  83:      0:        writeln('9');


  82:      2:        dostuff;
  83:      1:  *     writeln('9');
  84:      0:        writeln('10');

9

  83:      1:        writeln('9');
  84:      1:  *     writeln('10');
  85:      0:        stop6;

10

  84:      1:        writeln('10');
  85:      1:  *     stop6;
  86:      0:        dostuff;


  37:      0:    
  38:      1: b* procedure stop6; begin end;
  39:      0:    


=== break ===

  37:      0:    
  38:      1: b* procedure stop6; begin end;
  39:      0:    

debug> ret

  84:      1:        writeln('10');
  85:      2:  *     stop6;
  86:      0:        dostuff;


  85:      2:        stop6;
  86:      1:  *     dostuff;
  87:      0:        stop7;


  85:      2:        stop6;
  86:      1:  *     dostuff;
  87:      0:        stop7;

debug> nts
debug> an
debug> b stop7
debug> r
iteration:           1
iteration:           2
iteration:           3
iteration:           4

=== break ===

  39:      0:    
  40:      1: b* procedure stop7; begin end;
  41:      0:    

debug> ret

  87:      2:        stop7;
  88:      1:  *     new(d);
  89:      0:        new(e);

debug> lsa

last source lines executed:

  88:      1:  *     new(d);
  87:      2:        stop7;
  40:      1: b  procedure stop7; begin end;
  87:      2:        stop7;
  86:      2:        dostuff;
  52:      2:    end;
  51:      2:    
  50:     12:        for i := 1 to 4 do writeln('iteration: ', i);
  50:     12:        for i := 1 to 4 do writeln('iteration: ', i);
  50:     12:        for i := 1 to 4 do writeln('iteration: ', i);

debug> s

  88:      1:        new(d);
  89:      1:  *     new(e);
  90:      0:        dispose(d);

debug> s

  89:      1:        new(e);
  90:      1:  *     dispose(d);
  91:      0:        writeln('11');

debug> hs

Heap space breakdown

addr: 003964:     16: alloc
addr: 003974:     16: alloc
addr: 003984:     16: alloc
addr: 003994:     16: alloc
debug> s

  90:      1:        dispose(d);
  91:      1:  *     writeln('11');
  92:      0:        stop8;

debug> hs

Heap space breakdown

addr: 003964:     16: alloc
addr: 003974:     16: alloc
addr: 003984:     16: free
addr: 003994:     16: alloc
debug> tr
debug> b stop8
debug> r
  2878/16771856->  6
11
  2880/16771880->  5


=== break ===

  41:      0:    
  42:      1: b* procedure stop8; begin end;
  43:      0:    

debug> ret

  93:      1:    
  94:      1:  * end;
  95:      0:    

debug> ntr
debug> ! step out of proc2
debug> s

 161:      1:    
 162:      1:  * end;
 163:      1:    

debug> ! step out of proc1
debug> s

 218:      1:    
 219:      1:  *     writeln('Step me!');
 220:      0:        for i := 1 to 3 do writeln('Hi there!');    

debug> 
debug> ! Test source profiling.
debug> ! Compare this listing with the one at program start to see if the counters have
debug> ! rolled.
debug> l debug_test 1 100

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      1:    procedure stop1; begin end;
  27:      0:    
  28:      1:    procedure stop2; begin end;
  29:      0:    
  30:      1:    procedure stop3; begin end;
  31:      0:    
  32:      1:    procedure traceme; begin end;
  33:      0:    
  34:      1:    procedure stop4; begin end;
  35:      0:    
  36:      1: b  procedure stop5; begin end;
  37:      0:    
  38:      1: b  procedure stop6; begin end;
  39:      0:    
  40:      1: b  procedure stop7; begin end;
  41:      0:    
  42:      1: b  procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure dostuff;
  45:      0:    
  46:      0:    var i: integer;
  47:      2:    
  48:      4:    begin
  49:      2:    
  50:     12:        for i := 1 to 4 do writeln('iteration: ', i);
  51:      2:    
  52:      2:    end;
  53:      0:    
  54:      0:    procedure proc2(i: integer; c: char);
  55:      0:    
  56:      0:    var a: integer;
  57:      0:        b: char;
  58:      0:        d: ^integer;
  59:      0:        e: ^integer;
  60:      1:    
  61:      2:    begin
  62:      1:    
  63:      1:        a := 75;
  64:      1:        b := '6';
  65:      1:    
  66:      2:        stop3;
  67:      1:    
  68:      1:        writeln('Step past me!');
  69:      1:        writeln('And me too!');
  70:      1:        writeln('1');
  71:      1:        writeln('2');
  72:      1:        writeln('3');
  73:      2:        traceme;
  74:      1:        writeln('4');
  75:      2:        stop4;
  76:      1:        writeln('5');
  77:      1:        a := 12;
  78:      1:        writeln('6');
  79:      2:        stop5;
  80:      1:        writeln('7');
  81:      1:        writeln('8');
  82:      2:        dostuff;
  83:      1:        writeln('9');
  84:      1:        writeln('10');
  85:      2:        stop6;
  86:      2:        dostuff;
  87:      2:        stop7;
  88:      1:        new(d);
  89:      1:        new(e);
  90:      1:        dispose(d);
  91:      1:        writeln('11');
  92:      2:        stop8;
  93:      1:    
  94:      1:    end;
  95:      0:    
  96:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  97:      0:    
  98:      0:    var i, x, i2: integer;
  99:      0:        c: char;
 100:      0:        b: boolean;

debug> 
debug> ! machine commands can be tested in source mode, we just don't get a machine
debug> ! level status print. Note li @pc can be a defacto assembly status, since it
debug> ! shows where the execution point is.
debug> !
debug> ! Note the test can need to be recalibrated if the source changes.
debug> !
debug> ! Test si, sis, lia, bi, tpi
debug> p @pc$

2757

debug> li @pc

Addr    Op Ins            P  Q
----------------------------------
 *  002757: 38 lca            00000000000028C5
    002760: 05 lao            0000000000002F0A
    002769: 76 swp            0000000000000008
    002772: 7B ldci           0000000000000008
    00277B: 76 swp            0000000000000008
    002784: 7B ldci           0000000000000008
    00278D: 0F csp            0000000000000006
    00278F: 0F csp            0000000000000005
    002791: 75 dmp            0000000000000008
    00279A: AE mrkl*          00000000000000DC
debug> si

 218:      1:    
 219:      1:  *     writeln('Step me!');
 220:      0:        for i := 1 to 3 do writeln('Hi there!');    

debug> p @pc$

2760

debug> li @pc

Addr    Op Ins            P  Q
----------------------------------
 *  002760: 05 lao            0000000000002F0A
    002769: 76 swp            0000000000000008
    002772: 7B ldci           0000000000000008
    00277B: 76 swp            0000000000000008
    002784: 7B ldci           0000000000000008
    00278D: 0F csp            0000000000000006
    00278F: 0F csp            0000000000000005
    002791: 75 dmp            0000000000000008
    00279A: AE mrkl*          00000000000000DC
    0027A3: 7B ldci           0000000000000001
debug> sis
debug> p @pc$

2769

debug> li @pc

Addr    Op Ins            P  Q
----------------------------------
 *  002769: 76 swp            0000000000000008
    002772: 7B ldci           0000000000000008
    00277B: 76 swp            0000000000000008
    002784: 7B ldci           0000000000000008
    00278D: 0F csp            0000000000000006
    00278F: 0F csp            0000000000000005
    002791: 75 dmp            0000000000000008
    00279A: AE mrkl*          00000000000000DC
    0027A3: 7B ldci           0000000000000001
    0027AC: 02 stri        01,FFFFFFFFFFFFFFF0
debug> an
debug> bi $2772
debug> r

=== break ===

 218:      1:    
 219:      1: b*     writeln('Step me!');
 220:      0:        for i := 1 to 3 do writeln('Hi there!');    

debug> p @pc$

2772

debug> li @pc

Addr    Op Ins            P  Q
----------------------------------
b*  002772: 7B ldci           0000000000000008
    00277B: 76 swp            0000000000000008
    002784: 7B ldci           0000000000000008
    00278D: 0F csp            0000000000000006
    00278F: 0F csp            0000000000000005
    002791: 75 dmp            0000000000000008
    00279A: AE mrkl*          00000000000000DC
    0027A3: 7B ldci           0000000000000001
    0027AC: 02 stri        01,FFFFFFFFFFFFFFF0
    0027B6: 7B ldci           0000000000000003
debug> lia

last instructions executed:

b * 002772: 7B ldci           0000000000000008
    002769: 76 swp            0000000000000008
    002760: 05 lao            0000000000002F0A
    002757: 38 lca            00000000000028C5
    00274E: AE mrkl*          00000000000000DB
    002745: AE mrkl*          00000000000000DA
    00273C: AE mrkl*          00000000000000D9
    001996: 0E retp           0000000000000040
    00198D: AE mrkl*          00000000000000A2
    001984: AE mrkl*          00000000000000A1

debug> ! Now step to for loop
debug> s
Step me!

 219:      1: b      writeln('Step me!');
 220:      1:  *     for i := 1 to 3 do writeln('Hi there!');    
 221:      0:    

debug> li @pc:20

Addr    Op Ins            P  Q
----------------------------------
 *  0027A3: 7B ldci           0000000000000001
    0027AC: 02 stri        01,FFFFFFFFFFFFFFF0
    0027B6: 7B ldci           0000000000000003
    0027BF: 02 stri        01,FFFFFFFFFFFFFFE8
    0027C9: 00 lodi        01,FFFFFFFFFFFFFFF0
    0027D3: 03 sroi           0000000000002F71
    0027DC: AE mrkl*          00000000000000DC
    0027E5: 01 ldoi           0000000000002F71
    0027EE: 00 lodi        01,FFFFFFFFFFFFFFE8
    0027F8: A1 leqi        
    0027F9: 18 fjp            0000000000002886
    002802: 38 lca            00000000000028B4
    00280B: 05 lao            0000000000002F0A
    002814: 76 swp            0000000000000008
    00281D: 7B ldci           0000000000000009
    002826: 76 swp            0000000000000008
    00282F: 7B ldci           0000000000000009
    002838: 0F csp            0000000000000006
    00283A: 0F csp            0000000000000005
    00283C: 75 dmp            0000000000000008
debug> ! trace at the top of the for loop, and break the line after
debug> tpi $27f9
debug> b 222
debug> r

 219:      1: b      writeln('Step me!');
 220:      2: t*     for i := 1 to 3 do writeln('Hi there!');    
 221:      0:    

Hi there!

 219:      1: b      writeln('Step me!');
 220:      3: t*     for i := 1 to 3 do writeln('Hi there!');    
 221:      0:    

Hi there!

 219:      1: b      writeln('Step me!');
 220:      4: t*     for i := 1 to 3 do writeln('Hi there!');    
 221:      0:    

Hi there!

=== break ===

 221:      1:    
 222:      1:  * end.

debug> 
debug> ! Test system variables
debug> ! This must be done at the end since it corrups the variables.
debug> p @pc$

28AB

debug> st @pc $1234
debug> p @pc$

1234

debug> 
debug> p @sp$

FFFFA0

debug> st @sp $1234
debug> p @sp$

1234

debug> 
debug> p @mp$

FFFFC8

debug> st @mp $1234
debug> p @mp$

1234

debug> 
debug> p @np$

39A4

debug> st @np $1234
debug> p @np$

1234

debug> 
debug> ! these variables can't be changed
debug> p @constants

10420

debug> p @heapbottom

14692

debug> 
debug> ! exit complete
debug> q

program complete
