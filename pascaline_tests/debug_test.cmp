Compiling debug_test1...
P6 Pascal compiler vs. 0.2.x
Pascal-P6 complies with the requirements of Pascaline version 0.4
and the following annexes: A,B,C,E.


     1       -8 module debug_test1(output); 
     2       -8  
     3       -8 procedure writehi; 
     4      -16  
     5      -16 begin 
     6        7  
     7        7     writeln('this is debug test1') 
     8       14  
     9       14 end; 
    10       17  
    11       17 begin 
    12       17  
    13       17 end. 

Errors in program: 0
Compiling debug_test...
P6 Pascal compiler vs. 0.2.x
Pascal-P6 complies with the requirements of Pascaline version 0.4
and the following annexes: A,B,C,E.


     1       -8 program debug_test(output); 
     2       -8  
     3       -8 joins debug_test1; 
     4        1  
     5        1 type 
     6       -8     enum = (one, two, three); 
     7       -8     sub = 1..10; 
     8       -8     a10 = array 10 of integer; 
     9       -8     r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real;  
    10       -8                a: a10 end; 
    11       -8     r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real;  
    12       -8                 rec: r; a: a10 end; 
    13       -8     a2 = array 10 of r2; 
    14       -8  
    15       -8 var i, x, i2: integer; 
    16       -8     c: char; 
    17       -8     b: boolean; 
    18       -8     e: enum; 
    19       -8     sr: sub; 
    20       -8     f: real; 
    21       -8     rv: r2; 
    22       -8     a: a10; 
    23       -8     ar: a2; 
    24       -8     pi: ^integer; 
    25       -8  
    26       -8 procedure stop1; begin end; 
    27        2  
    28        2 procedure stop2; begin end; 
    29        3  
    30        3 procedure stop3; begin end; 
    31        4  
    32        4 procedure traceme; begin end; 
    33        5  
    34        5 procedure stop4; begin end; 
    35        6  
    36        6 procedure stop5; begin end; 
    37        7  
    38        7 procedure stop6; begin end; 
    39        8  
    40        8 procedure stop7; begin end; 
    41        9  
    42        9 procedure stop8; begin end; 
    43       10  
    44       10 procedure stop9; begin end; 
    45       11  
    46       11 procedure dostuff; 
    47       11  
    48       11 var i: integer; 
    49      -24  
    50      -24 begin 
    51       11  
    52       11     for i := 1 to 4 do writeln('iteration: ', i); 
    53       43  
    54       43 end; 
    55       44  
    56       44 procedure proc2(i: integer; c: char); 
    57       44  
    58       44 var a: integer; 
    59      -24     b: char; 
    60      -25     d: ^integer; 
    61      -36     e: ^integer; 
    62      -44  
    63      -44 begin 
    64       44  
    65       44     a := 75; 
    66       46     b := '6'; 
    67       49  
    68       49     stop3; 
    69       50  
    70       50     writeln('Step past me!'); 
    71       59     writeln('And me too!'); 
    72       68     writeln('1'); 
    73       75     writeln('2'); 
    74       82     writeln('3'); 
    75       89     traceme; 
    76       90     writeln('4'); 
    77       97     stop4; 
    78       98     writeln('5'); 
    79      105     a := 12; 
    80      107     writeln('6'); 
    81      114     stop5; 
    82      115     writeln('7'); 
    83      122     writeln('8'); 
    84      129     dostuff; 
    85      130     writeln('9'); 
    86      137     writeln('10'); 
    87      146     stop6; 
    88      147     dostuff; 
    89      148     stop7; 
    90      149     new(d); 
    91      152     new(e); 
    92      155     dispose(d); 
    93      158     writeln('11'); 
    94      167     stop8; 
    95      168  
    96      168 end; 
c          unreferenced
i          unreferenced

    97      169  
    98      169 procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2); 
    99      169  
   100      169 var i, x, i2: integer; 
   101    -2464     c: char; 
   102    -2465     b: boolean; 
   103    -2466     e: enum; 
   104    -2468     sr: sub; 
   105    -2472     f: real; 
   106    -2480     rv: r2; 
   107    -2704     a: a10; 
   108    -2784     ar: a2; 
   109    -4984     ip: ^integer; 
   110    -4992  
   111    -4992 begin 
   112      175  
   113      175     x := 43; 
   114      177     c := 'b'; 
   115      180     b := false; 
   116      183     e := three; 
   117      186     sr := 8; 
   118      189     f := 56.78e10; 
   119      191  
   120      191     rv.i := 13; 
   121      193     rv.c := 'd'; 
   122      196     rv.b := false; 
   123      199     rv.e := one; 
   124      202     rv.sr := 4; 
   125      205     rv.r := 87.65e20; 
   126      207     rv.rec.i := 85; 
   127      209     rv.rec.c := 'x'; 
   128      212     rv.rec.b := true; 
   129      215     rv.rec.e := two; 
   130      218     rv.rec.sr := 4; 
   131      221     rv.rec.r := 36.32e8; 
   132      223     for i := 1 to 10 do rv.rec.a[i] := i+40; 
   133      252     for i := 1 to 10 do rv.a[i] := i+50; 
   134      281  
   135      281     for i := 1 to 10 do a[i] := i+20; 
   136      310  
   137      310     for i := 1 to 10 do begin 
   138      320  
   139      320         ar[i].i := 16; 
   140      327         ar[i].c := 'z'; 
   141      336         ar[i].b := false; 
   142      345         ar[i].e := three; 
   143      354         ar[i].sr := 2; 
   144      363         ar[i].r := 43.32e20; 
   145      371  
   146      371         ar[i].rec.i := 85; 
   147      379         ar[i].rec.c := 'k'; 
   148      388         ar[i].rec.b := true; 
   149      397         ar[i].rec.e := two; 
   150      406         ar[i].rec.sr := 7; 
   151      415         ar[i].rec.r := 23.65e8; 
   152      423         for i2 := 1 to 10 do ar[i].rec.a[i2] := i2+60; 
   153      457         for i2 := 1 to 10 do ar[i].a[i2] := i2+70; 
   154      491  
   155      491     end; 
   156      501  
   157      501     new(ip); 
   158      504     ip^ := 76; 
   159      508  
   160      508     stop2; 
   161      509  
   162      509     proc2(74, 'j'); 
   163      513  
   164      513 end; 
pa         unreferenced
pb         unreferenced
pe         unreferenced
pc         unreferenced
prec       unreferenced
pr         unreferenced
psr        unreferenced
pi         unreferenced

   165      514  
   166      514 procedure stepover1; 
   167      514  
   168      514 begin 
   169      514  
   170      514     writeln('I am stepover proc 1') 
   171      521  
   172      521 end; 
   173      524  
   174      524 procedure stepover2; 
   175      524  
   176      524 begin 
   177      524  
   178      524     writeln('I am stepover proc 2') 
   179      531  
   180      531 end; 
   181      534  
   182      534 begin 
   183      534  
   184      534     writeln('This is debug test'); 
   185      543     debug_test1.writehi; 
   186      544     x := 42; 
   187      546     c := 'a'; 
   188      549     b := true; 
   189      552     e := two; 
   190      555     sr := 5; 
   191      558     f := 12.34e10; 
   192      560  
   193      560     rv.i := 12; 
   194      562     rv.c := 'c'; 
   195      565     rv.b := false; 
   196      568     rv.e := three; 
   197      571     rv.sr := 6; 
   198      574     rv.r := 56.78e20; 
   199      576     rv.rec.i := 84; 
   200      578     rv.rec.c := 'u'; 
   201      581     rv.rec.b := true; 
   202      584     rv.rec.e := one; 
   203      587     rv.rec.sr := 3; 
   204      590     rv.rec.r := 54.32e8; 
   205      592     for i := 1 to 10 do rv.rec.a[i] := i+20; 
   206      621     for i := 1 to 10 do rv.a[i] := i+30; 
   207      650  
   208      650     for i := 1 to 10 do a[i] := i+10; 
   209      679  
   210      679     for i := 1 to 10 do begin 
   211      689  
   212      689         ar[i].i := 12; 
   213      696         ar[i].c := 'c'; 
   214      705         ar[i].b := false; 
   215      714         ar[i].e := three; 
   216      723         ar[i].sr := 1; 
   217      732         ar[i].r := 56.78e20; 
   218      740  
   219      740         ar[i].rec.i := 84; 
   220      748         ar[i].rec.c := 'u'; 
   221      757         ar[i].rec.b := true; 
   222      766         ar[i].rec.e := one; 
   223      775         ar[i].rec.sr := 3; 
   224      784         ar[i].rec.r := 54.32e8; 
   225      792         for i2 := 1 to 10 do ar[i].rec.a[i2] := i2+20; 
   226      826         for i2 := 1 to 10 do ar[i].a[i2] := i2+30; 
   227      860  
   228      860     end; 
   229      870  
   230      870     new(pi); 
   231      873     pi^ := 42; 
   232      877  
   233      877     stop1; 
   234      878  
   235      878     proc1(83, 'g', true, two, 7, 98.76, rv, ar); 
   236      891  
   237      891     stepover1; 
   238      892  
   239      892     stepover2; 
   240      893  
   241      893     writeln('Step me!'); 
   242      902  
   243      902     x := 1; 
   244      904     x := x+1; 
   245      908  
   246      908     for i := 1 to 3 do writeln('Hi there!');     
   247      937  
   248      937     stop9; 
   249      938  
   250      938 end. 

Errors in program: 0
P6 Pascal interpreter vs. 0.2.x

Assembling/loading program
Running program


P6 debug mode


 183:      1:    
 184:      1:  *     writeln('This is debug test');
 185:      0:        debug_test1.writehi;

debug> !
debug> ! Debug mode test input file.
debug> !
debug> 
debug> !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
debug> !
debug> ! Source level section
debug> !
debug> ! This first part is source level only. I put the machine level commands at the
debug> ! end because they can move around with changes to the program.
debug> !
debug> h

Commands:

h|help                             Help (this command)
l                   [m] [s[ e|:l]  List source lines
lc                  [m] [s[ e|:l]  List source and machine lines coordinated
li                  [s[ e|:l]      List machine instructions
p                   v              Print expression
d[b|l][8|16|32|64]  [s[ e|:l]      Dump memory
e                   a v[ v]...     Enter byte values to memory address
st                  d v            Set program variable
pg                                 Print all globals
pl                  [n]            print locals for current/number of enclosing
                                   blocks
pp                  [n]            print parameters for current/number of
                                   enclosing blocks
ds                                 Dump storage parameters
dd                  [n]            Dump display frames
df                  [n]            Dump frames formatted (call trace)
dst                 [n]            Dump stack words
b                   [m] a          Place breakpoint at source line
                                   number/routine
tp                  [m] a          Place tracepoint at source line
                                   number/routine
bi                  a              Place breakpoint at instruction
tpi                 a              Place tracepoint at instruction
c                   [a]            Clear breakpoint/all breakpoints
lb                                 List active breakpoints
w                   a              Watch variable
lw                                 List watch table
cw                  [n]            Clear watch table entry/all watch entries
lia                                List instruction analyzer buffer
lsa                                List source analyzer buffer
s                   [n]            Step next source line execution
ss                  [n]            Step next source line execution silently
si                  [n]            Step instructions
sis                 [n]            Step instructions silently
so                  [n]            Step over next source line execution
sso                 [n]            Step over next source line execution silently
sio                 [n]            Step over instructions
siso                [n]            Step over instructions silently
ret                                Return from subroutine
hs                                 Report heap space
ti                                 Turn instruction tracing on
nti                                Turn instruction tracing off
tr                                 Turn system routine tracing on
ntr                                Turn system routine tracing off
ts                                 Turn source line tracing on
nts                                Turn source line tracing off
spf                                Turn on source level profiling
nspf                               Turn off source level profiling
an                                 Turn on analyzer mode
nan                                Turn off analyzer mode
r                                  Run program from current pc
ps                                 Print current registers and instruction
q                                  Quit interpreter

!                                  Anywhere in line starts a comment

debug> ! turn on source profiling for later test
debug> spf
debug> l debug_test 1

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;

debug> l debug_test 1 100

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      0:    
  50:      0:    begin
  51:      0:    
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    
  54:      0:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      0:    
  63:      0:    begin
  64:      0:    
  65:      0:        a := 75;
  66:      0:        b := '6';
  67:      0:    
  68:      0:        stop3;
  69:      0:    
  70:      0:        writeln('Step past me!');
  71:      0:        writeln('And me too!');
  72:      0:        writeln('1');
  73:      0:        writeln('2');
  74:      0:        writeln('3');
  75:      0:        traceme;
  76:      0:        writeln('4');
  77:      0:        stop4;
  78:      0:        writeln('5');
  79:      0:        a := 12;
  80:      0:        writeln('6');
  81:      0:        stop5;
  82:      0:        writeln('7');
  83:      0:        writeln('8');
  84:      0:        dostuff;
  85:      0:        writeln('9');
  86:      0:        writeln('10');
  87:      0:        stop6;
  88:      0:        dostuff;
  89:      0:        stop7;
  90:      0:        new(d);
  91:      0:        new(e);
  92:      0:        dispose(d);
  93:      0:        writeln('11');
  94:      0:        stop8;
  95:      0:    
  96:      0:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;

debug> l debug_test 1:100

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      0:    
  50:      0:    begin
  51:      0:    
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    
  54:      0:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      0:    
  63:      0:    begin
  64:      0:    
  65:      0:        a := 75;
  66:      0:        b := '6';
  67:      0:    
  68:      0:        stop3;
  69:      0:    
  70:      0:        writeln('Step past me!');
  71:      0:        writeln('And me too!');
  72:      0:        writeln('1');
  73:      0:        writeln('2');
  74:      0:        writeln('3');
  75:      0:        traceme;
  76:      0:        writeln('4');
  77:      0:        stop4;
  78:      0:        writeln('5');
  79:      0:        a := 12;
  80:      0:        writeln('6');
  81:      0:        stop5;
  82:      0:        writeln('7');
  83:      0:        writeln('8');
  84:      0:        dostuff;
  85:      0:        writeln('9');
  86:      0:        writeln('10');
  87:      0:        stop6;
  88:      0:        dostuff;
  89:      0:        stop7;
  90:      0:        new(d);
  91:      0:        new(e);
  92:      0:        dispose(d);
  93:      0:        writeln('11');
  94:      0:        stop8;
  95:      0:    
  96:      0:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;

debug> l debug_test 5

   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    

debug> l debug_test 5 100

   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      0:    
  50:      0:    begin
  51:      0:    
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    
  54:      0:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      0:    
  63:      0:    begin
  64:      0:    
  65:      0:        a := 75;
  66:      0:        b := '6';
  67:      0:    
  68:      0:        stop3;
  69:      0:    
  70:      0:        writeln('Step past me!');
  71:      0:        writeln('And me too!');
  72:      0:        writeln('1');
  73:      0:        writeln('2');
  74:      0:        writeln('3');
  75:      0:        traceme;
  76:      0:        writeln('4');
  77:      0:        stop4;
  78:      0:        writeln('5');
  79:      0:        a := 12;
  80:      0:        writeln('6');
  81:      0:        stop5;
  82:      0:        writeln('7');
  83:      0:        writeln('8');
  84:      0:        dostuff;
  85:      0:        writeln('9');
  86:      0:        writeln('10');
  87:      0:        stop6;
  88:      0:        dostuff;
  89:      0:        stop7;
  90:      0:        new(d);
  91:      0:        new(e);
  92:      0:        dispose(d);
  93:      0:        writeln('11');
  94:      0:        stop8;
  95:      0:    
  96:      0:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;

debug> l debug_test 5:100

   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      0:    procedure stop1; begin end;
  27:      0:    
  28:      0:    procedure stop2; begin end;
  29:      0:    
  30:      0:    procedure stop3; begin end;
  31:      0:    
  32:      0:    procedure traceme; begin end;
  33:      0:    
  34:      0:    procedure stop4; begin end;
  35:      0:    
  36:      0:    procedure stop5; begin end;
  37:      0:    
  38:      0:    procedure stop6; begin end;
  39:      0:    
  40:      0:    procedure stop7; begin end;
  41:      0:    
  42:      0:    procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      0:    
  50:      0:    begin
  51:      0:    
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    
  54:      0:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      0:    
  63:      0:    begin
  64:      0:    
  65:      0:        a := 75;
  66:      0:        b := '6';
  67:      0:    
  68:      0:        stop3;
  69:      0:    
  70:      0:        writeln('Step past me!');
  71:      0:        writeln('And me too!');
  72:      0:        writeln('1');
  73:      0:        writeln('2');
  74:      0:        writeln('3');
  75:      0:        traceme;
  76:      0:        writeln('4');
  77:      0:        stop4;
  78:      0:        writeln('5');
  79:      0:        a := 12;
  80:      0:        writeln('6');
  81:      0:        stop5;
  82:      0:        writeln('7');
  83:      0:        writeln('8');
  84:      0:        dostuff;
  85:      0:        writeln('9');
  86:      0:        writeln('10');
  87:      0:        stop6;
  88:      0:        dostuff;
  89:      0:        stop7;
  90:      0:        new(d);
  91:      0:        new(e);
  92:      0:        dispose(d);
  93:      0:        writeln('11');
  94:      0:        stop8;
  95:      0:    
  96:      0:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;
 101:      0:        c: char;
 102:      0:        b: boolean;
 103:      0:        e: enum;
 104:      0:        sr: sub;

debug> lc debug_test1 1

   1:      1:    module debug_test1(output);
   2:      0:    
    00004A: AE mrkl*          0000000000000002
    000053: AE mrkl*          0000000000000003
   3:      0:    procedure writehi;
    000053: AE mrkl*          0000000000000003
    00005C: AE mrkl*          0000000000000004
   4:      0:    
    00005C: AE mrkl*          0000000000000004
    000065: AE mrkl*          0000000000000005
   5:      0:    begin
    000065: AE mrkl*          0000000000000005
    00006E: AE mrkl*          0000000000000005
    000077: 0B mst         01,0000000000000000,0000000000000020
    000089: AE mrkl*          0000000000000006
   6:      0:    
    000089: AE mrkl*          0000000000000006
    000092: AE mrkl*          0000000000000007
   7:      0:        writeln('this is debug test1')
    000092: AE mrkl*          0000000000000007
    00009B: 38 lca            000000000000315E
    0000A4: 05 lao            000000000000317E
    0000AD: 76 swp            0000000000000008
    0000B6: 7B ldci           0000000000000013
    0000BF: 76 swp            0000000000000008
    0000C8: 7B ldci           0000000000000013
    0000D1: 0F csp            0000000000000006
    0000D3: 0F csp            0000000000000005
    0000D5: 75 dmp            0000000000000008
    0000DE: AE mrkl*          0000000000000008
   8:      0:    
    0000DE: AE mrkl*          0000000000000008
    0000E7: AE mrkl*          0000000000000009
   9:      0:    end;
    0000E7: AE mrkl*          0000000000000009
    0000F0: 0E retp           0000000000000000
    0000F9: AE mrkl*          000000000000000A
  10:      1:    
    0000F9: AE mrkl*          000000000000000A
    000102: AE mrkl*          000000000000000B

debug> lc debug_test1 1 100

   1:      1:    module debug_test1(output);
   2:      0:    
    00004A: AE mrkl*          0000000000000002
    000053: AE mrkl*          0000000000000003
   3:      0:    procedure writehi;
    000053: AE mrkl*          0000000000000003
    00005C: AE mrkl*          0000000000000004
   4:      0:    
    00005C: AE mrkl*          0000000000000004
    000065: AE mrkl*          0000000000000005
   5:      0:    begin
    000065: AE mrkl*          0000000000000005
    00006E: AE mrkl*          0000000000000005
    000077: 0B mst         01,0000000000000000,0000000000000020
    000089: AE mrkl*          0000000000000006
   6:      0:    
    000089: AE mrkl*          0000000000000006
    000092: AE mrkl*          0000000000000007
   7:      0:        writeln('this is debug test1')
    000092: AE mrkl*          0000000000000007
    00009B: 38 lca            000000000000315E
    0000A4: 05 lao            000000000000317E
    0000AD: 76 swp            0000000000000008
    0000B6: 7B ldci           0000000000000013
    0000BF: 76 swp            0000000000000008
    0000C8: 7B ldci           0000000000000013
    0000D1: 0F csp            0000000000000006
    0000D3: 0F csp            0000000000000005
    0000D5: 75 dmp            0000000000000008
    0000DE: AE mrkl*          0000000000000008
   8:      0:    
    0000DE: AE mrkl*          0000000000000008
    0000E7: AE mrkl*          0000000000000009
   9:      0:    end;
    0000E7: AE mrkl*          0000000000000009
    0000F0: 0E retp           0000000000000000
    0000F9: AE mrkl*          000000000000000A
  10:      1:    
    0000F9: AE mrkl*          000000000000000A
    000102: AE mrkl*          000000000000000B
  11:      2:    begin
    000102: AE mrkl*          000000000000000B
    00010B: AE mrkl*          000000000000000B
    000114: 0B mst         00,0000000000000000,0000000000000000
    000126: AE mrkl*          000000000000000C
  12:      1:    
    000126: AE mrkl*          000000000000000C
    00012F: AE mrkl*          000000000000000D
  13:      1:    end.
    00012F: AE mrkl*          000000000000000D
    000138: 0E retp           0000000000000000
    000141: 0B mst         01,0000000000000000,0000000000000000
    000153: 0E retp           0000000000000000

debug> lc debug_test1 1:100

   1:      1:    module debug_test1(output);
   2:      0:    
    00004A: AE mrkl*          0000000000000002
    000053: AE mrkl*          0000000000000003
   3:      0:    procedure writehi;
    000053: AE mrkl*          0000000000000003
    00005C: AE mrkl*          0000000000000004
   4:      0:    
    00005C: AE mrkl*          0000000000000004
    000065: AE mrkl*          0000000000000005
   5:      0:    begin
    000065: AE mrkl*          0000000000000005
    00006E: AE mrkl*          0000000000000005
    000077: 0B mst         01,0000000000000000,0000000000000020
    000089: AE mrkl*          0000000000000006
   6:      0:    
    000089: AE mrkl*          0000000000000006
    000092: AE mrkl*          0000000000000007
   7:      0:        writeln('this is debug test1')
    000092: AE mrkl*          0000000000000007
    00009B: 38 lca            000000000000315E
    0000A4: 05 lao            000000000000317E
    0000AD: 76 swp            0000000000000008
    0000B6: 7B ldci           0000000000000013
    0000BF: 76 swp            0000000000000008
    0000C8: 7B ldci           0000000000000013
    0000D1: 0F csp            0000000000000006
    0000D3: 0F csp            0000000000000005
    0000D5: 75 dmp            0000000000000008
    0000DE: AE mrkl*          0000000000000008
   8:      0:    
    0000DE: AE mrkl*          0000000000000008
    0000E7: AE mrkl*          0000000000000009
   9:      0:    end;
    0000E7: AE mrkl*          0000000000000009
    0000F0: 0E retp           0000000000000000
    0000F9: AE mrkl*          000000000000000A
  10:      1:    
    0000F9: AE mrkl*          000000000000000A
    000102: AE mrkl*          000000000000000B
  11:      2:    begin
    000102: AE mrkl*          000000000000000B
    00010B: AE mrkl*          000000000000000B
    000114: 0B mst         00,0000000000000000,0000000000000000
    000126: AE mrkl*          000000000000000C
  12:      1:    
    000126: AE mrkl*          000000000000000C
    00012F: AE mrkl*          000000000000000D
  13:      1:    end.
    00012F: AE mrkl*          000000000000000D
    000138: 0E retp           0000000000000000
    000141: 0B mst         01,0000000000000000,0000000000000000
    000153: 0E retp           0000000000000000

debug> lc debug_test 5

   5:      0:    type
    000193: AE mrkl*          0000000000000005
    00019C: AE mrkl*          0000000000000006
   6:      0:        enum = (one, two, three);
    00019C: AE mrkl*          0000000000000006
    0001A5: AE mrkl*          0000000000000007
   7:      0:        sub = 1..10;
    0001A5: AE mrkl*          0000000000000007
    0001AE: AE mrkl*          0000000000000008
   8:      0:        a10 = array 10 of integer;
    0001AE: AE mrkl*          0000000000000008
    0001B7: AE mrkl*          0000000000000009
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001B7: AE mrkl*          0000000000000009
    0001C0: AE mrkl*          000000000000000A
  10:      0:                   a: a10 end;
    0001C0: AE mrkl*          000000000000000A
    0001C9: AE mrkl*          000000000000000B
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001C9: AE mrkl*          000000000000000B
    0001D2: AE mrkl*          000000000000000C
  12:      0:                    rec: r; a: a10 end;
    0001D2: AE mrkl*          000000000000000C
    0001DB: AE mrkl*          000000000000000D
  13:      0:        a2 = array 10 of r2;
    0001DB: AE mrkl*          000000000000000D
    0001E4: AE mrkl*          000000000000000E
  14:      0:    
    0001E4: AE mrkl*          000000000000000E
    0001ED: AE mrkl*          000000000000000F

debug> lc debug_test 5 100

   5:      0:    type
    000193: AE mrkl*          0000000000000005
    00019C: AE mrkl*          0000000000000006
   6:      0:        enum = (one, two, three);
    00019C: AE mrkl*          0000000000000006
    0001A5: AE mrkl*          0000000000000007
   7:      0:        sub = 1..10;
    0001A5: AE mrkl*          0000000000000007
    0001AE: AE mrkl*          0000000000000008
   8:      0:        a10 = array 10 of integer;
    0001AE: AE mrkl*          0000000000000008
    0001B7: AE mrkl*          0000000000000009
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001B7: AE mrkl*          0000000000000009
    0001C0: AE mrkl*          000000000000000A
  10:      0:                   a: a10 end;
    0001C0: AE mrkl*          000000000000000A
    0001C9: AE mrkl*          000000000000000B
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001C9: AE mrkl*          000000000000000B
    0001D2: AE mrkl*          000000000000000C
  12:      0:                    rec: r; a: a10 end;
    0001D2: AE mrkl*          000000000000000C
    0001DB: AE mrkl*          000000000000000D
  13:      0:        a2 = array 10 of r2;
    0001DB: AE mrkl*          000000000000000D
    0001E4: AE mrkl*          000000000000000E
  14:      0:    
    0001E4: AE mrkl*          000000000000000E
    0001ED: AE mrkl*          000000000000000F
  15:      0:    var i, x, i2: integer;
    0001ED: AE mrkl*          000000000000000F
    0001F6: AE mrkl*          0000000000000010
  16:      0:        c: char;
    0001F6: AE mrkl*          0000000000000010
    0001FF: AE mrkl*          0000000000000011
  17:      0:        b: boolean;
    0001FF: AE mrkl*          0000000000000011
    000208: AE mrkl*          0000000000000012
  18:      0:        e: enum;
    000208: AE mrkl*          0000000000000012
    000211: AE mrkl*          0000000000000013
  19:      0:        sr: sub;
    000211: AE mrkl*          0000000000000013
    00021A: AE mrkl*          0000000000000014
  20:      0:        f: real;
    00021A: AE mrkl*          0000000000000014
    000223: AE mrkl*          0000000000000015
  21:      0:        rv: r2;
    000223: AE mrkl*          0000000000000015
    00022C: AE mrkl*          0000000000000016
  22:      0:        a: a10;
    00022C: AE mrkl*          0000000000000016
    000235: AE mrkl*          0000000000000017
  23:      0:        ar: a2;
    000235: AE mrkl*          0000000000000017
    00023E: AE mrkl*          0000000000000018
  24:      0:        pi: ^integer;
    00023E: AE mrkl*          0000000000000018
    000247: AE mrkl*          0000000000000019
  25:      0:    
    000247: AE mrkl*          0000000000000019
    000250: AE mrkl*          000000000000001A
  26:      0:    procedure stop1; begin end;
    000250: AE mrkl*          000000000000001A
    000259: AE mrkl*          000000000000001A
    000262: 0B mst         01,0000000000000000,0000000000000000
    000274: 0E retp           0000000000000000
    00027D: AE mrkl*          000000000000001B
  27:      0:    
    00027D: AE mrkl*          000000000000001B
    000286: AE mrkl*          000000000000001C
  28:      0:    procedure stop2; begin end;
    000286: AE mrkl*          000000000000001C
    00028F: AE mrkl*          000000000000001C
    000298: 0B mst         01,0000000000000000,0000000000000000
    0002AA: 0E retp           0000000000000000
    0002B3: AE mrkl*          000000000000001D
  29:      0:    
    0002B3: AE mrkl*          000000000000001D
    0002BC: AE mrkl*          000000000000001E
  30:      0:    procedure stop3; begin end;
    0002BC: AE mrkl*          000000000000001E
    0002C5: AE mrkl*          000000000000001E
    0002CE: 0B mst         01,0000000000000000,0000000000000000
    0002E0: 0E retp           0000000000000000
    0002E9: AE mrkl*          000000000000001F
  31:      0:    
    0002E9: AE mrkl*          000000000000001F
    0002F2: AE mrkl*          0000000000000020
  32:      0:    procedure traceme; begin end;
    0002F2: AE mrkl*          0000000000000020
    0002FB: AE mrkl*          0000000000000020
    000304: 0B mst         01,0000000000000000,0000000000000000
    000316: 0E retp           0000000000000000
    00031F: AE mrkl*          0000000000000021
  33:      0:    
    00031F: AE mrkl*          0000000000000021
    000328: AE mrkl*          0000000000000022
  34:      0:    procedure stop4; begin end;
    000328: AE mrkl*          0000000000000022
    000331: AE mrkl*          0000000000000022
    00033A: 0B mst         01,0000000000000000,0000000000000000
    00034C: 0E retp           0000000000000000
    000355: AE mrkl*          0000000000000023
  35:      0:    
    000355: AE mrkl*          0000000000000023
    00035E: AE mrkl*          0000000000000024
  36:      0:    procedure stop5; begin end;
    00035E: AE mrkl*          0000000000000024
    000367: AE mrkl*          0000000000000024
    000370: 0B mst         01,0000000000000000,0000000000000000
    000382: 0E retp           0000000000000000
    00038B: AE mrkl*          0000000000000025
  37:      0:    
    00038B: AE mrkl*          0000000000000025
    000394: AE mrkl*          0000000000000026
  38:      0:    procedure stop6; begin end;
    000394: AE mrkl*          0000000000000026
    00039D: AE mrkl*          0000000000000026
    0003A6: 0B mst         01,0000000000000000,0000000000000000
    0003B8: 0E retp           0000000000000000
    0003C1: AE mrkl*          0000000000000027
  39:      0:    
    0003C1: AE mrkl*          0000000000000027
    0003CA: AE mrkl*          0000000000000028
  40:      0:    procedure stop7; begin end;
    0003CA: AE mrkl*          0000000000000028
    0003D3: AE mrkl*          0000000000000028
    0003DC: 0B mst         01,0000000000000000,0000000000000000
    0003EE: 0E retp           0000000000000000
    0003F7: AE mrkl*          0000000000000029
  41:      0:    
    0003F7: AE mrkl*          0000000000000029
    000400: AE mrkl*          000000000000002A
  42:      0:    procedure stop8; begin end;
    000400: AE mrkl*          000000000000002A
    000409: AE mrkl*          000000000000002A
    000412: 0B mst         01,0000000000000000,0000000000000000
    000424: 0E retp           0000000000000000
    00042D: AE mrkl*          000000000000002B
  43:      0:    
    00042D: AE mrkl*          000000000000002B
    000436: AE mrkl*          000000000000002C
  44:      0:    procedure stop9; begin end;
    000436: AE mrkl*          000000000000002C
    00043F: AE mrkl*          000000000000002C
    000448: 0B mst         01,0000000000000000,0000000000000000
    00045A: 0E retp           0000000000000000
    000463: AE mrkl*          000000000000002D
  45:      0:    
    000463: AE mrkl*          000000000000002D
    00046C: AE mrkl*          000000000000002E
  46:      0:    procedure dostuff;
    00046C: AE mrkl*          000000000000002E
    000475: AE mrkl*          000000000000002F
  47:      0:    
    000475: AE mrkl*          000000000000002F
    00047E: AE mrkl*          0000000000000030
  48:      0:    var i: integer;
    00047E: AE mrkl*          0000000000000030
    000487: AE mrkl*          0000000000000031
  49:      0:    
    000487: AE mrkl*          0000000000000031
    000490: AE mrkl*          0000000000000032
  50:      0:    begin
    000490: AE mrkl*          0000000000000032
    000499: AE mrkl*          0000000000000032
    0004A2: 0B mst         01,0000000000000018,0000000000000020
    0004B4: AE mrkl*          0000000000000033
  51:      0:    
    0004B4: AE mrkl*          0000000000000033
    0004BD: AE mrkl*          0000000000000034
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
    0004BD: AE mrkl*          0000000000000034
    0004C6: 7B ldci           0000000000000001
    0004CF: 02 stri        02,FFFFFFFFFFFFFFE0
    0004D9: 7B ldci           0000000000000004
    0004E2: 02 stri        02,FFFFFFFFFFFFFFD8
    0004EC: 00 lodi        02,FFFFFFFFFFFFFFE0
    0004F6: 02 stri        02,FFFFFFFFFFFFFFE8
    000500: AE mrkl*          0000000000000034
    000509: 00 lodi        02,FFFFFFFFFFFFFFE8
    000513: 00 lodi        02,FFFFFFFFFFFFFFD8
    00051D: A1 leqi        
    00051E: 18 fjp            00000000000005C3
    000527: 38 lca            000000000000313B
    000530: 05 lao            000000000000317E
    000539: 76 swp            0000000000000008
    000542: 7B ldci           000000000000000B
    00054B: 76 swp            0000000000000008
    000554: 7B ldci           000000000000000B
    00055D: 0F csp            0000000000000006
    00055F: 00 lodi        02,FFFFFFFFFFFFFFE8
    000569: 7B ldci           000000000000000B
    000572: 0F csp            0000000000000008
    000574: 0F csp            0000000000000005
    000576: 75 dmp            0000000000000008
    00057F: 00 lodi        02,FFFFFFFFFFFFFFE8
    000589: 00 lodi        02,FFFFFFFFFFFFFFD8
    000593: 89 equi        
    000594: 77 tjp            00000000000005C3
    00059D: 00 lodi        02,FFFFFFFFFFFFFFE8
    0005A7: 0A inci           0000000000000001
    0005B0: 02 stri        02,FFFFFFFFFFFFFFE8
    0005BA: 17 ujp            0000000000000500
    0005C3: AE mrkl*          0000000000000034
    0005CC: 04 lda         02,FFFFFFFFFFFFFFE8
    0005D6: BD inv         
    0005D7: AE mrkl*          0000000000000035
  53:      0:    
    0005D7: AE mrkl*          0000000000000035
    0005E0: AE mrkl*          0000000000000036
  54:      0:    end;
    0005E0: AE mrkl*          0000000000000036
    0005E9: 0E retp           0000000000000000
    0005F2: AE mrkl*          0000000000000037
  55:      0:    
    0005F2: AE mrkl*          0000000000000037
    0005FB: AE mrkl*          0000000000000038
  56:      0:    procedure proc2(i: integer; c: char);
    0005FB: AE mrkl*          0000000000000038
    000604: AE mrkl*          0000000000000039
  57:      0:    
    000604: AE mrkl*          0000000000000039
    00060D: AE mrkl*          000000000000003A
  58:      0:    var a: integer;
    00060D: AE mrkl*          000000000000003A
    000616: AE mrkl*          000000000000003B
  59:      0:        b: char;
    000616: AE mrkl*          000000000000003B
    00061F: AE mrkl*          000000000000003C
  60:      0:        d: ^integer;
    00061F: AE mrkl*          000000000000003C
    000628: AE mrkl*          000000000000003D
  61:      0:        e: ^integer;
    000628: AE mrkl*          000000000000003D
    000631: AE mrkl*          000000000000003E
  62:      0:    
    000631: AE mrkl*          000000000000003E
    00063A: AE mrkl*          000000000000003F
  63:      0:    begin
    00063A: AE mrkl*          000000000000003F
    000643: AE mrkl*          000000000000003F
    00064C: 0B mst         01,0000000000000020,0000000000000020
    00065E: AE mrkl*          0000000000000040
  64:      0:    
    00065E: AE mrkl*          0000000000000040
    000667: AE mrkl*          0000000000000041
  65:      0:        a := 75;
    000667: AE mrkl*          0000000000000041
    000670: 7B ldci           000000000000004B
    000679: 02 stri        02,FFFFFFFFFFFFFFE8
    000683: AE mrkl*          0000000000000042
  66:      0:        b := '6';
    000683: AE mrkl*          0000000000000042
    00068C: 7F ldcc           0000000000000036
    00068E: 63 chkc           000000000000312B
    000697: 4A strc        02,FFFFFFFFFFFFFFE7
    0006A1: AE mrkl*          0000000000000043
  67:      0:    
    0006A1: AE mrkl*          0000000000000043
    0006AA: AE mrkl*          0000000000000044
  68:      0:        stop3;
    0006AA: AE mrkl*          0000000000000044
    0006B3: F5 sfr            0000000000000000
    0006BC: 0C cup            00000000000002C5
    0006C5: AE mrkl*          0000000000000044
    0006CE: AE mrkl*          0000000000000045
  69:      0:    
    0006CE: AE mrkl*          0000000000000045
    0006D7: AE mrkl*          0000000000000046
  70:      0:        writeln('Step past me!');
    0006D7: AE mrkl*          0000000000000046
    0006E0: 38 lca            0000000000003116
    0006E9: 05 lao            000000000000317E
    0006F2: 76 swp            0000000000000008
    0006FB: 7B ldci           000000000000000D
    000704: 76 swp            0000000000000008
    00070D: 7B ldci           000000000000000D
    000716: 0F csp            0000000000000006
    000718: 0F csp            0000000000000005
    00071A: 75 dmp            0000000000000008
    000723: AE mrkl*          0000000000000047
  71:      0:        writeln('And me too!');
    000723: AE mrkl*          0000000000000047
    00072C: 38 lca            0000000000003103
    000735: 05 lao            000000000000317E
    00073E: 76 swp            0000000000000008
    000747: 7B ldci           000000000000000B
    000750: 76 swp            0000000000000008
    000759: 7B ldci           000000000000000B
    000762: 0F csp            0000000000000006
    000764: 0F csp            0000000000000005
    000766: 75 dmp            0000000000000008
    00076F: AE mrkl*          0000000000000048
  72:      0:        writeln('1');
    00076F: AE mrkl*          0000000000000048
    000778: 7F ldcc           0000000000000031
    00077A: 05 lao            000000000000317E
    000783: 76 swp            0000000000000008
    00078C: 7B ldci           0000000000000001
    000795: 0F csp            000000000000000A
    000797: 0F csp            0000000000000005
    000799: 75 dmp            0000000000000008
    0007A2: AE mrkl*          0000000000000049
  73:      0:        writeln('2');
    0007A2: AE mrkl*          0000000000000049
    0007AB: 7F ldcc           0000000000000032
    0007AD: 05 lao            000000000000317E
    0007B6: 76 swp            0000000000000008
    0007BF: 7B ldci           0000000000000001
    0007C8: 0F csp            000000000000000A
    0007CA: 0F csp            0000000000000005
    0007CC: 75 dmp            0000000000000008
    0007D5: AE mrkl*          000000000000004A
  74:      0:        writeln('3');
    0007D5: AE mrkl*          000000000000004A
    0007DE: 7F ldcc           0000000000000033
    0007E0: 05 lao            000000000000317E
    0007E9: 76 swp            0000000000000008
    0007F2: 7B ldci           0000000000000001
    0007FB: 0F csp            000000000000000A
    0007FD: 0F csp            0000000000000005
    0007FF: 75 dmp            0000000000000008
    000808: AE mrkl*          000000000000004B
  75:      0:        traceme;
    000808: AE mrkl*          000000000000004B
    000811: F5 sfr            0000000000000000
    00081A: 0C cup            00000000000002FB
    000823: AE mrkl*          000000000000004B
    00082C: AE mrkl*          000000000000004C
  76:      0:        writeln('4');
    00082C: AE mrkl*          000000000000004C
    000835: 7F ldcc           0000000000000034
    000837: 05 lao            000000000000317E
    000840: 76 swp            0000000000000008
    000849: 7B ldci           0000000000000001
    000852: 0F csp            000000000000000A
    000854: 0F csp            0000000000000005
    000856: 75 dmp            0000000000000008
    00085F: AE mrkl*          000000000000004D
  77:      0:        stop4;
    00085F: AE mrkl*          000000000000004D
    000868: F5 sfr            0000000000000000
    000871: 0C cup            0000000000000331
    00087A: AE mrkl*          000000000000004D
    000883: AE mrkl*          000000000000004E
  78:      0:        writeln('5');
    000883: AE mrkl*          000000000000004E
    00088C: 7F ldcc           0000000000000035
    00088E: 05 lao            000000000000317E
    000897: 76 swp            0000000000000008
    0008A0: 7B ldci           0000000000000001
    0008A9: 0F csp            000000000000000A
    0008AB: 0F csp            0000000000000005
    0008AD: 75 dmp            0000000000000008
    0008B6: AE mrkl*          000000000000004F
  79:      0:        a := 12;
    0008B6: AE mrkl*          000000000000004F
    0008BF: 7B ldci           000000000000000C
    0008C8: 02 stri        02,FFFFFFFFFFFFFFE8
    0008D2: AE mrkl*          0000000000000050
  80:      0:        writeln('6');
    0008D2: AE mrkl*          0000000000000050
    0008DB: 7F ldcc           0000000000000036
    0008DD: 05 lao            000000000000317E
    0008E6: 76 swp            0000000000000008
    0008EF: 7B ldci           0000000000000001
    0008F8: 0F csp            000000000000000A
    0008FA: 0F csp            0000000000000005
    0008FC: 75 dmp            0000000000000008
    000905: AE mrkl*          0000000000000051
  81:      0:        stop5;
    000905: AE mrkl*          0000000000000051
    00090E: F5 sfr            0000000000000000
    000917: 0C cup            0000000000000367
    000920: AE mrkl*          0000000000000051
    000929: AE mrkl*          0000000000000052
  82:      0:        writeln('7');
    000929: AE mrkl*          0000000000000052
    000932: 7F ldcc           0000000000000037
    000934: 05 lao            000000000000317E
    00093D: 76 swp            0000000000000008
    000946: 7B ldci           0000000000000001
    00094F: 0F csp            000000000000000A
    000951: 0F csp            0000000000000005
    000953: 75 dmp            0000000000000008
    00095C: AE mrkl*          0000000000000053
  83:      0:        writeln('8');
    00095C: AE mrkl*          0000000000000053
    000965: 7F ldcc           0000000000000038
    000967: 05 lao            000000000000317E
    000970: 76 swp            0000000000000008
    000979: 7B ldci           0000000000000001
    000982: 0F csp            000000000000000A
    000984: 0F csp            0000000000000005
    000986: 75 dmp            0000000000000008
    00098F: AE mrkl*          0000000000000054
  84:      0:        dostuff;
    00098F: AE mrkl*          0000000000000054
    000998: F5 sfr            0000000000000000
    0009A1: 0C cup            0000000000000487
    0009AA: AE mrkl*          0000000000000054
    0009B3: AE mrkl*          0000000000000055
  85:      0:        writeln('9');
    0009B3: AE mrkl*          0000000000000055
    0009BC: 7F ldcc           0000000000000039
    0009BE: 05 lao            000000000000317E
    0009C7: 76 swp            0000000000000008
    0009D0: 7B ldci           0000000000000001
    0009D9: 0F csp            000000000000000A
    0009DB: 0F csp            0000000000000005
    0009DD: 75 dmp            0000000000000008
    0009E6: AE mrkl*          0000000000000056
  86:      0:        writeln('10');
    0009E6: AE mrkl*          0000000000000056
    0009EF: 38 lca            00000000000030F9
    0009F8: 05 lao            000000000000317E
    000A01: 76 swp            0000000000000008
    000A0A: 7B ldci           0000000000000002
    000A13: 76 swp            0000000000000008
    000A1C: 7B ldci           0000000000000002
    000A25: 0F csp            0000000000000006
    000A27: 0F csp            0000000000000005
    000A29: 75 dmp            0000000000000008
    000A32: AE mrkl*          0000000000000057
  87:      0:        stop6;
    000A32: AE mrkl*          0000000000000057
    000A3B: F5 sfr            0000000000000000
    000A44: 0C cup            000000000000039D
    000A4D: AE mrkl*          0000000000000057
    000A56: AE mrkl*          0000000000000058
  88:      0:        dostuff;
    000A56: AE mrkl*          0000000000000058
    000A5F: F5 sfr            0000000000000000
    000A68: 0C cup            0000000000000487
    000A71: AE mrkl*          0000000000000058
    000A7A: AE mrkl*          0000000000000059
  89:      0:        stop7;
    000A7A: AE mrkl*          0000000000000059
    000A83: F5 sfr            0000000000000000
    000A8C: 0C cup            00000000000003D3
    000A95: AE mrkl*          0000000000000059
    000A9E: AE mrkl*          000000000000005A
  90:      0:        new(d);
    000A9E: AE mrkl*          000000000000005A
    000AA7: 04 lda         02,FFFFFFFFFFFFFFDC
    000AB1: 7B ldci           0000000000000008
    000ABA: 0F csp            0000000000000004
    000ABC: AE mrkl*          000000000000005B
  91:      0:        new(e);
    000ABC: AE mrkl*          000000000000005B
    000AC5: 04 lda         02,FFFFFFFFFFFFFFD4
    000ACF: 7B ldci           0000000000000008
    000AD8: 0F csp            0000000000000004
    000ADA: AE mrkl*          000000000000005C
  92:      0:        dispose(d);
    000ADA: AE mrkl*          000000000000005C
    000AE3: 69 loda        02,FFFFFFFFFFFFFFDC
    000AED: 7B ldci           0000000000000008
    000AF6: 0F csp            000000000000001A
    000AF8: AE mrkl*          000000000000005D
  93:      0:        writeln('11');
    000AF8: AE mrkl*          000000000000005D
    000B01: 38 lca            00000000000030EF
    000B0A: 05 lao            000000000000317E
    000B13: 76 swp            0000000000000008
    000B1C: 7B ldci           0000000000000002
    000B25: 76 swp            0000000000000008
    000B2E: 7B ldci           0000000000000002
    000B37: 0F csp            0000000000000006
    000B39: 0F csp            0000000000000005
    000B3B: 75 dmp            0000000000000008
    000B44: AE mrkl*          000000000000005E
  94:      0:        stop8;
    000B44: AE mrkl*          000000000000005E
    000B4D: F5 sfr            0000000000000000
    000B56: 0C cup            0000000000000409
    000B5F: AE mrkl*          000000000000005E
    000B68: AE mrkl*          000000000000005F
  95:      0:    
    000B68: AE mrkl*          000000000000005F
    000B71: AE mrkl*          0000000000000060
  96:      0:    end;
    000B71: AE mrkl*          0000000000000060
    000B7A: 0E retp           0000000000000010
    000B83: AE mrkl*          0000000000000061
  97:      0:    
    000B83: AE mrkl*          0000000000000061
    000B8C: AE mrkl*          0000000000000062
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
    000B8C: AE mrkl*          0000000000000062
    000B95: AE mrkl*          0000000000000063
  99:      0:    
    000B95: AE mrkl*          0000000000000063
    000B9E: AE mrkl*          0000000000000064
 100:      0:    var i, x, i2: integer;
    000B9E: AE mrkl*          0000000000000064
    000BA7: AE mrkl*          0000000000000065

debug> lc debug_test 5:100

   5:      0:    type
    000193: AE mrkl*          0000000000000005
    00019C: AE mrkl*          0000000000000006
   6:      0:        enum = (one, two, three);
    00019C: AE mrkl*          0000000000000006
    0001A5: AE mrkl*          0000000000000007
   7:      0:        sub = 1..10;
    0001A5: AE mrkl*          0000000000000007
    0001AE: AE mrkl*          0000000000000008
   8:      0:        a10 = array 10 of integer;
    0001AE: AE mrkl*          0000000000000008
    0001B7: AE mrkl*          0000000000000009
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001B7: AE mrkl*          0000000000000009
    0001C0: AE mrkl*          000000000000000A
  10:      0:                   a: a10 end;
    0001C0: AE mrkl*          000000000000000A
    0001C9: AE mrkl*          000000000000000B
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
    0001C9: AE mrkl*          000000000000000B
    0001D2: AE mrkl*          000000000000000C
  12:      0:                    rec: r; a: a10 end;
    0001D2: AE mrkl*          000000000000000C
    0001DB: AE mrkl*          000000000000000D
  13:      0:        a2 = array 10 of r2;
    0001DB: AE mrkl*          000000000000000D
    0001E4: AE mrkl*          000000000000000E
  14:      0:    
    0001E4: AE mrkl*          000000000000000E
    0001ED: AE mrkl*          000000000000000F
  15:      0:    var i, x, i2: integer;
    0001ED: AE mrkl*          000000000000000F
    0001F6: AE mrkl*          0000000000000010
  16:      0:        c: char;
    0001F6: AE mrkl*          0000000000000010
    0001FF: AE mrkl*          0000000000000011
  17:      0:        b: boolean;
    0001FF: AE mrkl*          0000000000000011
    000208: AE mrkl*          0000000000000012
  18:      0:        e: enum;
    000208: AE mrkl*          0000000000000012
    000211: AE mrkl*          0000000000000013
  19:      0:        sr: sub;
    000211: AE mrkl*          0000000000000013
    00021A: AE mrkl*          0000000000000014
  20:      0:        f: real;
    00021A: AE mrkl*          0000000000000014
    000223: AE mrkl*          0000000000000015
  21:      0:        rv: r2;
    000223: AE mrkl*          0000000000000015
    00022C: AE mrkl*          0000000000000016
  22:      0:        a: a10;
    00022C: AE mrkl*          0000000000000016
    000235: AE mrkl*          0000000000000017
  23:      0:        ar: a2;
    000235: AE mrkl*          0000000000000017
    00023E: AE mrkl*          0000000000000018
  24:      0:        pi: ^integer;
    00023E: AE mrkl*          0000000000000018
    000247: AE mrkl*          0000000000000019
  25:      0:    
    000247: AE mrkl*          0000000000000019
    000250: AE mrkl*          000000000000001A
  26:      0:    procedure stop1; begin end;
    000250: AE mrkl*          000000000000001A
    000259: AE mrkl*          000000000000001A
    000262: 0B mst         01,0000000000000000,0000000000000000
    000274: 0E retp           0000000000000000
    00027D: AE mrkl*          000000000000001B
  27:      0:    
    00027D: AE mrkl*          000000000000001B
    000286: AE mrkl*          000000000000001C
  28:      0:    procedure stop2; begin end;
    000286: AE mrkl*          000000000000001C
    00028F: AE mrkl*          000000000000001C
    000298: 0B mst         01,0000000000000000,0000000000000000
    0002AA: 0E retp           0000000000000000
    0002B3: AE mrkl*          000000000000001D
  29:      0:    
    0002B3: AE mrkl*          000000000000001D
    0002BC: AE mrkl*          000000000000001E
  30:      0:    procedure stop3; begin end;
    0002BC: AE mrkl*          000000000000001E
    0002C5: AE mrkl*          000000000000001E
    0002CE: 0B mst         01,0000000000000000,0000000000000000
    0002E0: 0E retp           0000000000000000
    0002E9: AE mrkl*          000000000000001F
  31:      0:    
    0002E9: AE mrkl*          000000000000001F
    0002F2: AE mrkl*          0000000000000020
  32:      0:    procedure traceme; begin end;
    0002F2: AE mrkl*          0000000000000020
    0002FB: AE mrkl*          0000000000000020
    000304: 0B mst         01,0000000000000000,0000000000000000
    000316: 0E retp           0000000000000000
    00031F: AE mrkl*          0000000000000021
  33:      0:    
    00031F: AE mrkl*          0000000000000021
    000328: AE mrkl*          0000000000000022
  34:      0:    procedure stop4; begin end;
    000328: AE mrkl*          0000000000000022
    000331: AE mrkl*          0000000000000022
    00033A: 0B mst         01,0000000000000000,0000000000000000
    00034C: 0E retp           0000000000000000
    000355: AE mrkl*          0000000000000023
  35:      0:    
    000355: AE mrkl*          0000000000000023
    00035E: AE mrkl*          0000000000000024
  36:      0:    procedure stop5; begin end;
    00035E: AE mrkl*          0000000000000024
    000367: AE mrkl*          0000000000000024
    000370: 0B mst         01,0000000000000000,0000000000000000
    000382: 0E retp           0000000000000000
    00038B: AE mrkl*          0000000000000025
  37:      0:    
    00038B: AE mrkl*          0000000000000025
    000394: AE mrkl*          0000000000000026
  38:      0:    procedure stop6; begin end;
    000394: AE mrkl*          0000000000000026
    00039D: AE mrkl*          0000000000000026
    0003A6: 0B mst         01,0000000000000000,0000000000000000
    0003B8: 0E retp           0000000000000000
    0003C1: AE mrkl*          0000000000000027
  39:      0:    
    0003C1: AE mrkl*          0000000000000027
    0003CA: AE mrkl*          0000000000000028
  40:      0:    procedure stop7; begin end;
    0003CA: AE mrkl*          0000000000000028
    0003D3: AE mrkl*          0000000000000028
    0003DC: 0B mst         01,0000000000000000,0000000000000000
    0003EE: 0E retp           0000000000000000
    0003F7: AE mrkl*          0000000000000029
  41:      0:    
    0003F7: AE mrkl*          0000000000000029
    000400: AE mrkl*          000000000000002A
  42:      0:    procedure stop8; begin end;
    000400: AE mrkl*          000000000000002A
    000409: AE mrkl*          000000000000002A
    000412: 0B mst         01,0000000000000000,0000000000000000
    000424: 0E retp           0000000000000000
    00042D: AE mrkl*          000000000000002B
  43:      0:    
    00042D: AE mrkl*          000000000000002B
    000436: AE mrkl*          000000000000002C
  44:      0:    procedure stop9; begin end;
    000436: AE mrkl*          000000000000002C
    00043F: AE mrkl*          000000000000002C
    000448: 0B mst         01,0000000000000000,0000000000000000
    00045A: 0E retp           0000000000000000
    000463: AE mrkl*          000000000000002D
  45:      0:    
    000463: AE mrkl*          000000000000002D
    00046C: AE mrkl*          000000000000002E
  46:      0:    procedure dostuff;
    00046C: AE mrkl*          000000000000002E
    000475: AE mrkl*          000000000000002F
  47:      0:    
    000475: AE mrkl*          000000000000002F
    00047E: AE mrkl*          0000000000000030
  48:      0:    var i: integer;
    00047E: AE mrkl*          0000000000000030
    000487: AE mrkl*          0000000000000031
  49:      0:    
    000487: AE mrkl*          0000000000000031
    000490: AE mrkl*          0000000000000032
  50:      0:    begin
    000490: AE mrkl*          0000000000000032
    000499: AE mrkl*          0000000000000032
    0004A2: 0B mst         01,0000000000000018,0000000000000020
    0004B4: AE mrkl*          0000000000000033
  51:      0:    
    0004B4: AE mrkl*          0000000000000033
    0004BD: AE mrkl*          0000000000000034
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);
    0004BD: AE mrkl*          0000000000000034
    0004C6: 7B ldci           0000000000000001
    0004CF: 02 stri        02,FFFFFFFFFFFFFFE0
    0004D9: 7B ldci           0000000000000004
    0004E2: 02 stri        02,FFFFFFFFFFFFFFD8
    0004EC: 00 lodi        02,FFFFFFFFFFFFFFE0
    0004F6: 02 stri        02,FFFFFFFFFFFFFFE8
    000500: AE mrkl*          0000000000000034
    000509: 00 lodi        02,FFFFFFFFFFFFFFE8
    000513: 00 lodi        02,FFFFFFFFFFFFFFD8
    00051D: A1 leqi        
    00051E: 18 fjp            00000000000005C3
    000527: 38 lca            000000000000313B
    000530: 05 lao            000000000000317E
    000539: 76 swp            0000000000000008
    000542: 7B ldci           000000000000000B
    00054B: 76 swp            0000000000000008
    000554: 7B ldci           000000000000000B
    00055D: 0F csp            0000000000000006
    00055F: 00 lodi        02,FFFFFFFFFFFFFFE8
    000569: 7B ldci           000000000000000B
    000572: 0F csp            0000000000000008
    000574: 0F csp            0000000000000005
    000576: 75 dmp            0000000000000008
    00057F: 00 lodi        02,FFFFFFFFFFFFFFE8
    000589: 00 lodi        02,FFFFFFFFFFFFFFD8
    000593: 89 equi        
    000594: 77 tjp            00000000000005C3
    00059D: 00 lodi        02,FFFFFFFFFFFFFFE8
    0005A7: 0A inci           0000000000000001
    0005B0: 02 stri        02,FFFFFFFFFFFFFFE8
    0005BA: 17 ujp            0000000000000500
    0005C3: AE mrkl*          0000000000000034
    0005CC: 04 lda         02,FFFFFFFFFFFFFFE8
    0005D6: BD inv         
    0005D7: AE mrkl*          0000000000000035
  53:      0:    
    0005D7: AE mrkl*          0000000000000035
    0005E0: AE mrkl*          0000000000000036
  54:      0:    end;
    0005E0: AE mrkl*          0000000000000036
    0005E9: 0E retp           0000000000000000
    0005F2: AE mrkl*          0000000000000037
  55:      0:    
    0005F2: AE mrkl*          0000000000000037
    0005FB: AE mrkl*          0000000000000038
  56:      0:    procedure proc2(i: integer; c: char);
    0005FB: AE mrkl*          0000000000000038
    000604: AE mrkl*          0000000000000039
  57:      0:    
    000604: AE mrkl*          0000000000000039
    00060D: AE mrkl*          000000000000003A
  58:      0:    var a: integer;
    00060D: AE mrkl*          000000000000003A
    000616: AE mrkl*          000000000000003B
  59:      0:        b: char;
    000616: AE mrkl*          000000000000003B
    00061F: AE mrkl*          000000000000003C
  60:      0:        d: ^integer;
    00061F: AE mrkl*          000000000000003C
    000628: AE mrkl*          000000000000003D
  61:      0:        e: ^integer;
    000628: AE mrkl*          000000000000003D
    000631: AE mrkl*          000000000000003E
  62:      0:    
    000631: AE mrkl*          000000000000003E
    00063A: AE mrkl*          000000000000003F
  63:      0:    begin
    00063A: AE mrkl*          000000000000003F
    000643: AE mrkl*          000000000000003F
    00064C: 0B mst         01,0000000000000020,0000000000000020
    00065E: AE mrkl*          0000000000000040
  64:      0:    
    00065E: AE mrkl*          0000000000000040
    000667: AE mrkl*          0000000000000041
  65:      0:        a := 75;
    000667: AE mrkl*          0000000000000041
    000670: 7B ldci           000000000000004B
    000679: 02 stri        02,FFFFFFFFFFFFFFE8
    000683: AE mrkl*          0000000000000042
  66:      0:        b := '6';
    000683: AE mrkl*          0000000000000042
    00068C: 7F ldcc           0000000000000036
    00068E: 63 chkc           000000000000312B
    000697: 4A strc        02,FFFFFFFFFFFFFFE7
    0006A1: AE mrkl*          0000000000000043
  67:      0:    
    0006A1: AE mrkl*          0000000000000043
    0006AA: AE mrkl*          0000000000000044
  68:      0:        stop3;
    0006AA: AE mrkl*          0000000000000044
    0006B3: F5 sfr            0000000000000000
    0006BC: 0C cup            00000000000002C5
    0006C5: AE mrkl*          0000000000000044
    0006CE: AE mrkl*          0000000000000045
  69:      0:    
    0006CE: AE mrkl*          0000000000000045
    0006D7: AE mrkl*          0000000000000046
  70:      0:        writeln('Step past me!');
    0006D7: AE mrkl*          0000000000000046
    0006E0: 38 lca            0000000000003116
    0006E9: 05 lao            000000000000317E
    0006F2: 76 swp            0000000000000008
    0006FB: 7B ldci           000000000000000D
    000704: 76 swp            0000000000000008
    00070D: 7B ldci           000000000000000D
    000716: 0F csp            0000000000000006
    000718: 0F csp            0000000000000005
    00071A: 75 dmp            0000000000000008
    000723: AE mrkl*          0000000000000047
  71:      0:        writeln('And me too!');
    000723: AE mrkl*          0000000000000047
    00072C: 38 lca            0000000000003103
    000735: 05 lao            000000000000317E
    00073E: 76 swp            0000000000000008
    000747: 7B ldci           000000000000000B
    000750: 76 swp            0000000000000008
    000759: 7B ldci           000000000000000B
    000762: 0F csp            0000000000000006
    000764: 0F csp            0000000000000005
    000766: 75 dmp            0000000000000008
    00076F: AE mrkl*          0000000000000048
  72:      0:        writeln('1');
    00076F: AE mrkl*          0000000000000048
    000778: 7F ldcc           0000000000000031
    00077A: 05 lao            000000000000317E
    000783: 76 swp            0000000000000008
    00078C: 7B ldci           0000000000000001
    000795: 0F csp            000000000000000A
    000797: 0F csp            0000000000000005
    000799: 75 dmp            0000000000000008
    0007A2: AE mrkl*          0000000000000049
  73:      0:        writeln('2');
    0007A2: AE mrkl*          0000000000000049
    0007AB: 7F ldcc           0000000000000032
    0007AD: 05 lao            000000000000317E
    0007B6: 76 swp            0000000000000008
    0007BF: 7B ldci           0000000000000001
    0007C8: 0F csp            000000000000000A
    0007CA: 0F csp            0000000000000005
    0007CC: 75 dmp            0000000000000008
    0007D5: AE mrkl*          000000000000004A
  74:      0:        writeln('3');
    0007D5: AE mrkl*          000000000000004A
    0007DE: 7F ldcc           0000000000000033
    0007E0: 05 lao            000000000000317E
    0007E9: 76 swp            0000000000000008
    0007F2: 7B ldci           0000000000000001
    0007FB: 0F csp            000000000000000A
    0007FD: 0F csp            0000000000000005
    0007FF: 75 dmp            0000000000000008
    000808: AE mrkl*          000000000000004B
  75:      0:        traceme;
    000808: AE mrkl*          000000000000004B
    000811: F5 sfr            0000000000000000
    00081A: 0C cup            00000000000002FB
    000823: AE mrkl*          000000000000004B
    00082C: AE mrkl*          000000000000004C
  76:      0:        writeln('4');
    00082C: AE mrkl*          000000000000004C
    000835: 7F ldcc           0000000000000034
    000837: 05 lao            000000000000317E
    000840: 76 swp            0000000000000008
    000849: 7B ldci           0000000000000001
    000852: 0F csp            000000000000000A
    000854: 0F csp            0000000000000005
    000856: 75 dmp            0000000000000008
    00085F: AE mrkl*          000000000000004D
  77:      0:        stop4;
    00085F: AE mrkl*          000000000000004D
    000868: F5 sfr            0000000000000000
    000871: 0C cup            0000000000000331
    00087A: AE mrkl*          000000000000004D
    000883: AE mrkl*          000000000000004E
  78:      0:        writeln('5');
    000883: AE mrkl*          000000000000004E
    00088C: 7F ldcc           0000000000000035
    00088E: 05 lao            000000000000317E
    000897: 76 swp            0000000000000008
    0008A0: 7B ldci           0000000000000001
    0008A9: 0F csp            000000000000000A
    0008AB: 0F csp            0000000000000005
    0008AD: 75 dmp            0000000000000008
    0008B6: AE mrkl*          000000000000004F
  79:      0:        a := 12;
    0008B6: AE mrkl*          000000000000004F
    0008BF: 7B ldci           000000000000000C
    0008C8: 02 stri        02,FFFFFFFFFFFFFFE8
    0008D2: AE mrkl*          0000000000000050
  80:      0:        writeln('6');
    0008D2: AE mrkl*          0000000000000050
    0008DB: 7F ldcc           0000000000000036
    0008DD: 05 lao            000000000000317E
    0008E6: 76 swp            0000000000000008
    0008EF: 7B ldci           0000000000000001
    0008F8: 0F csp            000000000000000A
    0008FA: 0F csp            0000000000000005
    0008FC: 75 dmp            0000000000000008
    000905: AE mrkl*          0000000000000051
  81:      0:        stop5;
    000905: AE mrkl*          0000000000000051
    00090E: F5 sfr            0000000000000000
    000917: 0C cup            0000000000000367
    000920: AE mrkl*          0000000000000051
    000929: AE mrkl*          0000000000000052
  82:      0:        writeln('7');
    000929: AE mrkl*          0000000000000052
    000932: 7F ldcc           0000000000000037
    000934: 05 lao            000000000000317E
    00093D: 76 swp            0000000000000008
    000946: 7B ldci           0000000000000001
    00094F: 0F csp            000000000000000A
    000951: 0F csp            0000000000000005
    000953: 75 dmp            0000000000000008
    00095C: AE mrkl*          0000000000000053
  83:      0:        writeln('8');
    00095C: AE mrkl*          0000000000000053
    000965: 7F ldcc           0000000000000038
    000967: 05 lao            000000000000317E
    000970: 76 swp            0000000000000008
    000979: 7B ldci           0000000000000001
    000982: 0F csp            000000000000000A
    000984: 0F csp            0000000000000005
    000986: 75 dmp            0000000000000008
    00098F: AE mrkl*          0000000000000054
  84:      0:        dostuff;
    00098F: AE mrkl*          0000000000000054
    000998: F5 sfr            0000000000000000
    0009A1: 0C cup            0000000000000487
    0009AA: AE mrkl*          0000000000000054
    0009B3: AE mrkl*          0000000000000055
  85:      0:        writeln('9');
    0009B3: AE mrkl*          0000000000000055
    0009BC: 7F ldcc           0000000000000039
    0009BE: 05 lao            000000000000317E
    0009C7: 76 swp            0000000000000008
    0009D0: 7B ldci           0000000000000001
    0009D9: 0F csp            000000000000000A
    0009DB: 0F csp            0000000000000005
    0009DD: 75 dmp            0000000000000008
    0009E6: AE mrkl*          0000000000000056
  86:      0:        writeln('10');
    0009E6: AE mrkl*          0000000000000056
    0009EF: 38 lca            00000000000030F9
    0009F8: 05 lao            000000000000317E
    000A01: 76 swp            0000000000000008
    000A0A: 7B ldci           0000000000000002
    000A13: 76 swp            0000000000000008
    000A1C: 7B ldci           0000000000000002
    000A25: 0F csp            0000000000000006
    000A27: 0F csp            0000000000000005
    000A29: 75 dmp            0000000000000008
    000A32: AE mrkl*          0000000000000057
  87:      0:        stop6;
    000A32: AE mrkl*          0000000000000057
    000A3B: F5 sfr            0000000000000000
    000A44: 0C cup            000000000000039D
    000A4D: AE mrkl*          0000000000000057
    000A56: AE mrkl*          0000000000000058
  88:      0:        dostuff;
    000A56: AE mrkl*          0000000000000058
    000A5F: F5 sfr            0000000000000000
    000A68: 0C cup            0000000000000487
    000A71: AE mrkl*          0000000000000058
    000A7A: AE mrkl*          0000000000000059
  89:      0:        stop7;
    000A7A: AE mrkl*          0000000000000059
    000A83: F5 sfr            0000000000000000
    000A8C: 0C cup            00000000000003D3
    000A95: AE mrkl*          0000000000000059
    000A9E: AE mrkl*          000000000000005A
  90:      0:        new(d);
    000A9E: AE mrkl*          000000000000005A
    000AA7: 04 lda         02,FFFFFFFFFFFFFFDC
    000AB1: 7B ldci           0000000000000008
    000ABA: 0F csp            0000000000000004
    000ABC: AE mrkl*          000000000000005B
  91:      0:        new(e);
    000ABC: AE mrkl*          000000000000005B
    000AC5: 04 lda         02,FFFFFFFFFFFFFFD4
    000ACF: 7B ldci           0000000000000008
    000AD8: 0F csp            0000000000000004
    000ADA: AE mrkl*          000000000000005C
  92:      0:        dispose(d);
    000ADA: AE mrkl*          000000000000005C
    000AE3: 69 loda        02,FFFFFFFFFFFFFFDC
    000AED: 7B ldci           0000000000000008
    000AF6: 0F csp            000000000000001A
    000AF8: AE mrkl*          000000000000005D
  93:      0:        writeln('11');
    000AF8: AE mrkl*          000000000000005D
    000B01: 38 lca            00000000000030EF
    000B0A: 05 lao            000000000000317E
    000B13: 76 swp            0000000000000008
    000B1C: 7B ldci           0000000000000002
    000B25: 76 swp            0000000000000008
    000B2E: 7B ldci           0000000000000002
    000B37: 0F csp            0000000000000006
    000B39: 0F csp            0000000000000005
    000B3B: 75 dmp            0000000000000008
    000B44: AE mrkl*          000000000000005E
  94:      0:        stop8;
    000B44: AE mrkl*          000000000000005E
    000B4D: F5 sfr            0000000000000000
    000B56: 0C cup            0000000000000409
    000B5F: AE mrkl*          000000000000005E
    000B68: AE mrkl*          000000000000005F
  95:      0:    
    000B68: AE mrkl*          000000000000005F
    000B71: AE mrkl*          0000000000000060
  96:      0:    end;
    000B71: AE mrkl*          0000000000000060
    000B7A: 0E retp           0000000000000010
    000B83: AE mrkl*          0000000000000061
  97:      0:    
    000B83: AE mrkl*          0000000000000061
    000B8C: AE mrkl*          0000000000000062
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
    000B8C: AE mrkl*          0000000000000062
    000B95: AE mrkl*          0000000000000063
  99:      0:    
    000B95: AE mrkl*          0000000000000063
    000B9E: AE mrkl*          0000000000000064
 100:      0:    var i, x, i2: integer;
    000B9E: AE mrkl*          0000000000000064
    000BA7: AE mrkl*          0000000000000065
 101:      0:        c: char;
    000BA7: AE mrkl*          0000000000000065
    000BB0: AE mrkl*          0000000000000066
 102:      0:        b: boolean;
    000BB0: AE mrkl*          0000000000000066
    000BB9: AE mrkl*          0000000000000067
 103:      0:        e: enum;
    000BB9: AE mrkl*          0000000000000067
    000BC2: AE mrkl*          0000000000000068
 104:      0:        sr: sub;
    000BC2: AE mrkl*          0000000000000068
    000BCB: AE mrkl*          0000000000000069

debug> li $0

    Addr    Op Ins         P  Q
----------------------------------
    000000: 14 lnp*           0000000000003BD8
    000009: 15 cal            0000000000000013
    000012: 3A stp*        
    000013: AE mrkl*          0000000000000001
    00001C: F5 sfr            0000000000000000
    000025: 0C cup            00000000000000F9
    00002E: 15 cal            000000000000015C
    000037: F5 sfr            0000000000000000
    000040: 0C cup            0000000000000141
    000049: 16 ret         
debug> li $0 $100

    Addr    Op Ins         P  Q
----------------------------------
    000000: 14 lnp*           0000000000003BD8
    000009: 15 cal            0000000000000013
    000012: 3A stp*        
    000013: AE mrkl*          0000000000000001
    00001C: F5 sfr            0000000000000000
    000025: 0C cup            00000000000000F9
    00002E: 15 cal            000000000000015C
    000037: F5 sfr            0000000000000000
    000040: 0C cup            0000000000000141
    000049: 16 ret         
    00004A: AE mrkl*          0000000000000002
    000053: AE mrkl*          0000000000000003
    00005C: AE mrkl*          0000000000000004
    000065: AE mrkl*          0000000000000005
    00006E: AE mrkl*          0000000000000005
    000077: 0B mst         01,0000000000000000,0000000000000020
    000089: AE mrkl*          0000000000000006
    000092: AE mrkl*          0000000000000007
    00009B: 38 lca            000000000000315E
    0000A4: 05 lao            000000000000317E
    0000AD: 76 swp            0000000000000008
    0000B6: 7B ldci           0000000000000013
    0000BF: 76 swp            0000000000000008
    0000C8: 7B ldci           0000000000000013
    0000D1: 0F csp            0000000000000006
    0000D3: 0F csp            0000000000000005
    0000D5: 75 dmp            0000000000000008
    0000DE: AE mrkl*          0000000000000008
    0000E7: AE mrkl*          0000000000000009
    0000F0: 0E retp           0000000000000000
    0000F9: AE mrkl*          000000000000000A
debug> li $0:100

    Addr    Op Ins         P  Q
----------------------------------
    000000: 14 lnp*           0000000000003BD8
    000009: 15 cal            0000000000000013
    000012: 3A stp*        
    000013: AE mrkl*          0000000000000001
    00001C: F5 sfr            0000000000000000
    000025: 0C cup            00000000000000F9
    00002E: 15 cal            000000000000015C
    000037: F5 sfr            0000000000000000
    000040: 0C cup            0000000000000141
    000049: 16 ret         
    00004A: AE mrkl*          0000000000000002
    000053: AE mrkl*          0000000000000003
    00005C: AE mrkl*          0000000000000004
    000065: AE mrkl*          0000000000000005
    00006E: AE mrkl*          0000000000000005
    000077: 0B mst         01,0000000000000000,0000000000000020
    000089: AE mrkl*          0000000000000006
    000092: AE mrkl*          0000000000000007
    00009B: 38 lca            000000000000315E
    0000A4: 05 lao            000000000000317E
    0000AD: 76 swp            0000000000000008
    0000B6: 7B ldci           0000000000000013
    0000BF: 76 swp            0000000000000008
    0000C8: 7B ldci           0000000000000013
    0000D1: 0F csp            0000000000000006
    0000D3: 0F csp            0000000000000005
    0000D5: 75 dmp            0000000000000008
    0000DE: AE mrkl*          0000000000000008
    0000E7: AE mrkl*          0000000000000009
    0000F0: 0E retp           0000000000000000
    0000F9: AE mrkl*          000000000000000A
    000102: AE mrkl*          000000000000000B
    00010B: AE mrkl*          000000000000000B
    000114: 0B mst         00,0000000000000000,0000000000000000
    000126: AE mrkl*          000000000000000C
    00012F: AE mrkl*          000000000000000D
    000138: 0E retp           0000000000000000
    000141: 0B mst         01,0000000000000000,0000000000000000
    000153: 0E retp           0000000000000000
    00015C: AE mrkl*          0000000000000001
    000165: F5 sfr            0000000000000000
    00016E: 0C cup            0000000000001AF8
    000177: 16 ret         
    000178: AE mrkl*          0000000000000002
    000181: AE mrkl*          0000000000000003
    00018A: AE mrkl*          0000000000000004
    000193: AE mrkl*          0000000000000005
    00019C: AE mrkl*          0000000000000006
    0001A5: AE mrkl*          0000000000000007
    0001AE: AE mrkl*          0000000000000008
    0001B7: AE mrkl*          0000000000000009
    0001C0: AE mrkl*          000000000000000A
    0001C9: AE mrkl*          000000000000000B
    0001D2: AE mrkl*          000000000000000C
    0001DB: AE mrkl*          000000000000000D
    0001E4: AE mrkl*          000000000000000E
    0001ED: AE mrkl*          000000000000000F
    0001F6: AE mrkl*          0000000000000010
    0001FF: AE mrkl*          0000000000000011
    000208: AE mrkl*          0000000000000012
    000211: AE mrkl*          0000000000000013
    00021A: AE mrkl*          0000000000000014
    000223: AE mrkl*          0000000000000015
    00022C: AE mrkl*          0000000000000016
    000235: AE mrkl*          0000000000000017
    00023E: AE mrkl*          0000000000000018
    000247: AE mrkl*          0000000000000019
    000250: AE mrkl*          000000000000001A
    000259: AE mrkl*          000000000000001A
    000262: 0B mst         01,0000000000000000,0000000000000000
    000274: 0E retp           0000000000000000
    00027D: AE mrkl*          000000000000001B
    000286: AE mrkl*          000000000000001C
    00028F: AE mrkl*          000000000000001C
    000298: 0B mst         01,0000000000000000,0000000000000000
    0002AA: 0E retp           0000000000000000
    0002B3: AE mrkl*          000000000000001D
    0002BC: AE mrkl*          000000000000001E
    0002C5: AE mrkl*          000000000000001E
    0002CE: 0B mst         01,0000000000000000,0000000000000000
    0002E0: 0E retp           0000000000000000
    0002E9: AE mrkl*          000000000000001F
    0002F2: AE mrkl*          0000000000000020
    0002FB: AE mrkl*          0000000000000020
    000304: 0B mst         01,0000000000000000,0000000000000000
    000316: 0E retp           0000000000000000
    00031F: AE mrkl*          0000000000000021
    000328: AE mrkl*          0000000000000022
    000331: AE mrkl*          0000000000000022
    00033A: 0B mst         01,0000000000000000,0000000000000000
    00034C: 0E retp           0000000000000000
    000355: AE mrkl*          0000000000000023
    00035E: AE mrkl*          0000000000000024
    000367: AE mrkl*          0000000000000024
    000370: 0B mst         01,0000000000000000,0000000000000000
    000382: 0E retp           0000000000000000
    00038B: AE mrkl*          0000000000000025
    000394: AE mrkl*          0000000000000026
    00039D: AE mrkl*          0000000000000026
    0003A6: 0B mst         01,0000000000000000,0000000000000000
debug> li $4e

    Addr    Op Ins         P  Q
----------------------------------
    00004E: 00 lodi        00,00000003AE000000
    000058: 00 lodi        00,0000000004AE0000
    000062: 00 lodi        00,000000000005AE00
    00006C: 00 lodi        00,00000000000005AE
    000076: 00 lodi        0B,0000000000000001
    000080: 00 lodi        20,AE00000000000000
    00008A: 06 stoi        
    00008B: 00 lodi        00,0007AE0000000000
    000095: 00 lodi        00,00315E3800000000
    00009F: 00 lodi        00,0000317E05000000
debug> li $4e $100

    Addr    Op Ins         P  Q
----------------------------------
    00004E: 00 lodi        00,00000003AE000000
    000058: 00 lodi        00,0000000004AE0000
    000062: 00 lodi        00,000000000005AE00
    00006C: 00 lodi        00,00000000000005AE
    000076: 00 lodi        0B,0000000000000001
    000080: 00 lodi        20,AE00000000000000
    00008A: 06 stoi        
    00008B: 00 lodi        00,0007AE0000000000
    000095: 00 lodi        00,00315E3800000000
    00009F: 00 lodi        00,0000317E05000000
    0000A9: 00 lodi        00,0000000008760000
    0000B3: 00 lodi        00,0000000000137B00
    0000BD: 00 lodi        00,0000000000000876
    0000C7: 00 lodi        7B,0000000000000013
    0000D1: 0F csp            0000000000000006
    0000D3: 0F csp            0000000000000005
    0000D5: 75 dmp            0000000000000008
    0000DE: AE mrkl*          0000000000000008
    0000E7: AE mrkl*          0000000000000009
    0000F0: 0E retp           0000000000000000
    0000F9: AE mrkl*          000000000000000A
debug> li $4e:100

    Addr    Op Ins         P  Q
----------------------------------
    00004E: 00 lodi        00,00000003AE000000
    000058: 00 lodi        00,0000000004AE0000
    000062: 00 lodi        00,000000000005AE00
    00006C: 00 lodi        00,00000000000005AE
    000076: 00 lodi        0B,0000000000000001
    000080: 00 lodi        20,AE00000000000000
    00008A: 06 stoi        
    00008B: 00 lodi        00,0007AE0000000000
    000095: 00 lodi        00,00315E3800000000
    00009F: 00 lodi        00,0000317E05000000
    0000A9: 00 lodi        00,0000000008760000
    0000B3: 00 lodi        00,0000000000137B00
    0000BD: 00 lodi        00,0000000000000876
    0000C7: 00 lodi        7B,0000000000000013
    0000D1: 0F csp            0000000000000006
    0000D3: 0F csp            0000000000000005
    0000D5: 75 dmp            0000000000000008
    0000DE: AE mrkl*          0000000000000008
    0000E7: AE mrkl*          0000000000000009
    0000F0: 0E retp           0000000000000000
    0000F9: AE mrkl*          000000000000000A
    000102: AE mrkl*          000000000000000B
    00010B: AE mrkl*          000000000000000B
    000114: 0B mst         00,0000000000000000,0000000000000000
    000126: AE mrkl*          000000000000000C
    00012F: AE mrkl*          000000000000000D
    000138: 0E retp           0000000000000000
    000141: 0B mst         01,0000000000000000,0000000000000000
    000153: 0E retp           0000000000000000
    00015C: AE mrkl*          0000000000000001
    000165: F5 sfr            0000000000000000
    00016E: 0C cup            0000000000001AF8
    000177: 16 ret         
    000178: AE mrkl*          0000000000000002
    000181: AE mrkl*          0000000000000003
    00018A: AE mrkl*          0000000000000004
    000193: AE mrkl*          0000000000000005
    00019C: AE mrkl*          0000000000000006
    0001A5: AE mrkl*          0000000000000007
    0001AE: AE mrkl*          0000000000000008
    0001B7: AE mrkl*          0000000000000009
    0001C0: AE mrkl*          000000000000000A
    0001C9: AE mrkl*          000000000000000B
    0001D2: AE mrkl*          000000000000000C
    0001DB: AE mrkl*          000000000000000D
    0001E4: AE mrkl*          000000000000000E
    0001ED: AE mrkl*          000000000000000F
    0001F6: AE mrkl*          0000000000000010
    0001FF: AE mrkl*          0000000000000011
    000208: AE mrkl*          0000000000000012
    000211: AE mrkl*          0000000000000013
    00021A: AE mrkl*          0000000000000014
    000223: AE mrkl*          0000000000000015
    00022C: AE mrkl*          0000000000000016
    000235: AE mrkl*          0000000000000017
    00023E: AE mrkl*          0000000000000018
    000247: AE mrkl*          0000000000000019
    000250: AE mrkl*          000000000000001A
    000259: AE mrkl*          000000000000001A
    000262: 0B mst         01,0000000000000000,0000000000000000
    000274: 0E retp           0000000000000000
    00027D: AE mrkl*          000000000000001B
    000286: AE mrkl*          000000000000001C
    00028F: AE mrkl*          000000000000001C
    000298: 0B mst         01,0000000000000000,0000000000000000
    0002AA: 0E retp           0000000000000000
    0002B3: AE mrkl*          000000000000001D
    0002BC: AE mrkl*          000000000000001E
    0002C5: AE mrkl*          000000000000001E
    0002CE: 0B mst         01,0000000000000000,0000000000000000
    0002E0: 0E retp           0000000000000000
    0002E9: AE mrkl*          000000000000001F
    0002F2: AE mrkl*          0000000000000020
    0002FB: AE mrkl*          0000000000000020
    000304: 0B mst         01,0000000000000000,0000000000000000
    000316: 0E retp           0000000000000000
    00031F: AE mrkl*          0000000000000021
    000328: AE mrkl*          0000000000000022
    000331: AE mrkl*          0000000000000022
    00033A: 0B mst         01,0000000000000000,0000000000000000
    00034C: 0E retp           0000000000000000
    000355: AE mrkl*          0000000000000023
    00035E: AE mrkl*          0000000000000024
    000367: AE mrkl*          0000000000000024
    000370: 0B mst         01,0000000000000000,0000000000000000
    000382: 0E retp           0000000000000000
    00038B: AE mrkl*          0000000000000025
    000394: AE mrkl*          0000000000000026
    00039D: AE mrkl*          0000000000000026
    0003A6: 0B mst         01,0000000000000000,0000000000000000
    0003B8: 0E retp           0000000000000000
    0003C1: AE mrkl*          0000000000000027
    0003CA: AE mrkl*          0000000000000028
    0003D3: AE mrkl*          0000000000000028
    0003DC: 0B mst         01,0000000000000000,0000000000000000
    0003EE: 0E retp           0000000000000000
    0003F7: AE mrkl*          0000000000000029
    000400: AE mrkl*          000000000000002A
    000409: AE mrkl*          000000000000002A
    000412: 0B mst         01,0000000000000000,0000000000000000
debug> ! run until end of program block
debug> b debug_test stop1
debug> r
This is debug test
this is debug test1

=== break ===

  25:      0:    
  26:      1: b* procedure stop1; begin end;
  27:      0:    

debug> ! expressions/constants
debug> p $100

256

debug> p &100

64

debug> p %100

4

debug> p 255$

FF

debug> p 100&

144

debug> p 100%

1100100

debug> p not 1$

7FFFFFFFFFFFFFFE

debug> p 2+(3*4)

14

debug> p (2+3)*4

20

debug> p ['0'..'9','a','b']

['0'..'9','a'..'b']

debug> p 'hi there bob''s'

'hi there bob's'

debug> p 'hi '''' there'

'hi '' there'

debug> p 1

1

debug> p 12.34

  1.23400000000000e+01

debug> p 3*4

12

debug> p 3.0*4.0

  1.20000000000000e+01

debug> p 10/3

  3.33333333333333e+00

debug> p 10.0/3.0

  3.33333333333333e+00

debug> p 10 div 3

3

debug> p 10 mod 3

1

debug> p 10 and 3%

10

debug> p 1+2

3

debug> p 1.0+2.0

  3.00000000000000e+00

debug> p 3-1

2

debug> p 3.0-1.0

  2.00000000000000e+00

debug> p 10 or 3%

1011

debug> p 10 xor 3%

1001

debug> p 12 = 12

true(1)

debug> p 12 = 13

false(0)

debug> p 12 <> 12

false(0)

debug> p 12 <> 13

true(1)

debug> p 12 < 13

true(1)

debug> p 12 < 12

false(0)

debug> p 12 < 10

false(0)

debug> p 42 > 10

true(1)

debug> p 42 > 42

false(0)

debug> p 42 > 50

false(0)

debug> p 32 <= 40

true(1)

debug> p 32 <= 32

true(1)

debug> p 32 <= 12

false(0)

debug> p 92 >= 10

true(1)

debug> p 92 >= 92

true(1)

debug> p 92 >= 100

false(0)

debug> 
debug> p x

42

debug> p c

'a'(97)

debug> p b

true(1)

debug> p e

two(1)

debug> p sr

5

debug> p f

  1.23400000000000e+11

debug> p rv

record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
    5.67800000000000e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
      5.43200000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end

debug> p a

array 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 end

debug> p ar

array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end

debug> p a[5]

15

debug> p rv.rec.sr

3

debug> p rv.rec.a

array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end

debug> p rv.rec.a[5]

25

debug> p ar[5].e

one(0)

debug> p ar[6].rec.a[5]

40

debug> p pi$

3BE0

debug> p pi^

42

debug> 
debug> d 0


000000: 14 D8 3B 00 00 00 00 00 00 15 13 00 00 00 00 00   ..;.............
000010: 00 00 3A AE 01 00 00 00 00 00 00 00 F5 00 00 00   ..:.............
000020: 00 00 00 00 00 0C F9 00 00 00 00 00 00 00 15 5C   ...............\
000030: 01 00 00 00 00 00 00 F5 00 00 00 00 00 00 00 00   ................
000040: 0C 41 01 00 00 00 00 00 00 16 AE 02 00 00 00 00   .A..............
000050: 00 00 00 AE 03 00 00 00 00 00 00 00 AE 04 00 00   ................
000060: 00 00 00 00 00 AE 05 00 00 00 00 00 00 00 AE 05   ................
000070: 00 00 00 00 00 00 00 0B 01 00 00 00 00 00 00 00   ................
000080: 00 20 00 00 00 00 00 00 00 AE 06 00 00 00 00 00   . ..............
000090: 00 00 AE 07 00 00 00 00 00 00 00 38 5E 31 00 00   ...........8^1..
0000A0: 00 00 00 00 05 7E 31 00 00 00 00 00 00 76 08 00   .....~1......v..
0000B0: 00 00 00 00 00 00 7B 13 00 00 00 00 00 00 00 76   ......{........v
0000C0: 08 00 00 00 00 00 00 00 7B 13 00 00 00 00 00 00   ........{.......
0000D0: 00 0F 06 0F 05 75 08 00 00 00 00 00 00 00 AE 08   .....u..........
0000E0: 00 00 00 00 00 00 00 AE 09 00 00 00 00 00 00 00   ................
0000F0: 0E 00 00 00 00 00 00 00 00 AE 0A 00 00 00 00 00   ................


debug> d 0 $100


000000: 14 D8 3B 00 00 00 00 00 00 15 13 00 00 00 00 00   ..;.............
000010: 00 00 3A AE 01 00 00 00 00 00 00 00 F5 00 00 00   ..:.............
000020: 00 00 00 00 00 0C F9 00 00 00 00 00 00 00 15 5C   ...............\
000030: 01 00 00 00 00 00 00 F5 00 00 00 00 00 00 00 00   ................
000040: 0C 41 01 00 00 00 00 00 00 16 AE 02 00 00 00 00   .A..............
000050: 00 00 00 AE 03 00 00 00 00 00 00 00 AE 04 00 00   ................
000060: 00 00 00 00 00 AE 05 00 00 00 00 00 00 00 AE 05   ................
000070: 00 00 00 00 00 00 00 0B 01 00 00 00 00 00 00 00   ................
000080: 00 20 00 00 00 00 00 00 00 AE 06 00 00 00 00 00   . ..............
000090: 00 00 AE 07 00 00 00 00 00 00 00 38 5E 31 00 00   ...........8^1..
0000A0: 00 00 00 00 05 7E 31 00 00 00 00 00 00 76 08 00   .....~1......v..
0000B0: 00 00 00 00 00 00 7B 13 00 00 00 00 00 00 00 76   ......{........v
0000C0: 08 00 00 00 00 00 00 00 7B 13 00 00 00 00 00 00   ........{.......
0000D0: 00 0F 06 0F 05 75 08 00 00 00 00 00 00 00 AE 08   .....u..........
0000E0: 00 00 00 00 00 00 00 AE 09 00 00 00 00 00 00 00   ................
0000F0: 0E 00 00 00 00 00 00 00 00 AE 0A 00 00 00 00 00   ................
000100: 00                                                .


debug> d 0:$100


000000: 14 D8 3B 00 00 00 00 00 00 15 13 00 00 00 00 00   ..;.............
000010: 00 00 3A AE 01 00 00 00 00 00 00 00 F5 00 00 00   ..:.............
000020: 00 00 00 00 00 0C F9 00 00 00 00 00 00 00 15 5C   ...............\
000030: 01 00 00 00 00 00 00 F5 00 00 00 00 00 00 00 00   ................
000040: 0C 41 01 00 00 00 00 00 00 16 AE 02 00 00 00 00   .A..............
000050: 00 00 00 AE 03 00 00 00 00 00 00 00 AE 04 00 00   ................
000060: 00 00 00 00 00 AE 05 00 00 00 00 00 00 00 AE 05   ................
000070: 00 00 00 00 00 00 00 0B 01 00 00 00 00 00 00 00   ................
000080: 00 20 00 00 00 00 00 00 00 AE 06 00 00 00 00 00   . ..............
000090: 00 00 AE 07 00 00 00 00 00 00 00 38 5E 31 00 00   ...........8^1..
0000A0: 00 00 00 00 05 7E 31 00 00 00 00 00 00 76 08 00   .....~1......v..
0000B0: 00 00 00 00 00 00 7B 13 00 00 00 00 00 00 00 76   ......{........v
0000C0: 08 00 00 00 00 00 00 00 7B 13 00 00 00 00 00 00   ........{.......
0000D0: 00 0F 06 0F 05 75 08 00 00 00 00 00 00 00 AE 08   .....u..........
0000E0: 00 00 00 00 00 00 00 AE 09 00 00 00 00 00 00 00   ................
0000F0: 0E 00 00 00 00 00 00 00 00 AE 0A 00 00 00 00 00   ................


debug> d $100


000100: 00 00 AE 0B 00 00 00 00 00 00 00 AE 0B 00 00 00   ................
000110: 00 00 00 00 0B 00 00 00 00 00 00 00 00 00 00 00   ................
000120: 00 00 00 00 00 00 AE 0C 00 00 00 00 00 00 00 AE   ................
000130: 0D 00 00 00 00 00 00 00 0E 00 00 00 00 00 00 00   ................
000140: 00 0B 01 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
000150: 00 00 00 0E 00 00 00 00 00 00 00 00 AE 01 00 00   ................
000160: 00 00 00 00 00 F5 00 00 00 00 00 00 00 00 0C F8   ................
000170: 1A 00 00 00 00 00 00 16 AE 02 00 00 00 00 00 00   ................
000180: 00 AE 03 00 00 00 00 00 00 00 AE 04 00 00 00 00   ................
000190: 00 00 00 AE 05 00 00 00 00 00 00 00 AE 06 00 00   ................
0001A0: 00 00 00 00 00 AE 07 00 00 00 00 00 00 00 AE 08   ................
0001B0: 00 00 00 00 00 00 00 AE 09 00 00 00 00 00 00 00   ................
0001C0: AE 0A 00 00 00 00 00 00 00 AE 0B 00 00 00 00 00   ................
0001D0: 00 00 AE 0C 00 00 00 00 00 00 00 AE 0D 00 00 00   ................
0001E0: 00 00 00 00 AE 0E 00 00 00 00 00 00 00 AE 0F 00   ................
0001F0: 00 00 00 00 00 00 AE 10 00 00 00 00 00 00 00 AE   ................


debug> d $100 $100


000100: 00                                                .


debug> d $100:$100


000100: 00 00 AE 0B 00 00 00 00 00 00 00 AE 0B 00 00 00   ................
000110: 00 00 00 00 0B 00 00 00 00 00 00 00 00 00 00 00   ................
000120: 00 00 00 00 00 00 AE 0C 00 00 00 00 00 00 00 AE   ................
000130: 0D 00 00 00 00 00 00 00 0E 00 00 00 00 00 00 00   ................
000140: 00 0B 01 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
000150: 00 00 00 0E 00 00 00 00 00 00 00 00 AE 01 00 00   ................
000160: 00 00 00 00 00 F5 00 00 00 00 00 00 00 00 0C F8   ................
000170: 1A 00 00 00 00 00 00 16 AE 02 00 00 00 00 00 00   ................
000180: 00 AE 03 00 00 00 00 00 00 00 AE 04 00 00 00 00   ................
000190: 00 00 00 AE 05 00 00 00 00 00 00 00 AE 06 00 00   ................
0001A0: 00 00 00 00 00 AE 07 00 00 00 00 00 00 00 AE 08   ................
0001B0: 00 00 00 00 00 00 00 AE 09 00 00 00 00 00 00 00   ................
0001C0: AE 0A 00 00 00 00 00 00 00 AE 0B 00 00 00 00 00   ................
0001D0: 00 00 AE 0C 00 00 00 00 00 00 00 AE 0D 00 00 00   ................
0001E0: 00 00 00 00 AE 0E 00 00 00 00 00 00 00 AE 0F 00   ................
0001F0: 00 00 00 00 00 00 AE 10 00 00 00 00 00 00 00 AE   ................


debug> ! print contents of i, then modify using enter, then print again
debug> p x

42

debug> e *x 12 0 0 0
debug> p x

12

debug> st i $1234
debug> p i$

1234

debug> pg

Globals:

pi                   
ar                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
a                    array 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 end
rv                   record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
    5.67800000000000e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
      5.43200000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
f                      1.23400000000000e+11
sr                   5
e                    two(1)
b                    true(1)
c                    'a'(97)
i                    4660
x                    12
i2                   Undefined

debug> ! go down a level to proc1
debug> b stop2
debug> r

=== break ===

  27:      0:    
  28:      1: b* procedure stop2; begin end;
  29:      0:    

debug> ! step out of the stop
debug> ret

 161:      1:    
 162:      1:  *     proc2(74, 'j');
 163:      0:    

debug> 
debug> ! print parameters
debug> p pi

83

debug> p pc

'g'(103)

debug> p pb

true(1)

debug> p pe

two(1)

debug> p psr

7

debug> p pr

  9.87600000000000e+01

debug> p prec

record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
    5.67800000000000e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
      5.43200000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end

debug> p pa

array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end

debug> 
debug> ! print locals
debug> p x

43

debug> p c

'b'(98)

debug> p b

false(0)

debug> p e

three(2)

debug> p sr

8

debug> p f

  5.67800000000000e+11

debug> p rv

record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
    8.76500000000000e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
      3.63200000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end

debug> p a

array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end

debug> p ar

array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end

debug> p a[5]

25

debug> p rv.rec.sr

4

debug> p rv.rec.a

array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end

debug> p rv.rec.a[5]

45

debug> p ar[5].e

one(0)

debug> p ar[6].rec.a[5]

80

debug> p ip$

3BF0

debug> p ip^

76

debug> 
debug> ! Various dumps. Note pl 2 and pp 2 dumps only dump one level since that is all
debug> ! there is.
debug> pl

Locals for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

ip                   
ar                   array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end
a                    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
rv                   record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
    8.76500000000000e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
      3.63200000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end
f                      5.67800000000000e+11
sr                   8
e                    three(2)
b                    false(0)
c                    'b'(98)
i                    Undefined
x                    43
i2                   Undefined

debug> pl 2

Locals for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

ip                   
ar                   array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end
a                    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
rv                   record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
    8.76500000000000e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
      3.63200000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end
f                      5.67800000000000e+11
sr                   8
e                    three(2)
b                    false(0)
c                    'b'(98)
i                    Undefined
x                    43
i2                   Undefined

debug> pp

Parameters for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

pa                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
prec                 record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
    5.67800000000000e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
      5.43200000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
pr                     9.87600000000000e+01
psr                  7
pe                   two(1)
pb                   true(1)
pc                   'g'(103)
pi                   83

debug> pp 2

Parameters for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

pa                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
prec                 record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
    5.67800000000000e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
      5.43200000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
pr                     9.87600000000000e+01
psr                  7
pe                   two(1)
pb                   true(1)
pc                   'g'(103)
pi                   83

debug> ds

Storage areas occupied

Program     000000-002AE7 (10984)
Constants   002AE8-00317B (1684)
Globals     00317C-003BD7 (2652)
Stack/Heap  003BD8-FFFFFF (16761896)

debug> dd

Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80


Mark @FFFFC8
ep: 00FFFFD0: 00000005
sb: 00FFFFD8: 00FFFFA0
et: 00FFFFE0: 00FFFF60

debug> dd 1

Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80

debug> 
debug> ! go down a level to proc2
debug> b stop3
debug> r

=== break ===

  29:      0:    
  30:      1: b* procedure stop3; begin end;
  31:      0:    

debug> ret

  69:      1:    
  70:      1:  *     writeln('Step past me!');
  71:      0:        writeln('And me too!');

debug> 
debug> pl 2

Locals for block: proc2@p_i_c

e                    
d                    
b                    '6'(54)
a                    75


Locals for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

ip                   
ar                   array 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end, 
  record 
    16, 
    'z'(122), 
    false(0), 
    three(2), 
    2, 
      4.33200000000000e+21, 
    record 
      85, 
      'k'(107), 
      true(1), 
      two(1), 
      7, 
        2.36500000000000e+09, 
      array 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 end
    end, 
    array 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 end
  end
end
a                    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
rv                   record 
  13, 
  'd'(100), 
  false(0), 
  one(0), 
  4, 
    8.76500000000000e+21, 
  record 
    85, 
    'x'(120), 
    true(1), 
    two(1), 
    4, 
      3.63200000000000e+09, 
    array 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 end
  end, 
  array 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 end
end
f                      5.67800000000000e+11
sr                   8
e                    three(2)
b                    false(0)
c                    'b'(98)
i                    Undefined
x                    43
i2                   Undefined

debug> pp 2

Parameters for block: proc2@p_i_c

c                    'j'(106)
i                    74


Parameters for block: proc1@p_i_c_b_x(one,two,three)_x(1,10)i_n_r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)_ax(1,10)ir(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,rec:32:r(i:0:i,c:8:c,b:9:b,e:12:x(one,two,three),sr:16:x(1,10)i,r:20:n,a:28:ax(1,10)ii),a:140:ax(1,10)ii)

pa                   array 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end, 
  record 
    12, 
    'c'(99), 
    false(0), 
    three(2), 
    1, 
      5.67800000000000e+21, 
    record 
      84, 
      'u'(117), 
      true(1), 
      one(0), 
      3, 
        5.43200000000000e+09, 
      array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
    end, 
    array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
  end
end
prec                 record 
  12, 
  'c'(99), 
  false(0), 
  three(2), 
  6, 
    5.67800000000000e+21, 
  record 
    84, 
    'u'(117), 
    true(1), 
    one(0), 
    3, 
      5.43200000000000e+09, 
    array 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 end
  end, 
  array 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 end
end
pr                     9.87600000000000e+01
psr                  7
pe                   two(1)
pb                   true(1)
pc                   'g'(103)
pi                   83

debug> dd

Mark @FFEB60
ep: 00FFEB68: 00FFEB80
sb: 00FFEB70: 00FFEB30
et: 00FFEB78: 00FFEB10


Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80


Mark @FFFFC8
ep: 00FFFFD0: 00000005
sb: 00FFFFD8: 00FFFFA0
et: 00FFFFE0: 00FFFF60

debug> dd 2

Mark @FFEB60
ep: 00FFEB68: 00FFEB80
sb: 00FFEB70: 00FFEB30
et: 00FFEB78: 00FFEB10


Mark @FFFF38
ep: 00FFFF40: 00FFFF60
sb: 00FFFF48: 00FFEB98
et: 00FFFF50: 00FFEB80

debug> ! step over some writes
debug> s 2
Step past me!

  70:      1:        writeln('Step past me!');
  71:      1:  *     writeln('And me too!');
  72:      0:        writeln('1');

And me too!

  71:      1:        writeln('And me too!');
  72:      1:  *     writeln('1');
  73:      0:        writeln('2');

debug> ss 2
1
2
debug> tp traceme
debug> b stop4
debug> r
3

  31:      0:    
  32:      1: t* procedure traceme; begin end;
  33:      0:    

4

=== break ===

  33:      0:    
  34:      1: b* procedure stop4; begin end;
  35:      0:    

debug> ret

  77:      2:        stop4;
  78:      1:  *     writeln('5');
  79:      0:        a := 12;

debug> lb

Breakpoints:

No  Src  Addr   Trc/brk
=======================
 1:  26: 000274 b
 2:  28: 0002AA b
 3:  30: 0002E0 b
 4:  32: 000316 t
 5:  34: 00034C b

debug> c
debug> lb

Breakpoints:

No  Src  Addr   Trc/brk
=======================

debug> w a
debug> w b
debug> b stop5
debug> r
5
Watch variable: @000008C8: a@00FFEB48: 75 -> 12
6

=== break ===

  35:      0:    
  36:      1: b* procedure stop5; begin end;
  37:      0:    

debug> s

  81:      2:        stop5;
  82:      1:  *     writeln('7');
  83:      0:        writeln('8');

debug> lw

Watch table:

1: 00FFEB48
2: 00FFEB47

debug> cw 1
debug> lw

Watch table:

1: 00FFEB47

debug> cw
debug> lw

Watch table:


debug> ts
debug> b stop6
debug> r
7

  82:      1:        writeln('7');
  83:      1:  *     writeln('8');
  84:      0:        dostuff;

8

  83:      1:        writeln('8');
  84:      1:  *     dostuff;
  85:      0:        writeln('9');


  48:      0:    var i: integer;
  49:      1:  * 
  50:      0:    begin


  49:      1:    
  50:      1:  * begin
  51:      0:    


  49:      1:    
  50:      2:  * begin
  51:      0:    


  50:      2:    begin
  51:      1:  * 
  52:      0:        for i := 1 to 4 do writeln('iteration: ', i);


  51:      1:    
  52:      1:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    


  51:      1:    
  52:      2:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    

iteration:           1

  51:      1:    
  52:      3:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    

iteration:           2

  51:      1:    
  52:      4:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    

iteration:           3

  51:      1:    
  52:      5:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    

iteration:           4

  51:      1:    
  52:      6:  *     for i := 1 to 4 do writeln('iteration: ', i);
  53:      0:    


  52:      6:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      1:  * 
  54:      0:    end;


  53:      1:    
  54:      1:  * end;
  55:      0:    


  83:      1:        writeln('8');
  84:      2:  *     dostuff;
  85:      0:        writeln('9');


  84:      2:        dostuff;
  85:      1:  *     writeln('9');
  86:      0:        writeln('10');

9

  85:      1:        writeln('9');
  86:      1:  *     writeln('10');
  87:      0:        stop6;

10

  86:      1:        writeln('10');
  87:      1:  *     stop6;
  88:      0:        dostuff;


  37:      0:    
  38:      1: b* procedure stop6; begin end;
  39:      0:    


=== break ===

  37:      0:    
  38:      1: b* procedure stop6; begin end;
  39:      0:    

debug> ret

  86:      1:        writeln('10');
  87:      2:  *     stop6;
  88:      0:        dostuff;


  87:      2:        stop6;
  88:      1:  *     dostuff;
  89:      0:        stop7;


  87:      2:        stop6;
  88:      1:  *     dostuff;
  89:      0:        stop7;

debug> nts
debug> an
debug> b stop7
debug> r
iteration:           1
iteration:           2
iteration:           3
iteration:           4

=== break ===

  39:      0:    
  40:      1: b* procedure stop7; begin end;
  41:      0:    

debug> ret

  89:      2:        stop7;
  90:      1:  *     new(d);
  91:      0:        new(e);

debug> lsa

last source lines executed:

  90:      1:  *     new(d);
  89:      2:        stop7;
  40:      1: b  procedure stop7; begin end;
  89:      2:        stop7;
  88:      2:        dostuff;
  54:      2:    end;
  53:      2:    
  52:     12:        for i := 1 to 4 do writeln('iteration: ', i);
  52:     12:        for i := 1 to 4 do writeln('iteration: ', i);
  52:     12:        for i := 1 to 4 do writeln('iteration: ', i);

debug> s

  90:      1:        new(d);
  91:      1:  *     new(e);
  92:      0:        dispose(d);

debug> s

  91:      1:        new(e);
  92:      1:  *     dispose(d);
  93:      0:        writeln('11');

debug> hs

Heap space breakdown

addr: 003BD8:     16: alloc
addr: 003BE8:     16: alloc
addr: 003BF8:     16: alloc
addr: 003C08:     16: alloc
debug> s

  92:      1:        dispose(d);
  93:      1:  *     writeln('11');
  94:      0:        stop8;

debug> hs

Heap space breakdown

addr: 003BD8:     16: alloc
addr: 003BE8:     16: alloc
addr: 003BF8:     16: free
addr: 003C08:     16: alloc
debug> tr
debug> b stop8
debug> r
  2873/16771856->  6
11
  2875/16771880->  5


=== break ===

  41:      0:    
  42:      1: b* procedure stop8; begin end;
  43:      0:    

debug> ret

  95:      1:    
  96:      1:  * end;
  97:      0:    

debug> ntr
debug> ! step out of proc2
debug> ret

 163:      1:    
 164:      1:  * end;
 165:      0:    

debug> ! step out of proc1
debug> ret

 236:      1:    
 237:      1:  *     stepover1;
 238:      0:    

debug> ! step over next verbose
debug> so
I am stepover proc 1

 238:      1:    
 239:      1:  *     stepover2;
 240:      0:    

debug> ! step over next silently
debug> sso
I am stepover proc 2
debug> ! but now show where you are
debug> ps

 240:      1:    
 241:      1:  *     writeln('Step me!');
 242:      0:    

debug> 
debug> ! Test source profiling.
debug> ! Compare this listing with the one at program start to see if the counters have
debug> ! rolled.
debug> l debug_test 1 100

   1:      1:    program debug_test(output);
   2:      0:    
   3:      0:    joins debug_test1;
   4:      0:    
   5:      0:    type
   6:      0:        enum = (one, two, three);
   7:      0:        sub = 1..10;
   8:      0:        a10 = array 10 of integer;
   9:      0:        r = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  10:      0:                   a: a10 end;
  11:      0:        r2 = record i: integer; c: char; b: boolean; e: enum; sr: sub; r: real; 
  12:      0:                    rec: r; a: a10 end;
  13:      0:        a2 = array 10 of r2;
  14:      0:    
  15:      0:    var i, x, i2: integer;
  16:      0:        c: char;
  17:      0:        b: boolean;
  18:      0:        e: enum;
  19:      0:        sr: sub;
  20:      0:        f: real;
  21:      0:        rv: r2;
  22:      0:        a: a10;
  23:      0:        ar: a2;
  24:      0:        pi: ^integer;
  25:      0:    
  26:      1:    procedure stop1; begin end;
  27:      0:    
  28:      1:    procedure stop2; begin end;
  29:      0:    
  30:      1:    procedure stop3; begin end;
  31:      0:    
  32:      1:    procedure traceme; begin end;
  33:      0:    
  34:      1:    procedure stop4; begin end;
  35:      0:    
  36:      1: b  procedure stop5; begin end;
  37:      0:    
  38:      1: b  procedure stop6; begin end;
  39:      0:    
  40:      1: b  procedure stop7; begin end;
  41:      0:    
  42:      1: b  procedure stop8; begin end;
  43:      0:    
  44:      0:    procedure stop9; begin end;
  45:      0:    
  46:      0:    procedure dostuff;
  47:      0:    
  48:      0:    var i: integer;
  49:      2:    
  50:      4:    begin
  51:      2:    
  52:     12:        for i := 1 to 4 do writeln('iteration: ', i);
  53:      2:    
  54:      2:    end;
  55:      0:    
  56:      0:    procedure proc2(i: integer; c: char);
  57:      0:    
  58:      0:    var a: integer;
  59:      0:        b: char;
  60:      0:        d: ^integer;
  61:      0:        e: ^integer;
  62:      1:    
  63:      2:    begin
  64:      1:    
  65:      1:        a := 75;
  66:      1:        b := '6';
  67:      1:    
  68:      2:        stop3;
  69:      1:    
  70:      1:        writeln('Step past me!');
  71:      1:        writeln('And me too!');
  72:      1:        writeln('1');
  73:      1:        writeln('2');
  74:      1:        writeln('3');
  75:      2:        traceme;
  76:      1:        writeln('4');
  77:      2:        stop4;
  78:      1:        writeln('5');
  79:      1:        a := 12;
  80:      1:        writeln('6');
  81:      2:        stop5;
  82:      1:        writeln('7');
  83:      1:        writeln('8');
  84:      2:        dostuff;
  85:      1:        writeln('9');
  86:      1:        writeln('10');
  87:      2:        stop6;
  88:      2:        dostuff;
  89:      2:        stop7;
  90:      1:        new(d);
  91:      1:        new(e);
  92:      1:        dispose(d);
  93:      1:        writeln('11');
  94:      2:        stop8;
  95:      1:    
  96:      1:    end;
  97:      0:    
  98:      0:    procedure proc1(pi: integer; pc: char; pb: boolean; pe: enum; psr: sub; pr: real; prec: r2; pa: a2);
  99:      0:    
 100:      0:    var i, x, i2: integer;

debug> 
debug> !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
debug> !
debug> ! Machine level section
debug> !
debug> ! This section contains hard addresses that need to be moved when the source
debug> ! test program has changed or the compiler has changed.
debug> !
debug> ! machine commands can be tested in source mode, we just don't get a machine
debug> ! level status print. Note li @pc can be a defacto assembly status, since it
debug> ! shows where the execution point is.
debug> !
debug> ! Note the test can need to be recalibrated if the source changes. If it hits
debug> ! the stop instruction, it means you missed a breakpoint (it ran off the end).
debug> !
debug> ! The machine level instructions are indicated as relative offsets from the
debug> ! top of a machine level listing performed before the instruction and indicated
debug> ! in the comment above. This means the location won't change unless the
debug> ! instruction sequence we are indicating has changed.
debug> !
debug> ! Test si, sio, sis, siso, lia, bi, tpi
debug> 
debug> ! should be at writeln('Step me!');
debug> ps

 240:      1:    
 241:      1:  *     writeln('Step me!');
 242:      0:    

debug> p @pc$

290A

debug> li @pc

    Addr    Op Ins         P  Q
----------------------------------
 *  00290A: 38 lca            0000000000002AF9
    002913: 05 lao            000000000000317E
    00291C: 76 swp            0000000000000008
    002925: 7B ldci           0000000000000008
    00292E: 76 swp            0000000000000008
    002937: 7B ldci           0000000000000008
    002940: 0F csp            0000000000000006
    002942: 0F csp            0000000000000005
    002944: 75 dmp            0000000000000008
    00294D: AE mrkl*          00000000000000F2
debug> si

 240:      1:    
 241:      1:  *     writeln('Step me!');
 242:      0:    

debug> p @pc$

2913

debug> li @pc

    Addr    Op Ins         P  Q
----------------------------------
 *  002913: 05 lao            000000000000317E
    00291C: 76 swp            0000000000000008
    002925: 7B ldci           0000000000000008
    00292E: 76 swp            0000000000000008
    002937: 7B ldci           0000000000000008
    002940: 0F csp            0000000000000006
    002942: 0F csp            0000000000000005
    002944: 75 dmp            0000000000000008
    00294D: AE mrkl*          00000000000000F2
    002956: AE mrkl*          00000000000000F3
debug> sis
debug> p @pc$

291C

debug> li @pc

    Addr    Op Ins         P  Q
----------------------------------
 *  00291C: 76 swp            0000000000000008
    002925: 7B ldci           0000000000000008
    00292E: 76 swp            0000000000000008
    002937: 7B ldci           0000000000000008
    002940: 0F csp            0000000000000006
    002942: 0F csp            0000000000000005
    002944: 75 dmp            0000000000000008
    00294D: AE mrkl*          00000000000000F2
    002956: AE mrkl*          00000000000000F3
    00295F: 7B ldci           0000000000000001
debug> ! run to start of wrs call
debug> ! this is the csp instruction 5th from the top of the above listing
debug> bi @pc+36
debug> r

=== break ===

 240:      1:    
 241:      1: b*     writeln('Step me!');
 242:      0:    

debug> li @pc

    Addr    Op Ins         P  Q
----------------------------------
b*  002940: 0F csp            0000000000000006
    002942: 0F csp            0000000000000005
    002944: 75 dmp            0000000000000008
    00294D: AE mrkl*          00000000000000F2
    002956: AE mrkl*          00000000000000F3
    00295F: 7B ldci           0000000000000001
    002968: 03 sroi           00000000000031DD
    002971: AE mrkl*          00000000000000F4
    00297A: 01 ldoi           00000000000031DD
    002983: 7B ldci           0000000000000001
debug> ! dump stack should have parameters on it.
debug> dst
00FFFF80: 0000000000000008 (8)
00FFFF88: 0000000000002AF9 (11001)
00FFFF90: 0000000000000008 (8)
00FFFF98: 000000000000317E (12670)
00FFFFA0: 000000000000000A (10)
00FFFFA8: 0000000000000001 (1)
00FFFFB0: 000000000000000A (10)
00FFFFB8: 0000000000000001 (1)
00FFFFC0: 0000000000FFFFC8 (16777160)
00FFFFC8: 0000000001000000 (16777216)
debug> ! step over wrs call
debug> sio
Step me!

 240:      1:    
 241:      1: b*     writeln('Step me!');
 242:      0:    

debug> li @pc

    Addr    Op Ins         P  Q
----------------------------------
 *  002942: 0F csp            0000000000000005
    002944: 75 dmp            0000000000000008
    00294D: AE mrkl*          00000000000000F2
    002956: AE mrkl*          00000000000000F3
    00295F: 7B ldci           0000000000000001
    002968: 03 sroi           00000000000031DD
    002971: AE mrkl*          00000000000000F4
    00297A: 01 ldoi           00000000000031DD
    002983: 7B ldci           0000000000000001
    00298C: 1C adi         
debug> ! step over wln call
debug> siso

debug> li @pc:11

    Addr    Op Ins         P  Q
----------------------------------
 *  002944: 75 dmp            0000000000000008
    00294D: AE mrkl*          00000000000000F2
    002956: AE mrkl*          00000000000000F3
    00295F: 7B ldci           0000000000000001
    002968: 03 sroi           00000000000031DD
    002971: AE mrkl*          00000000000000F4
    00297A: 01 ldoi           00000000000031DD
    002983: 7B ldci           0000000000000001
    00298C: 1C adi         
    00298D: 03 sroi           00000000000031DD
    002996: AE mrkl*          00000000000000F5
debug> ! load analyzer buffer
debug> an
debug> ! break at mrkl instruction, 11th from the top of the above listing
debug> bi @pc+82
debug> r

=== break ===

 244:      1: b      x := x+1;
 245:      1:  * 
 246:      0:        for i := 1 to 3 do writeln('Hi there!');    

debug> p @pc$

2996

debug> li @pc

    Addr    Op Ins         P  Q
----------------------------------
b*  002996: AE mrkl*          00000000000000F5
    00299F: AE mrkl*          00000000000000F6
    0029A8: 7B ldci           0000000000000001
    0029B1: 02 stri        01,FFFFFFFFFFFFFFF0
    0029BB: 7B ldci           0000000000000003
    0029C4: 02 stri        01,FFFFFFFFFFFFFFE8
    0029CE: 00 lodi        01,FFFFFFFFFFFFFFF0
    0029D8: 03 sroi           00000000000031E5
    0029E1: AE mrkl*          00000000000000F6
    0029EA: 01 ldoi           00000000000031E5
debug> lia

last instructions executed:

    00298D: 03 sroi           00000000000031DD
    00298C: 1C adi         
    002983: 7B ldci           0000000000000001
    00297A: 01 ldoi           00000000000031DD
    002971: AE mrkl*          00000000000000F4
    002968: 03 sroi           00000000000031DD
    00295F: 7B ldci           0000000000000001
    002956: AE mrkl*          00000000000000F3
    00294D: AE mrkl*          00000000000000F2
    002944: 75 dmp            0000000000000008

debug> ! Now step to for loop (sourcewise)
debug> s

 245:      2:    
 246:      1:  *     for i := 1 to 3 do writeln('Hi there!');    
 247:      0:    

debug> li @pc:20

    Addr    Op Ins         P  Q
----------------------------------
 *  0029A8: 7B ldci           0000000000000001
    0029B1: 02 stri        01,FFFFFFFFFFFFFFF0
    0029BB: 7B ldci           0000000000000003
    0029C4: 02 stri        01,FFFFFFFFFFFFFFE8
    0029CE: 00 lodi        01,FFFFFFFFFFFFFFF0
    0029D8: 03 sroi           00000000000031E5
    0029E1: AE mrkl*          00000000000000F6
    0029EA: 01 ldoi           00000000000031E5
    0029F3: 00 lodi        01,FFFFFFFFFFFFFFE8
    0029FD: A1 leqi        
    0029FE: 18 fjp            0000000000002A8B
    002A07: 38 lca            0000000000002AE8
    002A10: 05 lao            000000000000317E
    002A19: 76 swp            0000000000000008
    002A22: 7B ldci           0000000000000009
    002A2B: 76 swp            0000000000000008
    002A34: 7B ldci           0000000000000009
    002A3D: 0F csp            0000000000000006
    002A3F: 0F csp            0000000000000005
    002A41: 75 dmp            0000000000000008
debug> ! trace at the top of the for loop, and break the line after
debug> ! This is the fjp, 11th instruction from the top of the above listing
debug> tpi @pc+86
debug> b stop9
debug> r

 245:      2:    
 246:      2: t*     for i := 1 to 3 do writeln('Hi there!');    
 247:      0:    

Hi there!

 245:      2:    
 246:      3: t*     for i := 1 to 3 do writeln('Hi there!');    
 247:      0:    

Hi there!

 245:      2:    
 246:      4: t*     for i := 1 to 3 do writeln('Hi there!');    
 247:      0:    

Hi there!

=== break ===

  43:      0:    
  44:      1: b* procedure stop9; begin end;
  45:      0:    

debug> ret

 249:      1:    
 250:      1:  * end.

debug> 
debug> ! Test system variables
debug> ! This must be done at the end since it corrupts the variables.
debug> p @pc$

2ADD

debug> st @pc $1234
debug> p @pc$

1234

debug> 
debug> p @sp$

FFFFA0

debug> st @sp $1234
debug> p @sp$

1234

debug> 
debug> p @mp$

FFFFC8

debug> st @mp $1234
debug> p @mp$

1234

debug> 
debug> p @np$

3C18

debug> st @np $1234
debug> p @np$

1234

debug> 
debug> ! these variables can't be changed
debug> p @constants

10984

debug> p @heapbottom

15320

debug> 
debug> ! exit complete
debug> q

program complete
