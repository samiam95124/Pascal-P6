#!/bin/bash
################################################################################
#
# Configure scipt for Pascal-p6
#
# Sets up the complete Pascal-p6 project.
#
################################################################################

#
# Check command exists
#
# Uses the bash "command" built in.
#
function checkexists {

    command -v $1 >/dev/null
    rc=$?
    if [[ $rc != 0 ]] ; then

        echo "*** No $1 was found"

    fi

}

#
# Set default variables
#
compiler="gpc"
bits="32"
host="linux"

#
# Determine if needed programs exist. The only fatal one is grep, because we
# need that to run this script. The rest will impact the running of various
# test and build scripts.
#
checkexists grep
if [[ $rc != 0 ]] ; then

    exit 1

fi

checkexists diff
checkexists sed
checkexists rm
checkexists cp
checkexists mv

checkexists flip > /dev/null

if [[ $rc != 0 ]] ; then

    echo -n "flip does not exist"
    echo $PATH | grep -q "$PWD/bin" || echo -n ", has PATH been set up?"
    echo
    echo "attempting to make it"
    gcc -o ./bin/flip ./c_support/flip.c
    checkexists flip > /dev/null
    flip=$rc
    if [[ $rc != 0 ]] ; then

        echo "*** Unable to make flip"

    fi

fi
checkexists ls
checkexists zip

#
# Check user arguments
#
for var in "$@"
do

    if [ $var = "--help" ]
    then

        echo "Configure program for Pascal-p6"
        echo
        echo "--gpc:       Select GPC as target compiler"
        echo "--p6c:       Select p6c as target compiler"
        echo "--ip_pascal: Select IP Pascal as target compiler"
        echo "--32:        Select 32 bit target"
        echo "--64:        Select 64 bit target"
        echo
        exit 0

    elif [ $var = "--gpc" ]
    then

        compiler="gpc"

    elif [ $var = "--p6c" ]
    then

        compiler="p6c"

    elif [ $var = "--ip_pascal" ]
    then

        compiler="ip_pascal"

    elif [ $var = "--32" ]
    then

        bits="32"

    elif [ $var = "--64" ]
    then

        bits="64"

    fi

done


if [ $compiler = "p6c" ]; then
    checkexists "$p6CDIR/$compiler" > /dev/null
    if [[ $rc != 0 ]] ; then
        echo "p6c not found - has environment variable p6CDIR been set?"
        compiler=""
        # fatal this for now
        exit 1
    fi
else
    checkexists $compiler
    if [[ $rc != 0 ]] ; then
        compiler=""
        # fatal this for now
        exit 1
    fi
fi


if [ $compiler = "gpc" ]
then    gpc -v 2> temp
    grep "gpc version 20070904" temp > /dev/null
    rc=$?
    if [[ $rc != 0 ]] ; then

        echo "*** Warning, Pascal-p6 is only validated to work with gpc version 20070904"

    fi
    grep "build=x86_64" temp > /dev/null
    rc=$?
    if [[ $rc == 0 ]] ; then

        bits="64"

    fi

fi

if [ $compiler = "ip_pascal" ] || [ $compiler = "IP_Pascal" ]
then

   #
   # Set up for IP Pascal
   #
   echo "Set up for IP Pascal"
   cp ip_pascal/p6.bat      bin/p6.bat
   cp ip_pascal/compile.bat bin/compile.bat
   cp ip_pascal/run.bat     bin/run.bat

   cp ip_pascal/p6          bin/p6
   cp ip_pascal/compile     bin/compile
   cp ip_pascal/run         bin/run

   cp ip_pascal/Makefile    .

   cp ip_pascal/standard_tests/iso7185pat.cmp standard_tests
   cp ip_pascal/standard_tests/iso7185pats.cmp standard_tests

   #
   # IP Pascal does not care about line endings, but returning to DOS mode
   # line endings normalizes the files for SVN checkin.
   #
   #unixeol

elif [ $compiler = "gpc" ] || [ $compiler = "p6c" ]
then

   #
   # Set up for chosen Pascal compiler
   #
   echo "Set up for $compiler"
   cp $compiler/bit$bits/p6.bat bin/p6.bat
   cp $compiler/compile.bat     bin/compile.bat
   cp $compiler/run.bat         bin/run.bat

   cp $compiler/bit$bits/p6     bin/p6
   cp $compiler/compile         bin/compile
   cp $compiler/run             bin/run

   cp $compiler/bit$bits/Makefile    .

   cp $compiler/bit$bits/standard_tests/iso7185pat.cmp standard_tests
   cp $compiler/bit$bits/standard_tests/iso7185patc.cmp standard_tests
   cp $compiler/bit$bits/standard_tests/iso7185pats.cmp standard_tests
   
   cp $compiler/bit$bits/p4/standardp.cmp p4
   cp $compiler/bit$bits/p4/standardpc.cmp p4

   #
   # GPC has been problematic for line endings. This changes them
   # all to Unix mode for GPC compiles, which at this moment is
   # all there is. GPC for Windows has serious problems.
   #
   #unixeol

else

   #
   # No compiler name found!
   #
   echo "*** Compiler name does not match currently implemented"
   echo "*** compilers"
   echo
   echo "IP Pascal  - use \"ip_pascal\""
   echo "p6C Pascal - use \"p6C\""
   echo "GPC Pascal - use \"GPC\""

fi

echo "Bit length $bits"

echo "Configure completed!"
